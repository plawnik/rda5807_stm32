
f103radio.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003390  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000016c  0800349c  0800349c  0001349c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003608  08003608  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003608  08003608  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003608  08003608  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003608  08003608  00013608  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800360c  0800360c  0001360c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003610  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000178  20000070  08003680  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001e8  08003680  000201e8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ae12  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000199d  00000000  00000000  0002aeab  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000910  00000000  00000000  0002c848  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000860  00000000  00000000  0002d158  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017aad  00000000  00000000  0002d9b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008232  00000000  00000000  00045465  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00084b22  00000000  00000000  0004d697  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d21b9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002788  00000000  00000000  000d2234  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08003484 	.word	0x08003484

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08003484 	.word	0x08003484

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b0c6      	sub	sp, #280	; 0x118
 8000160:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000162:	f000 fbd3 	bl	800090c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000166:	f000 f85d 	bl	8000224 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800016a:	f000 f8f9 	bl	8000360 <MX_GPIO_Init>
  MX_I2C2_Init();
 800016e:	f000 f89f 	bl	80002b0 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 8000172:	f000 f8cb 	bl	800030c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  uart_dbg_init(&huart1);
 8000176:	4825      	ldr	r0, [pc, #148]	; (800020c <main+0xb0>)
 8000178:	f000 fb3e 	bl	80007f8 <uart_dbg_init>
  clear_console();
 800017c:	f000 fb8c 	bl	8000898 <clear_console>
  dbg("Start!\n\r");
 8000180:	4823      	ldr	r0, [pc, #140]	; (8000210 <main+0xb4>)
 8000182:	f000 fb77 	bl	8000874 <dbg>
  if(rda5807_init(&hi2c2)==RDA5807_NOT_FOUND)
 8000186:	4823      	ldr	r0, [pc, #140]	; (8000214 <main+0xb8>)
 8000188:	f000 f93a 	bl	8000400 <rda5807_init>
 800018c:	4603      	mov	r3, r0
 800018e:	f113 0f02 	cmn.w	r3, #2
 8000192:	d103      	bne.n	800019c <main+0x40>
  {
	  dbg("RDA5807 module not found!\n\r");
 8000194:	4820      	ldr	r0, [pc, #128]	; (8000218 <main+0xbc>)
 8000196:	f000 fb6d 	bl	8000874 <dbg>
	  while(1);
 800019a:	e7fe      	b.n	800019a <main+0x3e>
  } else{
	  dbg("RDA5807 module found!\n\r");
 800019c:	481f      	ldr	r0, [pc, #124]	; (800021c <main+0xc0>)
 800019e:	f000 fb69 	bl	8000874 <dbg>
  }



  uint8_t data[256];
  memset(data,0,256);
 80001a2:	f107 030c 	add.w	r3, r7, #12
 80001a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80001aa:	2100      	movs	r1, #0
 80001ac:	4618      	mov	r0, r3
 80001ae:	f002 fd58 	bl	8002c62 <memset>
  HAL_I2C_Master_Receive(&hi2c2, 0x10<<1, data, 16, 10);
 80001b2:	f107 020c 	add.w	r2, r7, #12
 80001b6:	230a      	movs	r3, #10
 80001b8:	9300      	str	r3, [sp, #0]
 80001ba:	2310      	movs	r3, #16
 80001bc:	2120      	movs	r1, #32
 80001be:	4815      	ldr	r0, [pc, #84]	; (8000214 <main+0xb8>)
 80001c0:	f001 f892 	bl	80012e8 <HAL_I2C_Master_Receive>

  for(int i = 0;i<8;i++){
 80001c4:	2300      	movs	r3, #0
 80001c6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80001ca:	e019      	b.n	8000200 <main+0xa4>
    dbg("reg %d = %x\n\r",i,((data[i*2]<<8)+data[i*2+1]));
 80001cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80001d0:	005b      	lsls	r3, r3, #1
 80001d2:	f107 020c 	add.w	r2, r7, #12
 80001d6:	5cd3      	ldrb	r3, [r2, r3]
 80001d8:	021b      	lsls	r3, r3, #8
 80001da:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 80001de:	0052      	lsls	r2, r2, #1
 80001e0:	3201      	adds	r2, #1
 80001e2:	f107 010c 	add.w	r1, r7, #12
 80001e6:	5c8a      	ldrb	r2, [r1, r2]
 80001e8:	4413      	add	r3, r2
 80001ea:	461a      	mov	r2, r3
 80001ec:	f8d7 110c 	ldr.w	r1, [r7, #268]	; 0x10c
 80001f0:	480b      	ldr	r0, [pc, #44]	; (8000220 <main+0xc4>)
 80001f2:	f000 fb3f 	bl	8000874 <dbg>
  for(int i = 0;i<8;i++){
 80001f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80001fa:	3301      	adds	r3, #1
 80001fc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8000200:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000204:	2b07      	cmp	r3, #7
 8000206:	dde1      	ble.n	80001cc <main+0x70>
  }


  while(1);
 8000208:	e7fe      	b.n	8000208 <main+0xac>
 800020a:	bf00      	nop
 800020c:	200000ec 	.word	0x200000ec
 8000210:	0800349c 	.word	0x0800349c
 8000214:	20000098 	.word	0x20000098
 8000218:	080034a8 	.word	0x080034a8
 800021c:	080034c4 	.word	0x080034c4
 8000220:	080034dc 	.word	0x080034dc

08000224 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	b090      	sub	sp, #64	; 0x40
 8000228:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800022a:	f107 0318 	add.w	r3, r7, #24
 800022e:	2228      	movs	r2, #40	; 0x28
 8000230:	2100      	movs	r1, #0
 8000232:	4618      	mov	r0, r3
 8000234:	f002 fd15 	bl	8002c62 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000238:	1d3b      	adds	r3, r7, #4
 800023a:	2200      	movs	r2, #0
 800023c:	601a      	str	r2, [r3, #0]
 800023e:	605a      	str	r2, [r3, #4]
 8000240:	609a      	str	r2, [r3, #8]
 8000242:	60da      	str	r2, [r3, #12]
 8000244:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000246:	2301      	movs	r3, #1
 8000248:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800024a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800024e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000250:	2300      	movs	r3, #0
 8000252:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000254:	2301      	movs	r3, #1
 8000256:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000258:	2302      	movs	r3, #2
 800025a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800025c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000260:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000262:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000266:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000268:	f107 0318 	add.w	r3, r7, #24
 800026c:	4618      	mov	r0, r3
 800026e:	f001 feef 	bl	8002050 <HAL_RCC_OscConfig>
 8000272:	4603      	mov	r3, r0
 8000274:	2b00      	cmp	r3, #0
 8000276:	d001      	beq.n	800027c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000278:	f000 f8bc 	bl	80003f4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800027c:	230f      	movs	r3, #15
 800027e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000280:	2302      	movs	r3, #2
 8000282:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000284:	2300      	movs	r3, #0
 8000286:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000288:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800028c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800028e:	2300      	movs	r3, #0
 8000290:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000292:	1d3b      	adds	r3, r7, #4
 8000294:	2102      	movs	r1, #2
 8000296:	4618      	mov	r0, r3
 8000298:	f002 f95a 	bl	8002550 <HAL_RCC_ClockConfig>
 800029c:	4603      	mov	r3, r0
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d001      	beq.n	80002a6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80002a2:	f000 f8a7 	bl	80003f4 <Error_Handler>
  }
}
 80002a6:	bf00      	nop
 80002a8:	3740      	adds	r7, #64	; 0x40
 80002aa:	46bd      	mov	sp, r7
 80002ac:	bd80      	pop	{r7, pc}
	...

080002b0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80002b4:	4b12      	ldr	r3, [pc, #72]	; (8000300 <MX_I2C2_Init+0x50>)
 80002b6:	4a13      	ldr	r2, [pc, #76]	; (8000304 <MX_I2C2_Init+0x54>)
 80002b8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80002ba:	4b11      	ldr	r3, [pc, #68]	; (8000300 <MX_I2C2_Init+0x50>)
 80002bc:	4a12      	ldr	r2, [pc, #72]	; (8000308 <MX_I2C2_Init+0x58>)
 80002be:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80002c0:	4b0f      	ldr	r3, [pc, #60]	; (8000300 <MX_I2C2_Init+0x50>)
 80002c2:	2200      	movs	r2, #0
 80002c4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80002c6:	4b0e      	ldr	r3, [pc, #56]	; (8000300 <MX_I2C2_Init+0x50>)
 80002c8:	2200      	movs	r2, #0
 80002ca:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80002cc:	4b0c      	ldr	r3, [pc, #48]	; (8000300 <MX_I2C2_Init+0x50>)
 80002ce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80002d2:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80002d4:	4b0a      	ldr	r3, [pc, #40]	; (8000300 <MX_I2C2_Init+0x50>)
 80002d6:	2200      	movs	r2, #0
 80002d8:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80002da:	4b09      	ldr	r3, [pc, #36]	; (8000300 <MX_I2C2_Init+0x50>)
 80002dc:	2200      	movs	r2, #0
 80002de:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80002e0:	4b07      	ldr	r3, [pc, #28]	; (8000300 <MX_I2C2_Init+0x50>)
 80002e2:	2200      	movs	r2, #0
 80002e4:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80002e6:	4b06      	ldr	r3, [pc, #24]	; (8000300 <MX_I2C2_Init+0x50>)
 80002e8:	2200      	movs	r2, #0
 80002ea:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80002ec:	4804      	ldr	r0, [pc, #16]	; (8000300 <MX_I2C2_Init+0x50>)
 80002ee:	f000 fdc5 	bl	8000e7c <HAL_I2C_Init>
 80002f2:	4603      	mov	r3, r0
 80002f4:	2b00      	cmp	r3, #0
 80002f6:	d001      	beq.n	80002fc <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80002f8:	f000 f87c 	bl	80003f4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80002fc:	bf00      	nop
 80002fe:	bd80      	pop	{r7, pc}
 8000300:	20000098 	.word	0x20000098
 8000304:	40005800 	.word	0x40005800
 8000308:	000186a0 	.word	0x000186a0

0800030c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800030c:	b580      	push	{r7, lr}
 800030e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000310:	4b11      	ldr	r3, [pc, #68]	; (8000358 <MX_USART1_UART_Init+0x4c>)
 8000312:	4a12      	ldr	r2, [pc, #72]	; (800035c <MX_USART1_UART_Init+0x50>)
 8000314:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000316:	4b10      	ldr	r3, [pc, #64]	; (8000358 <MX_USART1_UART_Init+0x4c>)
 8000318:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800031c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800031e:	4b0e      	ldr	r3, [pc, #56]	; (8000358 <MX_USART1_UART_Init+0x4c>)
 8000320:	2200      	movs	r2, #0
 8000322:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000324:	4b0c      	ldr	r3, [pc, #48]	; (8000358 <MX_USART1_UART_Init+0x4c>)
 8000326:	2200      	movs	r2, #0
 8000328:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800032a:	4b0b      	ldr	r3, [pc, #44]	; (8000358 <MX_USART1_UART_Init+0x4c>)
 800032c:	2200      	movs	r2, #0
 800032e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000330:	4b09      	ldr	r3, [pc, #36]	; (8000358 <MX_USART1_UART_Init+0x4c>)
 8000332:	220c      	movs	r2, #12
 8000334:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000336:	4b08      	ldr	r3, [pc, #32]	; (8000358 <MX_USART1_UART_Init+0x4c>)
 8000338:	2200      	movs	r2, #0
 800033a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800033c:	4b06      	ldr	r3, [pc, #24]	; (8000358 <MX_USART1_UART_Init+0x4c>)
 800033e:	2200      	movs	r2, #0
 8000340:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000342:	4805      	ldr	r0, [pc, #20]	; (8000358 <MX_USART1_UART_Init+0x4c>)
 8000344:	f002 faa0 	bl	8002888 <HAL_UART_Init>
 8000348:	4603      	mov	r3, r0
 800034a:	2b00      	cmp	r3, #0
 800034c:	d001      	beq.n	8000352 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800034e:	f000 f851 	bl	80003f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000352:	bf00      	nop
 8000354:	bd80      	pop	{r7, pc}
 8000356:	bf00      	nop
 8000358:	200000ec 	.word	0x200000ec
 800035c:	40013800 	.word	0x40013800

08000360 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	b088      	sub	sp, #32
 8000364:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000366:	f107 0310 	add.w	r3, r7, #16
 800036a:	2200      	movs	r2, #0
 800036c:	601a      	str	r2, [r3, #0]
 800036e:	605a      	str	r2, [r3, #4]
 8000370:	609a      	str	r2, [r3, #8]
 8000372:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000374:	4b1d      	ldr	r3, [pc, #116]	; (80003ec <MX_GPIO_Init+0x8c>)
 8000376:	699b      	ldr	r3, [r3, #24]
 8000378:	4a1c      	ldr	r2, [pc, #112]	; (80003ec <MX_GPIO_Init+0x8c>)
 800037a:	f043 0320 	orr.w	r3, r3, #32
 800037e:	6193      	str	r3, [r2, #24]
 8000380:	4b1a      	ldr	r3, [pc, #104]	; (80003ec <MX_GPIO_Init+0x8c>)
 8000382:	699b      	ldr	r3, [r3, #24]
 8000384:	f003 0320 	and.w	r3, r3, #32
 8000388:	60fb      	str	r3, [r7, #12]
 800038a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800038c:	4b17      	ldr	r3, [pc, #92]	; (80003ec <MX_GPIO_Init+0x8c>)
 800038e:	699b      	ldr	r3, [r3, #24]
 8000390:	4a16      	ldr	r2, [pc, #88]	; (80003ec <MX_GPIO_Init+0x8c>)
 8000392:	f043 0304 	orr.w	r3, r3, #4
 8000396:	6193      	str	r3, [r2, #24]
 8000398:	4b14      	ldr	r3, [pc, #80]	; (80003ec <MX_GPIO_Init+0x8c>)
 800039a:	699b      	ldr	r3, [r3, #24]
 800039c:	f003 0304 	and.w	r3, r3, #4
 80003a0:	60bb      	str	r3, [r7, #8]
 80003a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003a4:	4b11      	ldr	r3, [pc, #68]	; (80003ec <MX_GPIO_Init+0x8c>)
 80003a6:	699b      	ldr	r3, [r3, #24]
 80003a8:	4a10      	ldr	r2, [pc, #64]	; (80003ec <MX_GPIO_Init+0x8c>)
 80003aa:	f043 0308 	orr.w	r3, r3, #8
 80003ae:	6193      	str	r3, [r2, #24]
 80003b0:	4b0e      	ldr	r3, [pc, #56]	; (80003ec <MX_GPIO_Init+0x8c>)
 80003b2:	699b      	ldr	r3, [r3, #24]
 80003b4:	f003 0308 	and.w	r3, r3, #8
 80003b8:	607b      	str	r3, [r7, #4]
 80003ba:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_BOARD_GPIO_Port, LED_BOARD_Pin, GPIO_PIN_RESET);
 80003bc:	2200      	movs	r2, #0
 80003be:	2102      	movs	r1, #2
 80003c0:	480b      	ldr	r0, [pc, #44]	; (80003f0 <MX_GPIO_Init+0x90>)
 80003c2:	f000 fd43 	bl	8000e4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_BOARD_Pin */
  GPIO_InitStruct.Pin = LED_BOARD_Pin;
 80003c6:	2302      	movs	r3, #2
 80003c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003ca:	2301      	movs	r3, #1
 80003cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003ce:	2300      	movs	r3, #0
 80003d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003d2:	2302      	movs	r3, #2
 80003d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_BOARD_GPIO_Port, &GPIO_InitStruct);
 80003d6:	f107 0310 	add.w	r3, r7, #16
 80003da:	4619      	mov	r1, r3
 80003dc:	4804      	ldr	r0, [pc, #16]	; (80003f0 <MX_GPIO_Init+0x90>)
 80003de:	f000 fbdb 	bl	8000b98 <HAL_GPIO_Init>

}
 80003e2:	bf00      	nop
 80003e4:	3720      	adds	r7, #32
 80003e6:	46bd      	mov	sp, r7
 80003e8:	bd80      	pop	{r7, pc}
 80003ea:	bf00      	nop
 80003ec:	40021000 	.word	0x40021000
 80003f0:	40010800 	.word	0x40010800

080003f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003f4:	b480      	push	{r7}
 80003f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80003f8:	bf00      	nop
 80003fa:	46bd      	mov	sp, r7
 80003fc:	bc80      	pop	{r7}
 80003fe:	4770      	bx	lr

08000400 <rda5807_init>:
rda5807_config_t rda5807_config;
rda5807_status_t rda5807_status;



int8_t rda5807_init(I2C_HandleTypeDef *i2c_h) {
 8000400:	b580      	push	{r7, lr}
 8000402:	b082      	sub	sp, #8
 8000404:	af00      	add	r7, sp, #0
 8000406:	6078      	str	r0, [r7, #4]
  // check is RDA I2C working
  if (rda5807_check_is_connected(i2c_h) == RDA5807_NOT_FOUND) {
 8000408:	6878      	ldr	r0, [r7, #4]
 800040a:	f000 f86b 	bl	80004e4 <rda5807_check_is_connected>
 800040e:	4603      	mov	r3, r0
 8000410:	f113 0f02 	cmn.w	r3, #2
 8000414:	d102      	bne.n	800041c <rda5807_init+0x1c>
    return RDA5807_NOT_FOUND;
 8000416:	f06f 0301 	mvn.w	r3, #1
 800041a:	e048      	b.n	80004ae <rda5807_init+0xae>
  }
  rdahi2c = *i2c_h;
 800041c:	4a26      	ldr	r2, [pc, #152]	; (80004b8 <rda5807_init+0xb8>)
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	4610      	mov	r0, r2
 8000422:	4619      	mov	r1, r3
 8000424:	2354      	movs	r3, #84	; 0x54
 8000426:	461a      	mov	r2, r3
 8000428:	f002 fc10 	bl	8002c4c <memcpy>




  // set init values of registers
  rda5807_config.reg02.refined.MONO = 1;
 800042c:	4a23      	ldr	r2, [pc, #140]	; (80004bc <rda5807_init+0xbc>)
 800042e:	7953      	ldrb	r3, [r2, #5]
 8000430:	f043 0320 	orr.w	r3, r3, #32
 8000434:	7153      	strb	r3, [r2, #5]
  rda5807_config.reg05.refined.LNA_ICSEL_BIT = 0;
  rda5807_config.reg05.refined.SEEKTH = 8;
  rda5807_config.reg05.refined.VOLUME = 0b1011;
*/

  dbg("mono %x\n\r",rda5807_config.reg00.refined.DUMMY);
 8000436:	4b21      	ldr	r3, [pc, #132]	; (80004bc <rda5807_init+0xbc>)
 8000438:	785b      	ldrb	r3, [r3, #1]
 800043a:	4619      	mov	r1, r3
 800043c:	4820      	ldr	r0, [pc, #128]	; (80004c0 <rda5807_init+0xc0>)
 800043e:	f000 fa19 	bl	8000874 <dbg>

  dbg("r0 = %x\n\r",rda5807_config.reg00.raw);
 8000442:	4b1e      	ldr	r3, [pc, #120]	; (80004bc <rda5807_init+0xbc>)
 8000444:	881b      	ldrh	r3, [r3, #0]
 8000446:	4619      	mov	r1, r3
 8000448:	481e      	ldr	r0, [pc, #120]	; (80004c4 <rda5807_init+0xc4>)
 800044a:	f000 fa13 	bl	8000874 <dbg>
  dbg("r1 = %x\n\r",rda5807_config.reg01.raw);
 800044e:	4b1b      	ldr	r3, [pc, #108]	; (80004bc <rda5807_init+0xbc>)
 8000450:	885b      	ldrh	r3, [r3, #2]
 8000452:	4619      	mov	r1, r3
 8000454:	481c      	ldr	r0, [pc, #112]	; (80004c8 <rda5807_init+0xc8>)
 8000456:	f000 fa0d 	bl	8000874 <dbg>
  dbg("r2 = %x\n\r",rda5807_config.reg02.raw);
 800045a:	4b18      	ldr	r3, [pc, #96]	; (80004bc <rda5807_init+0xbc>)
 800045c:	889b      	ldrh	r3, [r3, #4]
 800045e:	4619      	mov	r1, r3
 8000460:	481a      	ldr	r0, [pc, #104]	; (80004cc <rda5807_init+0xcc>)
 8000462:	f000 fa07 	bl	8000874 <dbg>
  dbg("r3 = %x\n\r",rda5807_config.reg03.raw);
 8000466:	4b15      	ldr	r3, [pc, #84]	; (80004bc <rda5807_init+0xbc>)
 8000468:	88db      	ldrh	r3, [r3, #6]
 800046a:	4619      	mov	r1, r3
 800046c:	4818      	ldr	r0, [pc, #96]	; (80004d0 <rda5807_init+0xd0>)
 800046e:	f000 fa01 	bl	8000874 <dbg>
  dbg("r4 = %x\n\r",rda5807_config.reg04.raw);
 8000472:	4b12      	ldr	r3, [pc, #72]	; (80004bc <rda5807_init+0xbc>)
 8000474:	891b      	ldrh	r3, [r3, #8]
 8000476:	4619      	mov	r1, r3
 8000478:	4816      	ldr	r0, [pc, #88]	; (80004d4 <rda5807_init+0xd4>)
 800047a:	f000 f9fb 	bl	8000874 <dbg>
  dbg("r5 = %x\n\r",rda5807_config.reg05.raw);
 800047e:	4b0f      	ldr	r3, [pc, #60]	; (80004bc <rda5807_init+0xbc>)
 8000480:	895b      	ldrh	r3, [r3, #10]
 8000482:	4619      	mov	r1, r3
 8000484:	4814      	ldr	r0, [pc, #80]	; (80004d8 <rda5807_init+0xd8>)
 8000486:	f000 f9f5 	bl	8000874 <dbg>
  dbg("r6 = %x\n\r",rda5807_config.reg06.raw);
 800048a:	4b0c      	ldr	r3, [pc, #48]	; (80004bc <rda5807_init+0xbc>)
 800048c:	899b      	ldrh	r3, [r3, #12]
 800048e:	4619      	mov	r1, r3
 8000490:	4812      	ldr	r0, [pc, #72]	; (80004dc <rda5807_init+0xdc>)
 8000492:	f000 f9ef 	bl	8000874 <dbg>
  dbg("r7 = %x\n\r",rda5807_config.reg07.raw);
 8000496:	4b09      	ldr	r3, [pc, #36]	; (80004bc <rda5807_init+0xbc>)
 8000498:	89db      	ldrh	r3, [r3, #14]
 800049a:	4619      	mov	r1, r3
 800049c:	4810      	ldr	r0, [pc, #64]	; (80004e0 <rda5807_init+0xe0>)
 800049e:	f000 f9e9 	bl	8000874 <dbg>
  //rda5807_config.reg00.refined.CHIPID = 0x04;
  // TODO:
  //rda5807_write_register(0x02, rda5807_config.reg02.raw);
  //rda5807_write_register(0x02, rda5807_config.reg05.raw);

  rda5807_write_register(0x02, 0b1111000000000001);
 80004a2:	f24f 0101 	movw	r1, #61441	; 0xf001
 80004a6:	2002      	movs	r0, #2
 80004a8:	f000 f836 	bl	8000518 <rda5807_write_register>
  //rda5807_write_register(0x05, 0b0000100010111111);

  return RDA5807_OK;
 80004ac:	2300      	movs	r3, #0
}
 80004ae:	4618      	mov	r0, r3
 80004b0:	3708      	adds	r7, #8
 80004b2:	46bd      	mov	sp, r7
 80004b4:	bd80      	pop	{r7, pc}
 80004b6:	bf00      	nop
 80004b8:	2000012c 	.word	0x2000012c
 80004bc:	2000018c 	.word	0x2000018c
 80004c0:	080034ec 	.word	0x080034ec
 80004c4:	080034f8 	.word	0x080034f8
 80004c8:	08003504 	.word	0x08003504
 80004cc:	08003510 	.word	0x08003510
 80004d0:	0800351c 	.word	0x0800351c
 80004d4:	08003528 	.word	0x08003528
 80004d8:	08003534 	.word	0x08003534
 80004dc:	08003540 	.word	0x08003540
 80004e0:	0800354c 	.word	0x0800354c

080004e4 <rda5807_check_is_connected>:

int8_t rda5807_check_is_connected(I2C_HandleTypeDef *i2c) {
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b084      	sub	sp, #16
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]
  uint8_t err = 0;
 80004ec:	2300      	movs	r3, #0
 80004ee:	73fb      	strb	r3, [r7, #15]
  err = HAL_I2C_IsDeviceReady(i2c, 0x10 << 1, 2, 50);
 80004f0:	2332      	movs	r3, #50	; 0x32
 80004f2:	2202      	movs	r2, #2
 80004f4:	2120      	movs	r1, #32
 80004f6:	6878      	ldr	r0, [r7, #4]
 80004f8:	f001 f950 	bl	800179c <HAL_I2C_IsDeviceReady>
 80004fc:	4603      	mov	r3, r0
 80004fe:	73fb      	strb	r3, [r7, #15]
  return err ? RDA5807_NOT_FOUND : RDA5807_OK;
 8000500:	7bfb      	ldrb	r3, [r7, #15]
 8000502:	2b00      	cmp	r3, #0
 8000504:	d002      	beq.n	800050c <rda5807_check_is_connected+0x28>
 8000506:	f06f 0301 	mvn.w	r3, #1
 800050a:	e000      	b.n	800050e <rda5807_check_is_connected+0x2a>
 800050c:	2300      	movs	r3, #0
}
 800050e:	4618      	mov	r0, r3
 8000510:	3710      	adds	r7, #16
 8000512:	46bd      	mov	sp, r7
 8000514:	bd80      	pop	{r7, pc}
	...

08000518 <rda5807_write_register>:

int8_t rda5807_write_register(uint8_t reg, uint16_t val) {
 8000518:	b580      	push	{r7, lr}
 800051a:	b086      	sub	sp, #24
 800051c:	af02      	add	r7, sp, #8
 800051e:	4603      	mov	r3, r0
 8000520:	460a      	mov	r2, r1
 8000522:	71fb      	strb	r3, [r7, #7]
 8000524:	4613      	mov	r3, r2
 8000526:	80bb      	strh	r3, [r7, #4]
  // check register addres is valid
  if (reg < 0x02 || reg > 0x08)
 8000528:	79fb      	ldrb	r3, [r7, #7]
 800052a:	2b01      	cmp	r3, #1
 800052c:	d902      	bls.n	8000534 <rda5807_write_register+0x1c>
 800052e:	79fb      	ldrb	r3, [r7, #7]
 8000530:	2b08      	cmp	r3, #8
 8000532:	d902      	bls.n	800053a <rda5807_write_register+0x22>
    return RDA5807_WRITE_ERROR;
 8000534:	f06f 0302 	mvn.w	r3, #2
 8000538:	e02d      	b.n	8000596 <rda5807_write_register+0x7e>
  // prepare send buffer
  uint8_t data[3];
  data[0] = reg;
 800053a:	79fb      	ldrb	r3, [r7, #7]
 800053c:	733b      	strb	r3, [r7, #12]
  data[1] = val >> 8;
 800053e:	88bb      	ldrh	r3, [r7, #4]
 8000540:	0a1b      	lsrs	r3, r3, #8
 8000542:	b29b      	uxth	r3, r3
 8000544:	b2db      	uxtb	r3, r3
 8000546:	737b      	strb	r3, [r7, #13]
  data[2] = (uint8_t)val & 0xFF;
 8000548:	88bb      	ldrh	r3, [r7, #4]
 800054a:	b2db      	uxtb	r3, r3
 800054c:	73bb      	strb	r3, [r7, #14]





  dbg("sizeof s truct = %d\n\r",sizeof(rda5807_config.reg02));
 800054e:	2102      	movs	r1, #2
 8000550:	4813      	ldr	r0, [pc, #76]	; (80005a0 <rda5807_write_register+0x88>)
 8000552:	f000 f98f 	bl	8000874 <dbg>
  dbg("r = %x\n\r", val);
 8000556:	88bb      	ldrh	r3, [r7, #4]
 8000558:	4619      	mov	r1, r3
 800055a:	4812      	ldr	r0, [pc, #72]	; (80005a4 <rda5807_write_register+0x8c>)
 800055c:	f000 f98a 	bl	8000874 <dbg>
  dbg("1=%x 2=%x=3%x\n\r", data[0],data[1],data[2]);
 8000560:	7b3b      	ldrb	r3, [r7, #12]
 8000562:	4619      	mov	r1, r3
 8000564:	7b7b      	ldrb	r3, [r7, #13]
 8000566:	461a      	mov	r2, r3
 8000568:	7bbb      	ldrb	r3, [r7, #14]
 800056a:	480f      	ldr	r0, [pc, #60]	; (80005a8 <rda5807_write_register+0x90>)
 800056c:	f000 f982 	bl	8000874 <dbg>
  //while(1);
  // send data to rda5807
  HAL_StatusTypeDef err;
  err = HAL_I2C_Master_Transmit(&rdahi2c, RDA5807_DIRECT_WRITE_REGISTER << 1,
 8000570:	f107 020c 	add.w	r2, r7, #12
 8000574:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8000578:	9300      	str	r3, [sp, #0]
 800057a:	2303      	movs	r3, #3
 800057c:	2120      	movs	r1, #32
 800057e:	480b      	ldr	r0, [pc, #44]	; (80005ac <rda5807_write_register+0x94>)
 8000580:	f000 fdb4 	bl	80010ec <HAL_I2C_Master_Transmit>
 8000584:	4603      	mov	r3, r0
 8000586:	73fb      	strb	r3, [r7, #15]
                                 data, 3, 300);
  if(err!=HAL_OK)
 8000588:	7bfb      	ldrb	r3, [r7, #15]
 800058a:	2b00      	cmp	r3, #0
 800058c:	d002      	beq.n	8000594 <rda5807_write_register+0x7c>
    return RDA5807_WRITE_ERROR;
 800058e:	f06f 0302 	mvn.w	r3, #2
 8000592:	e000      	b.n	8000596 <rda5807_write_register+0x7e>
  return RDA5807_OK;
 8000594:	2300      	movs	r3, #0

}
 8000596:	4618      	mov	r0, r3
 8000598:	3710      	adds	r7, #16
 800059a:	46bd      	mov	sp, r7
 800059c:	bd80      	pop	{r7, pc}
 800059e:	bf00      	nop
 80005a0:	08003558 	.word	0x08003558
 80005a4:	08003570 	.word	0x08003570
 80005a8:	0800357c 	.word	0x0800357c
 80005ac:	2000012c 	.word	0x2000012c

080005b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005b0:	b480      	push	{r7}
 80005b2:	b085      	sub	sp, #20
 80005b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80005b6:	4b15      	ldr	r3, [pc, #84]	; (800060c <HAL_MspInit+0x5c>)
 80005b8:	699b      	ldr	r3, [r3, #24]
 80005ba:	4a14      	ldr	r2, [pc, #80]	; (800060c <HAL_MspInit+0x5c>)
 80005bc:	f043 0301 	orr.w	r3, r3, #1
 80005c0:	6193      	str	r3, [r2, #24]
 80005c2:	4b12      	ldr	r3, [pc, #72]	; (800060c <HAL_MspInit+0x5c>)
 80005c4:	699b      	ldr	r3, [r3, #24]
 80005c6:	f003 0301 	and.w	r3, r3, #1
 80005ca:	60bb      	str	r3, [r7, #8]
 80005cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005ce:	4b0f      	ldr	r3, [pc, #60]	; (800060c <HAL_MspInit+0x5c>)
 80005d0:	69db      	ldr	r3, [r3, #28]
 80005d2:	4a0e      	ldr	r2, [pc, #56]	; (800060c <HAL_MspInit+0x5c>)
 80005d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005d8:	61d3      	str	r3, [r2, #28]
 80005da:	4b0c      	ldr	r3, [pc, #48]	; (800060c <HAL_MspInit+0x5c>)
 80005dc:	69db      	ldr	r3, [r3, #28]
 80005de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005e2:	607b      	str	r3, [r7, #4]
 80005e4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80005e6:	4b0a      	ldr	r3, [pc, #40]	; (8000610 <HAL_MspInit+0x60>)
 80005e8:	685b      	ldr	r3, [r3, #4]
 80005ea:	60fb      	str	r3, [r7, #12]
 80005ec:	68fb      	ldr	r3, [r7, #12]
 80005ee:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80005f2:	60fb      	str	r3, [r7, #12]
 80005f4:	68fb      	ldr	r3, [r7, #12]
 80005f6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80005fa:	60fb      	str	r3, [r7, #12]
 80005fc:	4a04      	ldr	r2, [pc, #16]	; (8000610 <HAL_MspInit+0x60>)
 80005fe:	68fb      	ldr	r3, [r7, #12]
 8000600:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000602:	bf00      	nop
 8000604:	3714      	adds	r7, #20
 8000606:	46bd      	mov	sp, r7
 8000608:	bc80      	pop	{r7}
 800060a:	4770      	bx	lr
 800060c:	40021000 	.word	0x40021000
 8000610:	40010000 	.word	0x40010000

08000614 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b088      	sub	sp, #32
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800061c:	f107 0310 	add.w	r3, r7, #16
 8000620:	2200      	movs	r2, #0
 8000622:	601a      	str	r2, [r3, #0]
 8000624:	605a      	str	r2, [r3, #4]
 8000626:	609a      	str	r2, [r3, #8]
 8000628:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	4a16      	ldr	r2, [pc, #88]	; (8000688 <HAL_I2C_MspInit+0x74>)
 8000630:	4293      	cmp	r3, r2
 8000632:	d124      	bne.n	800067e <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000634:	4b15      	ldr	r3, [pc, #84]	; (800068c <HAL_I2C_MspInit+0x78>)
 8000636:	699b      	ldr	r3, [r3, #24]
 8000638:	4a14      	ldr	r2, [pc, #80]	; (800068c <HAL_I2C_MspInit+0x78>)
 800063a:	f043 0308 	orr.w	r3, r3, #8
 800063e:	6193      	str	r3, [r2, #24]
 8000640:	4b12      	ldr	r3, [pc, #72]	; (800068c <HAL_I2C_MspInit+0x78>)
 8000642:	699b      	ldr	r3, [r3, #24]
 8000644:	f003 0308 	and.w	r3, r3, #8
 8000648:	60fb      	str	r3, [r7, #12]
 800064a:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800064c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000650:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000652:	2312      	movs	r3, #18
 8000654:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000656:	2303      	movs	r3, #3
 8000658:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800065a:	f107 0310 	add.w	r3, r7, #16
 800065e:	4619      	mov	r1, r3
 8000660:	480b      	ldr	r0, [pc, #44]	; (8000690 <HAL_I2C_MspInit+0x7c>)
 8000662:	f000 fa99 	bl	8000b98 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000666:	4b09      	ldr	r3, [pc, #36]	; (800068c <HAL_I2C_MspInit+0x78>)
 8000668:	69db      	ldr	r3, [r3, #28]
 800066a:	4a08      	ldr	r2, [pc, #32]	; (800068c <HAL_I2C_MspInit+0x78>)
 800066c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000670:	61d3      	str	r3, [r2, #28]
 8000672:	4b06      	ldr	r3, [pc, #24]	; (800068c <HAL_I2C_MspInit+0x78>)
 8000674:	69db      	ldr	r3, [r3, #28]
 8000676:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800067a:	60bb      	str	r3, [r7, #8]
 800067c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800067e:	bf00      	nop
 8000680:	3720      	adds	r7, #32
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	40005800 	.word	0x40005800
 800068c:	40021000 	.word	0x40021000
 8000690:	40010c00 	.word	0x40010c00

08000694 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b088      	sub	sp, #32
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800069c:	f107 0310 	add.w	r3, r7, #16
 80006a0:	2200      	movs	r2, #0
 80006a2:	601a      	str	r2, [r3, #0]
 80006a4:	605a      	str	r2, [r3, #4]
 80006a6:	609a      	str	r2, [r3, #8]
 80006a8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	4a1c      	ldr	r2, [pc, #112]	; (8000720 <HAL_UART_MspInit+0x8c>)
 80006b0:	4293      	cmp	r3, r2
 80006b2:	d131      	bne.n	8000718 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80006b4:	4b1b      	ldr	r3, [pc, #108]	; (8000724 <HAL_UART_MspInit+0x90>)
 80006b6:	699b      	ldr	r3, [r3, #24]
 80006b8:	4a1a      	ldr	r2, [pc, #104]	; (8000724 <HAL_UART_MspInit+0x90>)
 80006ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006be:	6193      	str	r3, [r2, #24]
 80006c0:	4b18      	ldr	r3, [pc, #96]	; (8000724 <HAL_UART_MspInit+0x90>)
 80006c2:	699b      	ldr	r3, [r3, #24]
 80006c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006c8:	60fb      	str	r3, [r7, #12]
 80006ca:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006cc:	4b15      	ldr	r3, [pc, #84]	; (8000724 <HAL_UART_MspInit+0x90>)
 80006ce:	699b      	ldr	r3, [r3, #24]
 80006d0:	4a14      	ldr	r2, [pc, #80]	; (8000724 <HAL_UART_MspInit+0x90>)
 80006d2:	f043 0304 	orr.w	r3, r3, #4
 80006d6:	6193      	str	r3, [r2, #24]
 80006d8:	4b12      	ldr	r3, [pc, #72]	; (8000724 <HAL_UART_MspInit+0x90>)
 80006da:	699b      	ldr	r3, [r3, #24]
 80006dc:	f003 0304 	and.w	r3, r3, #4
 80006e0:	60bb      	str	r3, [r7, #8]
 80006e2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80006e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80006e8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006ea:	2302      	movs	r3, #2
 80006ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006ee:	2303      	movs	r3, #3
 80006f0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006f2:	f107 0310 	add.w	r3, r7, #16
 80006f6:	4619      	mov	r1, r3
 80006f8:	480b      	ldr	r0, [pc, #44]	; (8000728 <HAL_UART_MspInit+0x94>)
 80006fa:	f000 fa4d 	bl	8000b98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80006fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000702:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000704:	2300      	movs	r3, #0
 8000706:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000708:	2300      	movs	r3, #0
 800070a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800070c:	f107 0310 	add.w	r3, r7, #16
 8000710:	4619      	mov	r1, r3
 8000712:	4805      	ldr	r0, [pc, #20]	; (8000728 <HAL_UART_MspInit+0x94>)
 8000714:	f000 fa40 	bl	8000b98 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000718:	bf00      	nop
 800071a:	3720      	adds	r7, #32
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}
 8000720:	40013800 	.word	0x40013800
 8000724:	40021000 	.word	0x40021000
 8000728:	40010800 	.word	0x40010800

0800072c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800072c:	b480      	push	{r7}
 800072e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000730:	bf00      	nop
 8000732:	46bd      	mov	sp, r7
 8000734:	bc80      	pop	{r7}
 8000736:	4770      	bx	lr

08000738 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000738:	b480      	push	{r7}
 800073a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800073c:	e7fe      	b.n	800073c <HardFault_Handler+0x4>

0800073e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800073e:	b480      	push	{r7}
 8000740:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000742:	e7fe      	b.n	8000742 <MemManage_Handler+0x4>

08000744 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000744:	b480      	push	{r7}
 8000746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000748:	e7fe      	b.n	8000748 <BusFault_Handler+0x4>

0800074a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800074a:	b480      	push	{r7}
 800074c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800074e:	e7fe      	b.n	800074e <UsageFault_Handler+0x4>

08000750 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000750:	b480      	push	{r7}
 8000752:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000754:	bf00      	nop
 8000756:	46bd      	mov	sp, r7
 8000758:	bc80      	pop	{r7}
 800075a:	4770      	bx	lr

0800075c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800075c:	b480      	push	{r7}
 800075e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000760:	bf00      	nop
 8000762:	46bd      	mov	sp, r7
 8000764:	bc80      	pop	{r7}
 8000766:	4770      	bx	lr

08000768 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000768:	b480      	push	{r7}
 800076a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800076c:	bf00      	nop
 800076e:	46bd      	mov	sp, r7
 8000770:	bc80      	pop	{r7}
 8000772:	4770      	bx	lr

08000774 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000778:	f000 f90e 	bl	8000998 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800077c:	bf00      	nop
 800077e:	bd80      	pop	{r7, pc}

08000780 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b086      	sub	sp, #24
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000788:	4a14      	ldr	r2, [pc, #80]	; (80007dc <_sbrk+0x5c>)
 800078a:	4b15      	ldr	r3, [pc, #84]	; (80007e0 <_sbrk+0x60>)
 800078c:	1ad3      	subs	r3, r2, r3
 800078e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000790:	697b      	ldr	r3, [r7, #20]
 8000792:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000794:	4b13      	ldr	r3, [pc, #76]	; (80007e4 <_sbrk+0x64>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	2b00      	cmp	r3, #0
 800079a:	d102      	bne.n	80007a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800079c:	4b11      	ldr	r3, [pc, #68]	; (80007e4 <_sbrk+0x64>)
 800079e:	4a12      	ldr	r2, [pc, #72]	; (80007e8 <_sbrk+0x68>)
 80007a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80007a2:	4b10      	ldr	r3, [pc, #64]	; (80007e4 <_sbrk+0x64>)
 80007a4:	681a      	ldr	r2, [r3, #0]
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	4413      	add	r3, r2
 80007aa:	693a      	ldr	r2, [r7, #16]
 80007ac:	429a      	cmp	r2, r3
 80007ae:	d207      	bcs.n	80007c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80007b0:	f002 fa22 	bl	8002bf8 <__errno>
 80007b4:	4602      	mov	r2, r0
 80007b6:	230c      	movs	r3, #12
 80007b8:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80007ba:	f04f 33ff 	mov.w	r3, #4294967295
 80007be:	e009      	b.n	80007d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80007c0:	4b08      	ldr	r3, [pc, #32]	; (80007e4 <_sbrk+0x64>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80007c6:	4b07      	ldr	r3, [pc, #28]	; (80007e4 <_sbrk+0x64>)
 80007c8:	681a      	ldr	r2, [r3, #0]
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	4413      	add	r3, r2
 80007ce:	4a05      	ldr	r2, [pc, #20]	; (80007e4 <_sbrk+0x64>)
 80007d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80007d2:	68fb      	ldr	r3, [r7, #12]
}
 80007d4:	4618      	mov	r0, r3
 80007d6:	3718      	adds	r7, #24
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	20005000 	.word	0x20005000
 80007e0:	00000400 	.word	0x00000400
 80007e4:	2000008c 	.word	0x2000008c
 80007e8:	200001e8 	.word	0x200001e8

080007ec <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80007ec:	b480      	push	{r7}
 80007ee:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007f0:	bf00      	nop
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bc80      	pop	{r7}
 80007f6:	4770      	bx	lr

080007f8 <uart_dbg_init>:
#include "main.h"


UART_HandleTypeDef dbg_uart_handler;

void uart_dbg_init(UART_HandleTypeDef* uart_handler){
 80007f8:	b5b0      	push	{r4, r5, r7, lr}
 80007fa:	b082      	sub	sp, #8
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
	dbg_uart_handler = *uart_handler;
 8000800:	4a0a      	ldr	r2, [pc, #40]	; (800082c <uart_dbg_init+0x34>)
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	4614      	mov	r4, r2
 8000806:	461d      	mov	r5, r3
 8000808:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800080a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800080c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800080e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000810:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000812:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000814:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000818:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	clear_console();
 800081c:	f000 f83c 	bl	8000898 <clear_console>
	hide_cursor_console();
 8000820:	f000 f844 	bl	80008ac <hide_cursor_console>
}
 8000824:	bf00      	nop
 8000826:	3708      	adds	r7, #8
 8000828:	46bd      	mov	sp, r7
 800082a:	bdb0      	pop	{r4, r5, r7, pc}
 800082c:	200001a0 	.word	0x200001a0

08000830 <vprint>:


void vprint(const char *fmt, va_list argp)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b09c      	sub	sp, #112	; 0x70
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
 8000838:	6039      	str	r1, [r7, #0]
    char string[100];
    if(0 < vsprintf(string,fmt,argp)) // build string
 800083a:	f107 030c 	add.w	r3, r7, #12
 800083e:	683a      	ldr	r2, [r7, #0]
 8000840:	6879      	ldr	r1, [r7, #4]
 8000842:	4618      	mov	r0, r3
 8000844:	f002 fa2c 	bl	8002ca0 <vsiprintf>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	dd0c      	ble.n	8000868 <vprint+0x38>
    {
        HAL_UART_Transmit(&dbg_uart_handler, (uint8_t*)string, strlen(string),10); // send message via UART
 800084e:	f107 030c 	add.w	r3, r7, #12
 8000852:	4618      	mov	r0, r3
 8000854:	f7ff fc7a 	bl	800014c <strlen>
 8000858:	4603      	mov	r3, r0
 800085a:	b29a      	uxth	r2, r3
 800085c:	f107 010c 	add.w	r1, r7, #12
 8000860:	230a      	movs	r3, #10
 8000862:	4803      	ldr	r0, [pc, #12]	; (8000870 <vprint+0x40>)
 8000864:	f002 f85d 	bl	8002922 <HAL_UART_Transmit>
    }
}
 8000868:	bf00      	nop
 800086a:	3770      	adds	r7, #112	; 0x70
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}
 8000870:	200001a0 	.word	0x200001a0

08000874 <dbg>:

void dbg(const char *fmt, ...) // custom printf() function
{
 8000874:	b40f      	push	{r0, r1, r2, r3}
 8000876:	b580      	push	{r7, lr}
 8000878:	b082      	sub	sp, #8
 800087a:	af00      	add	r7, sp, #0
    va_list argp;
    va_start(argp, fmt);
 800087c:	f107 0314 	add.w	r3, r7, #20
 8000880:	607b      	str	r3, [r7, #4]
    vprint(fmt, argp);
 8000882:	6879      	ldr	r1, [r7, #4]
 8000884:	6938      	ldr	r0, [r7, #16]
 8000886:	f7ff ffd3 	bl	8000830 <vprint>
    va_end(argp);
}
 800088a:	bf00      	nop
 800088c:	3708      	adds	r7, #8
 800088e:	46bd      	mov	sp, r7
 8000890:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000894:	b004      	add	sp, #16
 8000896:	4770      	bx	lr

08000898 <clear_console>:

void clear_console(void){
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0
  dbg("\033[2J\033[H");// clear console window
 800089c:	4802      	ldr	r0, [pc, #8]	; (80008a8 <clear_console+0x10>)
 800089e:	f7ff ffe9 	bl	8000874 <dbg>
}
 80008a2:	bf00      	nop
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	0800358c 	.word	0x0800358c

080008ac <hide_cursor_console>:

void home_console(void){
  dbg("\033[H");// clear console window
}

void hide_cursor_console(void){
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
	dbg("\e[?25l");
 80008b0:	4802      	ldr	r0, [pc, #8]	; (80008bc <hide_cursor_console+0x10>)
 80008b2:	f7ff ffdf 	bl	8000874 <dbg>
}
 80008b6:	bf00      	nop
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	08003598 	.word	0x08003598

080008c0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80008c0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80008c2:	e003      	b.n	80008cc <LoopCopyDataInit>

080008c4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80008c4:	4b0b      	ldr	r3, [pc, #44]	; (80008f4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80008c6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80008c8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80008ca:	3104      	adds	r1, #4

080008cc <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80008cc:	480a      	ldr	r0, [pc, #40]	; (80008f8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80008ce:	4b0b      	ldr	r3, [pc, #44]	; (80008fc <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80008d0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80008d2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80008d4:	d3f6      	bcc.n	80008c4 <CopyDataInit>
  ldr r2, =_sbss
 80008d6:	4a0a      	ldr	r2, [pc, #40]	; (8000900 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80008d8:	e002      	b.n	80008e0 <LoopFillZerobss>

080008da <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80008da:	2300      	movs	r3, #0
  str r3, [r2], #4
 80008dc:	f842 3b04 	str.w	r3, [r2], #4

080008e0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80008e0:	4b08      	ldr	r3, [pc, #32]	; (8000904 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80008e2:	429a      	cmp	r2, r3
  bcc FillZerobss
 80008e4:	d3f9      	bcc.n	80008da <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80008e6:	f7ff ff81 	bl	80007ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80008ea:	f002 f98b 	bl	8002c04 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80008ee:	f7ff fc35 	bl	800015c <main>
  bx lr
 80008f2:	4770      	bx	lr
  ldr r3, =_sidata
 80008f4:	08003610 	.word	0x08003610
  ldr r0, =_sdata
 80008f8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80008fc:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 8000900:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 8000904:	200001e8 	.word	0x200001e8

08000908 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000908:	e7fe      	b.n	8000908 <ADC1_2_IRQHandler>
	...

0800090c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000910:	4b08      	ldr	r3, [pc, #32]	; (8000934 <HAL_Init+0x28>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	4a07      	ldr	r2, [pc, #28]	; (8000934 <HAL_Init+0x28>)
 8000916:	f043 0310 	orr.w	r3, r3, #16
 800091a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800091c:	2003      	movs	r0, #3
 800091e:	f000 f907 	bl	8000b30 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000922:	2000      	movs	r0, #0
 8000924:	f000 f808 	bl	8000938 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000928:	f7ff fe42 	bl	80005b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800092c:	2300      	movs	r3, #0
}
 800092e:	4618      	mov	r0, r3
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	40022000 	.word	0x40022000

08000938 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b082      	sub	sp, #8
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000940:	4b12      	ldr	r3, [pc, #72]	; (800098c <HAL_InitTick+0x54>)
 8000942:	681a      	ldr	r2, [r3, #0]
 8000944:	4b12      	ldr	r3, [pc, #72]	; (8000990 <HAL_InitTick+0x58>)
 8000946:	781b      	ldrb	r3, [r3, #0]
 8000948:	4619      	mov	r1, r3
 800094a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800094e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000952:	fbb2 f3f3 	udiv	r3, r2, r3
 8000956:	4618      	mov	r0, r3
 8000958:	f000 f911 	bl	8000b7e <HAL_SYSTICK_Config>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d001      	beq.n	8000966 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000962:	2301      	movs	r3, #1
 8000964:	e00e      	b.n	8000984 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	2b0f      	cmp	r3, #15
 800096a:	d80a      	bhi.n	8000982 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800096c:	2200      	movs	r2, #0
 800096e:	6879      	ldr	r1, [r7, #4]
 8000970:	f04f 30ff 	mov.w	r0, #4294967295
 8000974:	f000 f8e7 	bl	8000b46 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000978:	4a06      	ldr	r2, [pc, #24]	; (8000994 <HAL_InitTick+0x5c>)
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800097e:	2300      	movs	r3, #0
 8000980:	e000      	b.n	8000984 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000982:	2301      	movs	r3, #1
}
 8000984:	4618      	mov	r0, r3
 8000986:	3708      	adds	r7, #8
 8000988:	46bd      	mov	sp, r7
 800098a:	bd80      	pop	{r7, pc}
 800098c:	20000000 	.word	0x20000000
 8000990:	20000008 	.word	0x20000008
 8000994:	20000004 	.word	0x20000004

08000998 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800099c:	4b05      	ldr	r3, [pc, #20]	; (80009b4 <HAL_IncTick+0x1c>)
 800099e:	781b      	ldrb	r3, [r3, #0]
 80009a0:	461a      	mov	r2, r3
 80009a2:	4b05      	ldr	r3, [pc, #20]	; (80009b8 <HAL_IncTick+0x20>)
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	4413      	add	r3, r2
 80009a8:	4a03      	ldr	r2, [pc, #12]	; (80009b8 <HAL_IncTick+0x20>)
 80009aa:	6013      	str	r3, [r2, #0]
}
 80009ac:	bf00      	nop
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bc80      	pop	{r7}
 80009b2:	4770      	bx	lr
 80009b4:	20000008 	.word	0x20000008
 80009b8:	200001e0 	.word	0x200001e0

080009bc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  return uwTick;
 80009c0:	4b02      	ldr	r3, [pc, #8]	; (80009cc <HAL_GetTick+0x10>)
 80009c2:	681b      	ldr	r3, [r3, #0]
}
 80009c4:	4618      	mov	r0, r3
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bc80      	pop	{r7}
 80009ca:	4770      	bx	lr
 80009cc:	200001e0 	.word	0x200001e0

080009d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009d0:	b480      	push	{r7}
 80009d2:	b085      	sub	sp, #20
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	f003 0307 	and.w	r3, r3, #7
 80009de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009e0:	4b0c      	ldr	r3, [pc, #48]	; (8000a14 <__NVIC_SetPriorityGrouping+0x44>)
 80009e2:	68db      	ldr	r3, [r3, #12]
 80009e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009e6:	68ba      	ldr	r2, [r7, #8]
 80009e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009ec:	4013      	ands	r3, r2
 80009ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80009f0:	68fb      	ldr	r3, [r7, #12]
 80009f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009f4:	68bb      	ldr	r3, [r7, #8]
 80009f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a02:	4a04      	ldr	r2, [pc, #16]	; (8000a14 <__NVIC_SetPriorityGrouping+0x44>)
 8000a04:	68bb      	ldr	r3, [r7, #8]
 8000a06:	60d3      	str	r3, [r2, #12]
}
 8000a08:	bf00      	nop
 8000a0a:	3714      	adds	r7, #20
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bc80      	pop	{r7}
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop
 8000a14:	e000ed00 	.word	0xe000ed00

08000a18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a1c:	4b04      	ldr	r3, [pc, #16]	; (8000a30 <__NVIC_GetPriorityGrouping+0x18>)
 8000a1e:	68db      	ldr	r3, [r3, #12]
 8000a20:	0a1b      	lsrs	r3, r3, #8
 8000a22:	f003 0307 	and.w	r3, r3, #7
}
 8000a26:	4618      	mov	r0, r3
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bc80      	pop	{r7}
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop
 8000a30:	e000ed00 	.word	0xe000ed00

08000a34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a34:	b480      	push	{r7}
 8000a36:	b083      	sub	sp, #12
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	6039      	str	r1, [r7, #0]
 8000a3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	db0a      	blt.n	8000a5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a48:	683b      	ldr	r3, [r7, #0]
 8000a4a:	b2da      	uxtb	r2, r3
 8000a4c:	490c      	ldr	r1, [pc, #48]	; (8000a80 <__NVIC_SetPriority+0x4c>)
 8000a4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a52:	0112      	lsls	r2, r2, #4
 8000a54:	b2d2      	uxtb	r2, r2
 8000a56:	440b      	add	r3, r1
 8000a58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a5c:	e00a      	b.n	8000a74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a5e:	683b      	ldr	r3, [r7, #0]
 8000a60:	b2da      	uxtb	r2, r3
 8000a62:	4908      	ldr	r1, [pc, #32]	; (8000a84 <__NVIC_SetPriority+0x50>)
 8000a64:	79fb      	ldrb	r3, [r7, #7]
 8000a66:	f003 030f 	and.w	r3, r3, #15
 8000a6a:	3b04      	subs	r3, #4
 8000a6c:	0112      	lsls	r2, r2, #4
 8000a6e:	b2d2      	uxtb	r2, r2
 8000a70:	440b      	add	r3, r1
 8000a72:	761a      	strb	r2, [r3, #24]
}
 8000a74:	bf00      	nop
 8000a76:	370c      	adds	r7, #12
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bc80      	pop	{r7}
 8000a7c:	4770      	bx	lr
 8000a7e:	bf00      	nop
 8000a80:	e000e100 	.word	0xe000e100
 8000a84:	e000ed00 	.word	0xe000ed00

08000a88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	b089      	sub	sp, #36	; 0x24
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	60f8      	str	r0, [r7, #12]
 8000a90:	60b9      	str	r1, [r7, #8]
 8000a92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	f003 0307 	and.w	r3, r3, #7
 8000a9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a9c:	69fb      	ldr	r3, [r7, #28]
 8000a9e:	f1c3 0307 	rsb	r3, r3, #7
 8000aa2:	2b04      	cmp	r3, #4
 8000aa4:	bf28      	it	cs
 8000aa6:	2304      	movcs	r3, #4
 8000aa8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000aaa:	69fb      	ldr	r3, [r7, #28]
 8000aac:	3304      	adds	r3, #4
 8000aae:	2b06      	cmp	r3, #6
 8000ab0:	d902      	bls.n	8000ab8 <NVIC_EncodePriority+0x30>
 8000ab2:	69fb      	ldr	r3, [r7, #28]
 8000ab4:	3b03      	subs	r3, #3
 8000ab6:	e000      	b.n	8000aba <NVIC_EncodePriority+0x32>
 8000ab8:	2300      	movs	r3, #0
 8000aba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000abc:	f04f 32ff 	mov.w	r2, #4294967295
 8000ac0:	69bb      	ldr	r3, [r7, #24]
 8000ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ac6:	43da      	mvns	r2, r3
 8000ac8:	68bb      	ldr	r3, [r7, #8]
 8000aca:	401a      	ands	r2, r3
 8000acc:	697b      	ldr	r3, [r7, #20]
 8000ace:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ad0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ad4:	697b      	ldr	r3, [r7, #20]
 8000ad6:	fa01 f303 	lsl.w	r3, r1, r3
 8000ada:	43d9      	mvns	r1, r3
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ae0:	4313      	orrs	r3, r2
         );
}
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	3724      	adds	r7, #36	; 0x24
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bc80      	pop	{r7}
 8000aea:	4770      	bx	lr

08000aec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b082      	sub	sp, #8
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	3b01      	subs	r3, #1
 8000af8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000afc:	d301      	bcc.n	8000b02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000afe:	2301      	movs	r3, #1
 8000b00:	e00f      	b.n	8000b22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b02:	4a0a      	ldr	r2, [pc, #40]	; (8000b2c <SysTick_Config+0x40>)
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	3b01      	subs	r3, #1
 8000b08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b0a:	210f      	movs	r1, #15
 8000b0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b10:	f7ff ff90 	bl	8000a34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b14:	4b05      	ldr	r3, [pc, #20]	; (8000b2c <SysTick_Config+0x40>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b1a:	4b04      	ldr	r3, [pc, #16]	; (8000b2c <SysTick_Config+0x40>)
 8000b1c:	2207      	movs	r2, #7
 8000b1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b20:	2300      	movs	r3, #0
}
 8000b22:	4618      	mov	r0, r3
 8000b24:	3708      	adds	r7, #8
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	e000e010 	.word	0xe000e010

08000b30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b082      	sub	sp, #8
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b38:	6878      	ldr	r0, [r7, #4]
 8000b3a:	f7ff ff49 	bl	80009d0 <__NVIC_SetPriorityGrouping>
}
 8000b3e:	bf00      	nop
 8000b40:	3708      	adds	r7, #8
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}

08000b46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b46:	b580      	push	{r7, lr}
 8000b48:	b086      	sub	sp, #24
 8000b4a:	af00      	add	r7, sp, #0
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	60b9      	str	r1, [r7, #8]
 8000b50:	607a      	str	r2, [r7, #4]
 8000b52:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b54:	2300      	movs	r3, #0
 8000b56:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b58:	f7ff ff5e 	bl	8000a18 <__NVIC_GetPriorityGrouping>
 8000b5c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b5e:	687a      	ldr	r2, [r7, #4]
 8000b60:	68b9      	ldr	r1, [r7, #8]
 8000b62:	6978      	ldr	r0, [r7, #20]
 8000b64:	f7ff ff90 	bl	8000a88 <NVIC_EncodePriority>
 8000b68:	4602      	mov	r2, r0
 8000b6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b6e:	4611      	mov	r1, r2
 8000b70:	4618      	mov	r0, r3
 8000b72:	f7ff ff5f 	bl	8000a34 <__NVIC_SetPriority>
}
 8000b76:	bf00      	nop
 8000b78:	3718      	adds	r7, #24
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}

08000b7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b7e:	b580      	push	{r7, lr}
 8000b80:	b082      	sub	sp, #8
 8000b82:	af00      	add	r7, sp, #0
 8000b84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b86:	6878      	ldr	r0, [r7, #4]
 8000b88:	f7ff ffb0 	bl	8000aec <SysTick_Config>
 8000b8c:	4603      	mov	r3, r0
}
 8000b8e:	4618      	mov	r0, r3
 8000b90:	3708      	adds	r7, #8
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
	...

08000b98 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b08b      	sub	sp, #44	; 0x2c
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
 8000ba0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000baa:	e127      	b.n	8000dfc <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000bac:	2201      	movs	r2, #1
 8000bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000bb6:	683b      	ldr	r3, [r7, #0]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	69fa      	ldr	r2, [r7, #28]
 8000bbc:	4013      	ands	r3, r2
 8000bbe:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000bc0:	69ba      	ldr	r2, [r7, #24]
 8000bc2:	69fb      	ldr	r3, [r7, #28]
 8000bc4:	429a      	cmp	r2, r3
 8000bc6:	f040 8116 	bne.w	8000df6 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000bca:	683b      	ldr	r3, [r7, #0]
 8000bcc:	685b      	ldr	r3, [r3, #4]
 8000bce:	2b12      	cmp	r3, #18
 8000bd0:	d034      	beq.n	8000c3c <HAL_GPIO_Init+0xa4>
 8000bd2:	2b12      	cmp	r3, #18
 8000bd4:	d80d      	bhi.n	8000bf2 <HAL_GPIO_Init+0x5a>
 8000bd6:	2b02      	cmp	r3, #2
 8000bd8:	d02b      	beq.n	8000c32 <HAL_GPIO_Init+0x9a>
 8000bda:	2b02      	cmp	r3, #2
 8000bdc:	d804      	bhi.n	8000be8 <HAL_GPIO_Init+0x50>
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d031      	beq.n	8000c46 <HAL_GPIO_Init+0xae>
 8000be2:	2b01      	cmp	r3, #1
 8000be4:	d01c      	beq.n	8000c20 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000be6:	e048      	b.n	8000c7a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000be8:	2b03      	cmp	r3, #3
 8000bea:	d043      	beq.n	8000c74 <HAL_GPIO_Init+0xdc>
 8000bec:	2b11      	cmp	r3, #17
 8000bee:	d01b      	beq.n	8000c28 <HAL_GPIO_Init+0x90>
          break;
 8000bf0:	e043      	b.n	8000c7a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000bf2:	4a89      	ldr	r2, [pc, #548]	; (8000e18 <HAL_GPIO_Init+0x280>)
 8000bf4:	4293      	cmp	r3, r2
 8000bf6:	d026      	beq.n	8000c46 <HAL_GPIO_Init+0xae>
 8000bf8:	4a87      	ldr	r2, [pc, #540]	; (8000e18 <HAL_GPIO_Init+0x280>)
 8000bfa:	4293      	cmp	r3, r2
 8000bfc:	d806      	bhi.n	8000c0c <HAL_GPIO_Init+0x74>
 8000bfe:	4a87      	ldr	r2, [pc, #540]	; (8000e1c <HAL_GPIO_Init+0x284>)
 8000c00:	4293      	cmp	r3, r2
 8000c02:	d020      	beq.n	8000c46 <HAL_GPIO_Init+0xae>
 8000c04:	4a86      	ldr	r2, [pc, #536]	; (8000e20 <HAL_GPIO_Init+0x288>)
 8000c06:	4293      	cmp	r3, r2
 8000c08:	d01d      	beq.n	8000c46 <HAL_GPIO_Init+0xae>
          break;
 8000c0a:	e036      	b.n	8000c7a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000c0c:	4a85      	ldr	r2, [pc, #532]	; (8000e24 <HAL_GPIO_Init+0x28c>)
 8000c0e:	4293      	cmp	r3, r2
 8000c10:	d019      	beq.n	8000c46 <HAL_GPIO_Init+0xae>
 8000c12:	4a85      	ldr	r2, [pc, #532]	; (8000e28 <HAL_GPIO_Init+0x290>)
 8000c14:	4293      	cmp	r3, r2
 8000c16:	d016      	beq.n	8000c46 <HAL_GPIO_Init+0xae>
 8000c18:	4a84      	ldr	r2, [pc, #528]	; (8000e2c <HAL_GPIO_Init+0x294>)
 8000c1a:	4293      	cmp	r3, r2
 8000c1c:	d013      	beq.n	8000c46 <HAL_GPIO_Init+0xae>
          break;
 8000c1e:	e02c      	b.n	8000c7a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	68db      	ldr	r3, [r3, #12]
 8000c24:	623b      	str	r3, [r7, #32]
          break;
 8000c26:	e028      	b.n	8000c7a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000c28:	683b      	ldr	r3, [r7, #0]
 8000c2a:	68db      	ldr	r3, [r3, #12]
 8000c2c:	3304      	adds	r3, #4
 8000c2e:	623b      	str	r3, [r7, #32]
          break;
 8000c30:	e023      	b.n	8000c7a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000c32:	683b      	ldr	r3, [r7, #0]
 8000c34:	68db      	ldr	r3, [r3, #12]
 8000c36:	3308      	adds	r3, #8
 8000c38:	623b      	str	r3, [r7, #32]
          break;
 8000c3a:	e01e      	b.n	8000c7a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	68db      	ldr	r3, [r3, #12]
 8000c40:	330c      	adds	r3, #12
 8000c42:	623b      	str	r3, [r7, #32]
          break;
 8000c44:	e019      	b.n	8000c7a <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000c46:	683b      	ldr	r3, [r7, #0]
 8000c48:	689b      	ldr	r3, [r3, #8]
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d102      	bne.n	8000c54 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000c4e:	2304      	movs	r3, #4
 8000c50:	623b      	str	r3, [r7, #32]
          break;
 8000c52:	e012      	b.n	8000c7a <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	689b      	ldr	r3, [r3, #8]
 8000c58:	2b01      	cmp	r3, #1
 8000c5a:	d105      	bne.n	8000c68 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c5c:	2308      	movs	r3, #8
 8000c5e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	69fa      	ldr	r2, [r7, #28]
 8000c64:	611a      	str	r2, [r3, #16]
          break;
 8000c66:	e008      	b.n	8000c7a <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c68:	2308      	movs	r3, #8
 8000c6a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	69fa      	ldr	r2, [r7, #28]
 8000c70:	615a      	str	r2, [r3, #20]
          break;
 8000c72:	e002      	b.n	8000c7a <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000c74:	2300      	movs	r3, #0
 8000c76:	623b      	str	r3, [r7, #32]
          break;
 8000c78:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000c7a:	69bb      	ldr	r3, [r7, #24]
 8000c7c:	2bff      	cmp	r3, #255	; 0xff
 8000c7e:	d801      	bhi.n	8000c84 <HAL_GPIO_Init+0xec>
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	e001      	b.n	8000c88 <HAL_GPIO_Init+0xf0>
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	3304      	adds	r3, #4
 8000c88:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000c8a:	69bb      	ldr	r3, [r7, #24]
 8000c8c:	2bff      	cmp	r3, #255	; 0xff
 8000c8e:	d802      	bhi.n	8000c96 <HAL_GPIO_Init+0xfe>
 8000c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c92:	009b      	lsls	r3, r3, #2
 8000c94:	e002      	b.n	8000c9c <HAL_GPIO_Init+0x104>
 8000c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c98:	3b08      	subs	r3, #8
 8000c9a:	009b      	lsls	r3, r3, #2
 8000c9c:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000c9e:	697b      	ldr	r3, [r7, #20]
 8000ca0:	681a      	ldr	r2, [r3, #0]
 8000ca2:	210f      	movs	r1, #15
 8000ca4:	693b      	ldr	r3, [r7, #16]
 8000ca6:	fa01 f303 	lsl.w	r3, r1, r3
 8000caa:	43db      	mvns	r3, r3
 8000cac:	401a      	ands	r2, r3
 8000cae:	6a39      	ldr	r1, [r7, #32]
 8000cb0:	693b      	ldr	r3, [r7, #16]
 8000cb2:	fa01 f303 	lsl.w	r3, r1, r3
 8000cb6:	431a      	orrs	r2, r3
 8000cb8:	697b      	ldr	r3, [r7, #20]
 8000cba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	685b      	ldr	r3, [r3, #4]
 8000cc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	f000 8096 	beq.w	8000df6 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000cca:	4b59      	ldr	r3, [pc, #356]	; (8000e30 <HAL_GPIO_Init+0x298>)
 8000ccc:	699b      	ldr	r3, [r3, #24]
 8000cce:	4a58      	ldr	r2, [pc, #352]	; (8000e30 <HAL_GPIO_Init+0x298>)
 8000cd0:	f043 0301 	orr.w	r3, r3, #1
 8000cd4:	6193      	str	r3, [r2, #24]
 8000cd6:	4b56      	ldr	r3, [pc, #344]	; (8000e30 <HAL_GPIO_Init+0x298>)
 8000cd8:	699b      	ldr	r3, [r3, #24]
 8000cda:	f003 0301 	and.w	r3, r3, #1
 8000cde:	60bb      	str	r3, [r7, #8]
 8000ce0:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000ce2:	4a54      	ldr	r2, [pc, #336]	; (8000e34 <HAL_GPIO_Init+0x29c>)
 8000ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ce6:	089b      	lsrs	r3, r3, #2
 8000ce8:	3302      	adds	r3, #2
 8000cea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cee:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cf2:	f003 0303 	and.w	r3, r3, #3
 8000cf6:	009b      	lsls	r3, r3, #2
 8000cf8:	220f      	movs	r2, #15
 8000cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfe:	43db      	mvns	r3, r3
 8000d00:	68fa      	ldr	r2, [r7, #12]
 8000d02:	4013      	ands	r3, r2
 8000d04:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	4a4b      	ldr	r2, [pc, #300]	; (8000e38 <HAL_GPIO_Init+0x2a0>)
 8000d0a:	4293      	cmp	r3, r2
 8000d0c:	d013      	beq.n	8000d36 <HAL_GPIO_Init+0x19e>
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	4a4a      	ldr	r2, [pc, #296]	; (8000e3c <HAL_GPIO_Init+0x2a4>)
 8000d12:	4293      	cmp	r3, r2
 8000d14:	d00d      	beq.n	8000d32 <HAL_GPIO_Init+0x19a>
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	4a49      	ldr	r2, [pc, #292]	; (8000e40 <HAL_GPIO_Init+0x2a8>)
 8000d1a:	4293      	cmp	r3, r2
 8000d1c:	d007      	beq.n	8000d2e <HAL_GPIO_Init+0x196>
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	4a48      	ldr	r2, [pc, #288]	; (8000e44 <HAL_GPIO_Init+0x2ac>)
 8000d22:	4293      	cmp	r3, r2
 8000d24:	d101      	bne.n	8000d2a <HAL_GPIO_Init+0x192>
 8000d26:	2303      	movs	r3, #3
 8000d28:	e006      	b.n	8000d38 <HAL_GPIO_Init+0x1a0>
 8000d2a:	2304      	movs	r3, #4
 8000d2c:	e004      	b.n	8000d38 <HAL_GPIO_Init+0x1a0>
 8000d2e:	2302      	movs	r3, #2
 8000d30:	e002      	b.n	8000d38 <HAL_GPIO_Init+0x1a0>
 8000d32:	2301      	movs	r3, #1
 8000d34:	e000      	b.n	8000d38 <HAL_GPIO_Init+0x1a0>
 8000d36:	2300      	movs	r3, #0
 8000d38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d3a:	f002 0203 	and.w	r2, r2, #3
 8000d3e:	0092      	lsls	r2, r2, #2
 8000d40:	4093      	lsls	r3, r2
 8000d42:	68fa      	ldr	r2, [r7, #12]
 8000d44:	4313      	orrs	r3, r2
 8000d46:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000d48:	493a      	ldr	r1, [pc, #232]	; (8000e34 <HAL_GPIO_Init+0x29c>)
 8000d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d4c:	089b      	lsrs	r3, r3, #2
 8000d4e:	3302      	adds	r3, #2
 8000d50:	68fa      	ldr	r2, [r7, #12]
 8000d52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	685b      	ldr	r3, [r3, #4]
 8000d5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d006      	beq.n	8000d70 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000d62:	4b39      	ldr	r3, [pc, #228]	; (8000e48 <HAL_GPIO_Init+0x2b0>)
 8000d64:	681a      	ldr	r2, [r3, #0]
 8000d66:	4938      	ldr	r1, [pc, #224]	; (8000e48 <HAL_GPIO_Init+0x2b0>)
 8000d68:	69bb      	ldr	r3, [r7, #24]
 8000d6a:	4313      	orrs	r3, r2
 8000d6c:	600b      	str	r3, [r1, #0]
 8000d6e:	e006      	b.n	8000d7e <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000d70:	4b35      	ldr	r3, [pc, #212]	; (8000e48 <HAL_GPIO_Init+0x2b0>)
 8000d72:	681a      	ldr	r2, [r3, #0]
 8000d74:	69bb      	ldr	r3, [r7, #24]
 8000d76:	43db      	mvns	r3, r3
 8000d78:	4933      	ldr	r1, [pc, #204]	; (8000e48 <HAL_GPIO_Init+0x2b0>)
 8000d7a:	4013      	ands	r3, r2
 8000d7c:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	685b      	ldr	r3, [r3, #4]
 8000d82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d006      	beq.n	8000d98 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000d8a:	4b2f      	ldr	r3, [pc, #188]	; (8000e48 <HAL_GPIO_Init+0x2b0>)
 8000d8c:	685a      	ldr	r2, [r3, #4]
 8000d8e:	492e      	ldr	r1, [pc, #184]	; (8000e48 <HAL_GPIO_Init+0x2b0>)
 8000d90:	69bb      	ldr	r3, [r7, #24]
 8000d92:	4313      	orrs	r3, r2
 8000d94:	604b      	str	r3, [r1, #4]
 8000d96:	e006      	b.n	8000da6 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000d98:	4b2b      	ldr	r3, [pc, #172]	; (8000e48 <HAL_GPIO_Init+0x2b0>)
 8000d9a:	685a      	ldr	r2, [r3, #4]
 8000d9c:	69bb      	ldr	r3, [r7, #24]
 8000d9e:	43db      	mvns	r3, r3
 8000da0:	4929      	ldr	r1, [pc, #164]	; (8000e48 <HAL_GPIO_Init+0x2b0>)
 8000da2:	4013      	ands	r3, r2
 8000da4:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	685b      	ldr	r3, [r3, #4]
 8000daa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d006      	beq.n	8000dc0 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000db2:	4b25      	ldr	r3, [pc, #148]	; (8000e48 <HAL_GPIO_Init+0x2b0>)
 8000db4:	689a      	ldr	r2, [r3, #8]
 8000db6:	4924      	ldr	r1, [pc, #144]	; (8000e48 <HAL_GPIO_Init+0x2b0>)
 8000db8:	69bb      	ldr	r3, [r7, #24]
 8000dba:	4313      	orrs	r3, r2
 8000dbc:	608b      	str	r3, [r1, #8]
 8000dbe:	e006      	b.n	8000dce <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000dc0:	4b21      	ldr	r3, [pc, #132]	; (8000e48 <HAL_GPIO_Init+0x2b0>)
 8000dc2:	689a      	ldr	r2, [r3, #8]
 8000dc4:	69bb      	ldr	r3, [r7, #24]
 8000dc6:	43db      	mvns	r3, r3
 8000dc8:	491f      	ldr	r1, [pc, #124]	; (8000e48 <HAL_GPIO_Init+0x2b0>)
 8000dca:	4013      	ands	r3, r2
 8000dcc:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	685b      	ldr	r3, [r3, #4]
 8000dd2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d006      	beq.n	8000de8 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000dda:	4b1b      	ldr	r3, [pc, #108]	; (8000e48 <HAL_GPIO_Init+0x2b0>)
 8000ddc:	68da      	ldr	r2, [r3, #12]
 8000dde:	491a      	ldr	r1, [pc, #104]	; (8000e48 <HAL_GPIO_Init+0x2b0>)
 8000de0:	69bb      	ldr	r3, [r7, #24]
 8000de2:	4313      	orrs	r3, r2
 8000de4:	60cb      	str	r3, [r1, #12]
 8000de6:	e006      	b.n	8000df6 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000de8:	4b17      	ldr	r3, [pc, #92]	; (8000e48 <HAL_GPIO_Init+0x2b0>)
 8000dea:	68da      	ldr	r2, [r3, #12]
 8000dec:	69bb      	ldr	r3, [r7, #24]
 8000dee:	43db      	mvns	r3, r3
 8000df0:	4915      	ldr	r1, [pc, #84]	; (8000e48 <HAL_GPIO_Init+0x2b0>)
 8000df2:	4013      	ands	r3, r2
 8000df4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000df8:	3301      	adds	r3, #1
 8000dfa:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	681a      	ldr	r2, [r3, #0]
 8000e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e02:	fa22 f303 	lsr.w	r3, r2, r3
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	f47f aed0 	bne.w	8000bac <HAL_GPIO_Init+0x14>
  }
}
 8000e0c:	bf00      	nop
 8000e0e:	372c      	adds	r7, #44	; 0x2c
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bc80      	pop	{r7}
 8000e14:	4770      	bx	lr
 8000e16:	bf00      	nop
 8000e18:	10210000 	.word	0x10210000
 8000e1c:	10110000 	.word	0x10110000
 8000e20:	10120000 	.word	0x10120000
 8000e24:	10310000 	.word	0x10310000
 8000e28:	10320000 	.word	0x10320000
 8000e2c:	10220000 	.word	0x10220000
 8000e30:	40021000 	.word	0x40021000
 8000e34:	40010000 	.word	0x40010000
 8000e38:	40010800 	.word	0x40010800
 8000e3c:	40010c00 	.word	0x40010c00
 8000e40:	40011000 	.word	0x40011000
 8000e44:	40011400 	.word	0x40011400
 8000e48:	40010400 	.word	0x40010400

08000e4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b083      	sub	sp, #12
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
 8000e54:	460b      	mov	r3, r1
 8000e56:	807b      	strh	r3, [r7, #2]
 8000e58:	4613      	mov	r3, r2
 8000e5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000e5c:	787b      	ldrb	r3, [r7, #1]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d003      	beq.n	8000e6a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000e62:	887a      	ldrh	r2, [r7, #2]
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000e68:	e003      	b.n	8000e72 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000e6a:	887b      	ldrh	r3, [r7, #2]
 8000e6c:	041a      	lsls	r2, r3, #16
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	611a      	str	r2, [r3, #16]
}
 8000e72:	bf00      	nop
 8000e74:	370c      	adds	r7, #12
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bc80      	pop	{r7}
 8000e7a:	4770      	bx	lr

08000e7c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b084      	sub	sp, #16
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d101      	bne.n	8000e8e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	e11f      	b.n	80010ce <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000e94:	b2db      	uxtb	r3, r3
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d106      	bne.n	8000ea8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000ea2:	6878      	ldr	r0, [r7, #4]
 8000ea4:	f7ff fbb6 	bl	8000614 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	2224      	movs	r2, #36	; 0x24
 8000eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	681a      	ldr	r2, [r3, #0]
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	f022 0201 	bic.w	r2, r2, #1
 8000ebe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	681a      	ldr	r2, [r3, #0]
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000ece:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	681a      	ldr	r2, [r3, #0]
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000ede:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000ee0:	f001 fc8c 	bl	80027fc <HAL_RCC_GetPCLK1Freq>
 8000ee4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	685b      	ldr	r3, [r3, #4]
 8000eea:	4a7b      	ldr	r2, [pc, #492]	; (80010d8 <HAL_I2C_Init+0x25c>)
 8000eec:	4293      	cmp	r3, r2
 8000eee:	d807      	bhi.n	8000f00 <HAL_I2C_Init+0x84>
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	4a7a      	ldr	r2, [pc, #488]	; (80010dc <HAL_I2C_Init+0x260>)
 8000ef4:	4293      	cmp	r3, r2
 8000ef6:	bf94      	ite	ls
 8000ef8:	2301      	movls	r3, #1
 8000efa:	2300      	movhi	r3, #0
 8000efc:	b2db      	uxtb	r3, r3
 8000efe:	e006      	b.n	8000f0e <HAL_I2C_Init+0x92>
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	4a77      	ldr	r2, [pc, #476]	; (80010e0 <HAL_I2C_Init+0x264>)
 8000f04:	4293      	cmp	r3, r2
 8000f06:	bf94      	ite	ls
 8000f08:	2301      	movls	r3, #1
 8000f0a:	2300      	movhi	r3, #0
 8000f0c:	b2db      	uxtb	r3, r3
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d001      	beq.n	8000f16 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8000f12:	2301      	movs	r3, #1
 8000f14:	e0db      	b.n	80010ce <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	4a72      	ldr	r2, [pc, #456]	; (80010e4 <HAL_I2C_Init+0x268>)
 8000f1a:	fba2 2303 	umull	r2, r3, r2, r3
 8000f1e:	0c9b      	lsrs	r3, r3, #18
 8000f20:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	68ba      	ldr	r2, [r7, #8]
 8000f32:	430a      	orrs	r2, r1
 8000f34:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	6a1b      	ldr	r3, [r3, #32]
 8000f3c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	4a64      	ldr	r2, [pc, #400]	; (80010d8 <HAL_I2C_Init+0x25c>)
 8000f46:	4293      	cmp	r3, r2
 8000f48:	d802      	bhi.n	8000f50 <HAL_I2C_Init+0xd4>
 8000f4a:	68bb      	ldr	r3, [r7, #8]
 8000f4c:	3301      	adds	r3, #1
 8000f4e:	e009      	b.n	8000f64 <HAL_I2C_Init+0xe8>
 8000f50:	68bb      	ldr	r3, [r7, #8]
 8000f52:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000f56:	fb02 f303 	mul.w	r3, r2, r3
 8000f5a:	4a63      	ldr	r2, [pc, #396]	; (80010e8 <HAL_I2C_Init+0x26c>)
 8000f5c:	fba2 2303 	umull	r2, r3, r2, r3
 8000f60:	099b      	lsrs	r3, r3, #6
 8000f62:	3301      	adds	r3, #1
 8000f64:	687a      	ldr	r2, [r7, #4]
 8000f66:	6812      	ldr	r2, [r2, #0]
 8000f68:	430b      	orrs	r3, r1
 8000f6a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	69db      	ldr	r3, [r3, #28]
 8000f72:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8000f76:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	685b      	ldr	r3, [r3, #4]
 8000f7e:	4956      	ldr	r1, [pc, #344]	; (80010d8 <HAL_I2C_Init+0x25c>)
 8000f80:	428b      	cmp	r3, r1
 8000f82:	d80d      	bhi.n	8000fa0 <HAL_I2C_Init+0x124>
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	1e59      	subs	r1, r3, #1
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	005b      	lsls	r3, r3, #1
 8000f8e:	fbb1 f3f3 	udiv	r3, r1, r3
 8000f92:	3301      	adds	r3, #1
 8000f94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000f98:	2b04      	cmp	r3, #4
 8000f9a:	bf38      	it	cc
 8000f9c:	2304      	movcc	r3, #4
 8000f9e:	e04f      	b.n	8001040 <HAL_I2C_Init+0x1c4>
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	689b      	ldr	r3, [r3, #8]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d111      	bne.n	8000fcc <HAL_I2C_Init+0x150>
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	1e58      	subs	r0, r3, #1
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	6859      	ldr	r1, [r3, #4]
 8000fb0:	460b      	mov	r3, r1
 8000fb2:	005b      	lsls	r3, r3, #1
 8000fb4:	440b      	add	r3, r1
 8000fb6:	fbb0 f3f3 	udiv	r3, r0, r3
 8000fba:	3301      	adds	r3, #1
 8000fbc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	bf0c      	ite	eq
 8000fc4:	2301      	moveq	r3, #1
 8000fc6:	2300      	movne	r3, #0
 8000fc8:	b2db      	uxtb	r3, r3
 8000fca:	e012      	b.n	8000ff2 <HAL_I2C_Init+0x176>
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	1e58      	subs	r0, r3, #1
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	6859      	ldr	r1, [r3, #4]
 8000fd4:	460b      	mov	r3, r1
 8000fd6:	009b      	lsls	r3, r3, #2
 8000fd8:	440b      	add	r3, r1
 8000fda:	0099      	lsls	r1, r3, #2
 8000fdc:	440b      	add	r3, r1
 8000fde:	fbb0 f3f3 	udiv	r3, r0, r3
 8000fe2:	3301      	adds	r3, #1
 8000fe4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	bf0c      	ite	eq
 8000fec:	2301      	moveq	r3, #1
 8000fee:	2300      	movne	r3, #0
 8000ff0:	b2db      	uxtb	r3, r3
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <HAL_I2C_Init+0x17e>
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	e022      	b.n	8001040 <HAL_I2C_Init+0x1c4>
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	689b      	ldr	r3, [r3, #8]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d10e      	bne.n	8001020 <HAL_I2C_Init+0x1a4>
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	1e58      	subs	r0, r3, #1
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	6859      	ldr	r1, [r3, #4]
 800100a:	460b      	mov	r3, r1
 800100c:	005b      	lsls	r3, r3, #1
 800100e:	440b      	add	r3, r1
 8001010:	fbb0 f3f3 	udiv	r3, r0, r3
 8001014:	3301      	adds	r3, #1
 8001016:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800101a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800101e:	e00f      	b.n	8001040 <HAL_I2C_Init+0x1c4>
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	1e58      	subs	r0, r3, #1
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	6859      	ldr	r1, [r3, #4]
 8001028:	460b      	mov	r3, r1
 800102a:	009b      	lsls	r3, r3, #2
 800102c:	440b      	add	r3, r1
 800102e:	0099      	lsls	r1, r3, #2
 8001030:	440b      	add	r3, r1
 8001032:	fbb0 f3f3 	udiv	r3, r0, r3
 8001036:	3301      	adds	r3, #1
 8001038:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800103c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001040:	6879      	ldr	r1, [r7, #4]
 8001042:	6809      	ldr	r1, [r1, #0]
 8001044:	4313      	orrs	r3, r2
 8001046:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	69da      	ldr	r2, [r3, #28]
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	6a1b      	ldr	r3, [r3, #32]
 800105a:	431a      	orrs	r2, r3
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	430a      	orrs	r2, r1
 8001062:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	689b      	ldr	r3, [r3, #8]
 800106a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800106e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001072:	687a      	ldr	r2, [r7, #4]
 8001074:	6911      	ldr	r1, [r2, #16]
 8001076:	687a      	ldr	r2, [r7, #4]
 8001078:	68d2      	ldr	r2, [r2, #12]
 800107a:	4311      	orrs	r1, r2
 800107c:	687a      	ldr	r2, [r7, #4]
 800107e:	6812      	ldr	r2, [r2, #0]
 8001080:	430b      	orrs	r3, r1
 8001082:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	68db      	ldr	r3, [r3, #12]
 800108a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	695a      	ldr	r2, [r3, #20]
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	699b      	ldr	r3, [r3, #24]
 8001096:	431a      	orrs	r2, r3
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	430a      	orrs	r2, r1
 800109e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	681a      	ldr	r2, [r3, #0]
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	f042 0201 	orr.w	r2, r2, #1
 80010ae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	2200      	movs	r2, #0
 80010b4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	2220      	movs	r2, #32
 80010ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	2200      	movs	r2, #0
 80010c2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	2200      	movs	r2, #0
 80010c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80010cc:	2300      	movs	r3, #0
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	3710      	adds	r7, #16
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	000186a0 	.word	0x000186a0
 80010dc:	001e847f 	.word	0x001e847f
 80010e0:	003d08ff 	.word	0x003d08ff
 80010e4:	431bde83 	.word	0x431bde83
 80010e8:	10624dd3 	.word	0x10624dd3

080010ec <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b088      	sub	sp, #32
 80010f0:	af02      	add	r7, sp, #8
 80010f2:	60f8      	str	r0, [r7, #12]
 80010f4:	607a      	str	r2, [r7, #4]
 80010f6:	461a      	mov	r2, r3
 80010f8:	460b      	mov	r3, r1
 80010fa:	817b      	strh	r3, [r7, #10]
 80010fc:	4613      	mov	r3, r2
 80010fe:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001100:	f7ff fc5c 	bl	80009bc <HAL_GetTick>
 8001104:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800110c:	b2db      	uxtb	r3, r3
 800110e:	2b20      	cmp	r3, #32
 8001110:	f040 80e0 	bne.w	80012d4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	9300      	str	r3, [sp, #0]
 8001118:	2319      	movs	r3, #25
 800111a:	2201      	movs	r2, #1
 800111c:	4970      	ldr	r1, [pc, #448]	; (80012e0 <HAL_I2C_Master_Transmit+0x1f4>)
 800111e:	68f8      	ldr	r0, [r7, #12]
 8001120:	f000 fdba 	bl	8001c98 <I2C_WaitOnFlagUntilTimeout>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800112a:	2302      	movs	r3, #2
 800112c:	e0d3      	b.n	80012d6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001134:	2b01      	cmp	r3, #1
 8001136:	d101      	bne.n	800113c <HAL_I2C_Master_Transmit+0x50>
 8001138:	2302      	movs	r3, #2
 800113a:	e0cc      	b.n	80012d6 <HAL_I2C_Master_Transmit+0x1ea>
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	2201      	movs	r2, #1
 8001140:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f003 0301 	and.w	r3, r3, #1
 800114e:	2b01      	cmp	r3, #1
 8001150:	d007      	beq.n	8001162 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	681a      	ldr	r2, [r3, #0]
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f042 0201 	orr.w	r2, r2, #1
 8001160:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	681a      	ldr	r2, [r3, #0]
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001170:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	2221      	movs	r2, #33	; 0x21
 8001176:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	2210      	movs	r2, #16
 800117e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	2200      	movs	r2, #0
 8001186:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	687a      	ldr	r2, [r7, #4]
 800118c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	893a      	ldrh	r2, [r7, #8]
 8001192:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001198:	b29a      	uxth	r2, r3
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	4a50      	ldr	r2, [pc, #320]	; (80012e4 <HAL_I2C_Master_Transmit+0x1f8>)
 80011a2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80011a4:	8979      	ldrh	r1, [r7, #10]
 80011a6:	697b      	ldr	r3, [r7, #20]
 80011a8:	6a3a      	ldr	r2, [r7, #32]
 80011aa:	68f8      	ldr	r0, [r7, #12]
 80011ac:	f000 fc24 	bl	80019f8 <I2C_MasterRequestWrite>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d001      	beq.n	80011ba <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80011b6:	2301      	movs	r3, #1
 80011b8:	e08d      	b.n	80012d6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80011ba:	2300      	movs	r3, #0
 80011bc:	613b      	str	r3, [r7, #16]
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	695b      	ldr	r3, [r3, #20]
 80011c4:	613b      	str	r3, [r7, #16]
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	699b      	ldr	r3, [r3, #24]
 80011cc:	613b      	str	r3, [r7, #16]
 80011ce:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80011d0:	e066      	b.n	80012a0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80011d2:	697a      	ldr	r2, [r7, #20]
 80011d4:	6a39      	ldr	r1, [r7, #32]
 80011d6:	68f8      	ldr	r0, [r7, #12]
 80011d8:	f000 fe34 	bl	8001e44 <I2C_WaitOnTXEFlagUntilTimeout>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d00d      	beq.n	80011fe <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e6:	2b04      	cmp	r3, #4
 80011e8:	d107      	bne.n	80011fa <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	681a      	ldr	r2, [r3, #0]
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80011f8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80011fa:	2301      	movs	r3, #1
 80011fc:	e06b      	b.n	80012d6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001202:	781a      	ldrb	r2, [r3, #0]
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800120e:	1c5a      	adds	r2, r3, #1
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001218:	b29b      	uxth	r3, r3
 800121a:	3b01      	subs	r3, #1
 800121c:	b29a      	uxth	r2, r3
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001226:	3b01      	subs	r3, #1
 8001228:	b29a      	uxth	r2, r3
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	695b      	ldr	r3, [r3, #20]
 8001234:	f003 0304 	and.w	r3, r3, #4
 8001238:	2b04      	cmp	r3, #4
 800123a:	d11b      	bne.n	8001274 <HAL_I2C_Master_Transmit+0x188>
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001240:	2b00      	cmp	r3, #0
 8001242:	d017      	beq.n	8001274 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001248:	781a      	ldrb	r2, [r3, #0]
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001254:	1c5a      	adds	r2, r3, #1
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800125e:	b29b      	uxth	r3, r3
 8001260:	3b01      	subs	r3, #1
 8001262:	b29a      	uxth	r2, r3
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800126c:	3b01      	subs	r3, #1
 800126e:	b29a      	uxth	r2, r3
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001274:	697a      	ldr	r2, [r7, #20]
 8001276:	6a39      	ldr	r1, [r7, #32]
 8001278:	68f8      	ldr	r0, [r7, #12]
 800127a:	f000 fe24 	bl	8001ec6 <I2C_WaitOnBTFFlagUntilTimeout>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d00d      	beq.n	80012a0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001288:	2b04      	cmp	r3, #4
 800128a:	d107      	bne.n	800129c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	681a      	ldr	r2, [r3, #0]
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800129a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800129c:	2301      	movs	r3, #1
 800129e:	e01a      	b.n	80012d6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d194      	bne.n	80011d2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	681a      	ldr	r2, [r3, #0]
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80012b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	2220      	movs	r2, #32
 80012bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	2200      	movs	r2, #0
 80012c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	2200      	movs	r2, #0
 80012cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80012d0:	2300      	movs	r3, #0
 80012d2:	e000      	b.n	80012d6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80012d4:	2302      	movs	r3, #2
  }
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	3718      	adds	r7, #24
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	00100002 	.word	0x00100002
 80012e4:	ffff0000 	.word	0xffff0000

080012e8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b08c      	sub	sp, #48	; 0x30
 80012ec:	af02      	add	r7, sp, #8
 80012ee:	60f8      	str	r0, [r7, #12]
 80012f0:	607a      	str	r2, [r7, #4]
 80012f2:	461a      	mov	r2, r3
 80012f4:	460b      	mov	r3, r1
 80012f6:	817b      	strh	r3, [r7, #10]
 80012f8:	4613      	mov	r3, r2
 80012fa:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 80012fc:	2300      	movs	r3, #0
 80012fe:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001300:	f7ff fb5c 	bl	80009bc <HAL_GetTick>
 8001304:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800130c:	b2db      	uxtb	r3, r3
 800130e:	2b20      	cmp	r3, #32
 8001310:	f040 8238 	bne.w	8001784 <HAL_I2C_Master_Receive+0x49c>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001316:	9300      	str	r3, [sp, #0]
 8001318:	2319      	movs	r3, #25
 800131a:	2201      	movs	r2, #1
 800131c:	497e      	ldr	r1, [pc, #504]	; (8001518 <HAL_I2C_Master_Receive+0x230>)
 800131e:	68f8      	ldr	r0, [r7, #12]
 8001320:	f000 fcba 	bl	8001c98 <I2C_WaitOnFlagUntilTimeout>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d001      	beq.n	800132e <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 800132a:	2302      	movs	r3, #2
 800132c:	e22b      	b.n	8001786 <HAL_I2C_Master_Receive+0x49e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001334:	2b01      	cmp	r3, #1
 8001336:	d101      	bne.n	800133c <HAL_I2C_Master_Receive+0x54>
 8001338:	2302      	movs	r3, #2
 800133a:	e224      	b.n	8001786 <HAL_I2C_Master_Receive+0x49e>
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	2201      	movs	r2, #1
 8001340:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f003 0301 	and.w	r3, r3, #1
 800134e:	2b01      	cmp	r3, #1
 8001350:	d007      	beq.n	8001362 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	681a      	ldr	r2, [r3, #0]
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f042 0201 	orr.w	r2, r2, #1
 8001360:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	681a      	ldr	r2, [r3, #0]
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001370:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	2222      	movs	r2, #34	; 0x22
 8001376:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	2210      	movs	r2, #16
 800137e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	2200      	movs	r2, #0
 8001386:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	687a      	ldr	r2, [r7, #4]
 800138c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	893a      	ldrh	r2, [r7, #8]
 8001392:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001398:	b29a      	uxth	r2, r3
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	4a5e      	ldr	r2, [pc, #376]	; (800151c <HAL_I2C_Master_Receive+0x234>)
 80013a2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80013a4:	8979      	ldrh	r1, [r7, #10]
 80013a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80013aa:	68f8      	ldr	r0, [r7, #12]
 80013ac:	f000 fba6 	bl	8001afc <I2C_MasterRequestRead>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d001      	beq.n	80013ba <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 80013b6:	2301      	movs	r3, #1
 80013b8:	e1e5      	b.n	8001786 <HAL_I2C_Master_Receive+0x49e>
    }

    if (hi2c->XferSize == 0U)
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d113      	bne.n	80013ea <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80013c2:	2300      	movs	r3, #0
 80013c4:	61fb      	str	r3, [r7, #28]
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	695b      	ldr	r3, [r3, #20]
 80013cc:	61fb      	str	r3, [r7, #28]
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	699b      	ldr	r3, [r3, #24]
 80013d4:	61fb      	str	r3, [r7, #28]
 80013d6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	681a      	ldr	r2, [r3, #0]
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80013e6:	601a      	str	r2, [r3, #0]
 80013e8:	e1b9      	b.n	800175e <HAL_I2C_Master_Receive+0x476>
    }
    else if (hi2c->XferSize == 1U)
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013ee:	2b01      	cmp	r3, #1
 80013f0:	d11d      	bne.n	800142e <HAL_I2C_Master_Receive+0x146>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	681a      	ldr	r2, [r3, #0]
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001400:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001402:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001404:	2300      	movs	r3, #0
 8001406:	61bb      	str	r3, [r7, #24]
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	695b      	ldr	r3, [r3, #20]
 800140e:	61bb      	str	r3, [r7, #24]
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	699b      	ldr	r3, [r3, #24]
 8001416:	61bb      	str	r3, [r7, #24]
 8001418:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	681a      	ldr	r2, [r3, #0]
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001428:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800142a:	b662      	cpsie	i
 800142c:	e197      	b.n	800175e <HAL_I2C_Master_Receive+0x476>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001432:	2b02      	cmp	r3, #2
 8001434:	d11d      	bne.n	8001472 <HAL_I2C_Master_Receive+0x18a>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	681a      	ldr	r2, [r3, #0]
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001444:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001446:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001448:	2300      	movs	r3, #0
 800144a:	617b      	str	r3, [r7, #20]
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	695b      	ldr	r3, [r3, #20]
 8001452:	617b      	str	r3, [r7, #20]
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	699b      	ldr	r3, [r3, #24]
 800145a:	617b      	str	r3, [r7, #20]
 800145c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	681a      	ldr	r2, [r3, #0]
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800146c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800146e:	b662      	cpsie	i
 8001470:	e175      	b.n	800175e <HAL_I2C_Master_Receive+0x476>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	681a      	ldr	r2, [r3, #0]
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001480:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001482:	2300      	movs	r3, #0
 8001484:	613b      	str	r3, [r7, #16]
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	695b      	ldr	r3, [r3, #20]
 800148c:	613b      	str	r3, [r7, #16]
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	699b      	ldr	r3, [r3, #24]
 8001494:	613b      	str	r3, [r7, #16]
 8001496:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8001498:	e161      	b.n	800175e <HAL_I2C_Master_Receive+0x476>
    {
      if (hi2c->XferSize <= 3U)
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800149e:	2b03      	cmp	r3, #3
 80014a0:	f200 811a 	bhi.w	80016d8 <HAL_I2C_Master_Receive+0x3f0>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014a8:	2b01      	cmp	r3, #1
 80014aa:	d123      	bne.n	80014f4 <HAL_I2C_Master_Receive+0x20c>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80014ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014ae:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80014b0:	68f8      	ldr	r0, [r7, #12]
 80014b2:	f000 fd49 	bl	8001f48 <I2C_WaitOnRXNEFlagUntilTimeout>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d001      	beq.n	80014c0 <HAL_I2C_Master_Receive+0x1d8>
          {
            return HAL_ERROR;
 80014bc:	2301      	movs	r3, #1
 80014be:	e162      	b.n	8001786 <HAL_I2C_Master_Receive+0x49e>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	691a      	ldr	r2, [r3, #16]
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014ca:	b2d2      	uxtb	r2, r2
 80014cc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014d2:	1c5a      	adds	r2, r3, #1
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014dc:	3b01      	subs	r3, #1
 80014de:	b29a      	uxth	r2, r3
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014e8:	b29b      	uxth	r3, r3
 80014ea:	3b01      	subs	r3, #1
 80014ec:	b29a      	uxth	r2, r3
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80014f2:	e134      	b.n	800175e <HAL_I2C_Master_Receive+0x476>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014f8:	2b02      	cmp	r3, #2
 80014fa:	d150      	bne.n	800159e <HAL_I2C_Master_Receive+0x2b6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80014fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014fe:	9300      	str	r3, [sp, #0]
 8001500:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001502:	2200      	movs	r2, #0
 8001504:	4906      	ldr	r1, [pc, #24]	; (8001520 <HAL_I2C_Master_Receive+0x238>)
 8001506:	68f8      	ldr	r0, [r7, #12]
 8001508:	f000 fbc6 	bl	8001c98 <I2C_WaitOnFlagUntilTimeout>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d008      	beq.n	8001524 <HAL_I2C_Master_Receive+0x23c>
          {
            return HAL_ERROR;
 8001512:	2301      	movs	r3, #1
 8001514:	e137      	b.n	8001786 <HAL_I2C_Master_Receive+0x49e>
 8001516:	bf00      	nop
 8001518:	00100002 	.word	0x00100002
 800151c:	ffff0000 	.word	0xffff0000
 8001520:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8001524:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	681a      	ldr	r2, [r3, #0]
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001534:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	691a      	ldr	r2, [r3, #16]
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001540:	b2d2      	uxtb	r2, r2
 8001542:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001548:	1c5a      	adds	r2, r3, #1
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001552:	3b01      	subs	r3, #1
 8001554:	b29a      	uxth	r2, r3
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800155e:	b29b      	uxth	r3, r3
 8001560:	3b01      	subs	r3, #1
 8001562:	b29a      	uxth	r2, r3
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001568:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	691a      	ldr	r2, [r3, #16]
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001574:	b2d2      	uxtb	r2, r2
 8001576:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800157c:	1c5a      	adds	r2, r3, #1
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001586:	3b01      	subs	r3, #1
 8001588:	b29a      	uxth	r2, r3
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001592:	b29b      	uxth	r3, r3
 8001594:	3b01      	subs	r3, #1
 8001596:	b29a      	uxth	r2, r3
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800159c:	e0df      	b.n	800175e <HAL_I2C_Master_Receive+0x476>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800159e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015a0:	9300      	str	r3, [sp, #0]
 80015a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015a4:	2200      	movs	r2, #0
 80015a6:	497a      	ldr	r1, [pc, #488]	; (8001790 <HAL_I2C_Master_Receive+0x4a8>)
 80015a8:	68f8      	ldr	r0, [r7, #12]
 80015aa:	f000 fb75 	bl	8001c98 <I2C_WaitOnFlagUntilTimeout>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d001      	beq.n	80015b8 <HAL_I2C_Master_Receive+0x2d0>
          {
            return HAL_ERROR;
 80015b4:	2301      	movs	r3, #1
 80015b6:	e0e6      	b.n	8001786 <HAL_I2C_Master_Receive+0x49e>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	681a      	ldr	r2, [r3, #0]
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80015c6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80015c8:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	691a      	ldr	r2, [r3, #16]
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015d4:	b2d2      	uxtb	r2, r2
 80015d6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015dc:	1c5a      	adds	r2, r3, #1
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015e6:	3b01      	subs	r3, #1
 80015e8:	b29a      	uxth	r2, r3
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015f2:	b29b      	uxth	r3, r3
 80015f4:	3b01      	subs	r3, #1
 80015f6:	b29a      	uxth	r2, r3
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80015fc:	4b65      	ldr	r3, [pc, #404]	; (8001794 <HAL_I2C_Master_Receive+0x4ac>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	08db      	lsrs	r3, r3, #3
 8001602:	4a65      	ldr	r2, [pc, #404]	; (8001798 <HAL_I2C_Master_Receive+0x4b0>)
 8001604:	fba2 2303 	umull	r2, r3, r2, r3
 8001608:	0a1a      	lsrs	r2, r3, #8
 800160a:	4613      	mov	r3, r2
 800160c:	009b      	lsls	r3, r3, #2
 800160e:	4413      	add	r3, r2
 8001610:	00da      	lsls	r2, r3, #3
 8001612:	1ad3      	subs	r3, r2, r3
 8001614:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8001616:	6a3b      	ldr	r3, [r7, #32]
 8001618:	3b01      	subs	r3, #1
 800161a:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800161c:	6a3b      	ldr	r3, [r7, #32]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d117      	bne.n	8001652 <HAL_I2C_Master_Receive+0x36a>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	2200      	movs	r2, #0
 8001626:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	2220      	movs	r2, #32
 800162c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	2200      	movs	r2, #0
 8001634:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800163c:	f043 0220 	orr.w	r2, r3, #32
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8001644:	b662      	cpsie	i

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	2200      	movs	r2, #0
 800164a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800164e:	2301      	movs	r3, #1
 8001650:	e099      	b.n	8001786 <HAL_I2C_Master_Receive+0x49e>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	695b      	ldr	r3, [r3, #20]
 8001658:	f003 0304 	and.w	r3, r3, #4
 800165c:	2b04      	cmp	r3, #4
 800165e:	d1da      	bne.n	8001616 <HAL_I2C_Master_Receive+0x32e>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	681a      	ldr	r2, [r3, #0]
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800166e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	691a      	ldr	r2, [r3, #16]
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800167a:	b2d2      	uxtb	r2, r2
 800167c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001682:	1c5a      	adds	r2, r3, #1
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800168c:	3b01      	subs	r3, #1
 800168e:	b29a      	uxth	r2, r3
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001698:	b29b      	uxth	r3, r3
 800169a:	3b01      	subs	r3, #1
 800169c:	b29a      	uxth	r2, r3
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80016a2:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	691a      	ldr	r2, [r3, #16]
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ae:	b2d2      	uxtb	r2, r2
 80016b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016b6:	1c5a      	adds	r2, r3, #1
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016c0:	3b01      	subs	r3, #1
 80016c2:	b29a      	uxth	r2, r3
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016cc:	b29b      	uxth	r3, r3
 80016ce:	3b01      	subs	r3, #1
 80016d0:	b29a      	uxth	r2, r3
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80016d6:	e042      	b.n	800175e <HAL_I2C_Master_Receive+0x476>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80016d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016da:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80016dc:	68f8      	ldr	r0, [r7, #12]
 80016de:	f000 fc33 	bl	8001f48 <I2C_WaitOnRXNEFlagUntilTimeout>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d001      	beq.n	80016ec <HAL_I2C_Master_Receive+0x404>
        {
          return HAL_ERROR;
 80016e8:	2301      	movs	r3, #1
 80016ea:	e04c      	b.n	8001786 <HAL_I2C_Master_Receive+0x49e>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	691a      	ldr	r2, [r3, #16]
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016f6:	b2d2      	uxtb	r2, r2
 80016f8:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016fe:	1c5a      	adds	r2, r3, #1
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001708:	3b01      	subs	r3, #1
 800170a:	b29a      	uxth	r2, r3
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001714:	b29b      	uxth	r3, r3
 8001716:	3b01      	subs	r3, #1
 8001718:	b29a      	uxth	r2, r3
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	695b      	ldr	r3, [r3, #20]
 8001724:	f003 0304 	and.w	r3, r3, #4
 8001728:	2b04      	cmp	r3, #4
 800172a:	d118      	bne.n	800175e <HAL_I2C_Master_Receive+0x476>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	691a      	ldr	r2, [r3, #16]
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001736:	b2d2      	uxtb	r2, r2
 8001738:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800173e:	1c5a      	adds	r2, r3, #1
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001748:	3b01      	subs	r3, #1
 800174a:	b29a      	uxth	r2, r3
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001754:	b29b      	uxth	r3, r3
 8001756:	3b01      	subs	r3, #1
 8001758:	b29a      	uxth	r2, r3
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001762:	2b00      	cmp	r3, #0
 8001764:	f47f ae99 	bne.w	800149a <HAL_I2C_Master_Receive+0x1b2>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	2220      	movs	r2, #32
 800176c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	2200      	movs	r2, #0
 8001774:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	2200      	movs	r2, #0
 800177c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001780:	2300      	movs	r3, #0
 8001782:	e000      	b.n	8001786 <HAL_I2C_Master_Receive+0x49e>
  }
  else
  {
    return HAL_BUSY;
 8001784:	2302      	movs	r3, #2
  }
}
 8001786:	4618      	mov	r0, r3
 8001788:	3728      	adds	r7, #40	; 0x28
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	00010004 	.word	0x00010004
 8001794:	20000000 	.word	0x20000000
 8001798:	14f8b589 	.word	0x14f8b589

0800179c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b08a      	sub	sp, #40	; 0x28
 80017a0:	af02      	add	r7, sp, #8
 80017a2:	60f8      	str	r0, [r7, #12]
 80017a4:	607a      	str	r2, [r7, #4]
 80017a6:	603b      	str	r3, [r7, #0]
 80017a8:	460b      	mov	r3, r1
 80017aa:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80017ac:	f7ff f906 	bl	80009bc <HAL_GetTick>
 80017b0:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 80017b2:	2301      	movs	r3, #1
 80017b4:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80017bc:	b2db      	uxtb	r3, r3
 80017be:	2b20      	cmp	r3, #32
 80017c0:	f040 8111 	bne.w	80019e6 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80017c4:	69fb      	ldr	r3, [r7, #28]
 80017c6:	9300      	str	r3, [sp, #0]
 80017c8:	2319      	movs	r3, #25
 80017ca:	2201      	movs	r2, #1
 80017cc:	4988      	ldr	r1, [pc, #544]	; (80019f0 <HAL_I2C_IsDeviceReady+0x254>)
 80017ce:	68f8      	ldr	r0, [r7, #12]
 80017d0:	f000 fa62 	bl	8001c98 <I2C_WaitOnFlagUntilTimeout>
 80017d4:	4603      	mov	r3, r0
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d001      	beq.n	80017de <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80017da:	2302      	movs	r3, #2
 80017dc:	e104      	b.n	80019e8 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80017e4:	2b01      	cmp	r3, #1
 80017e6:	d101      	bne.n	80017ec <HAL_I2C_IsDeviceReady+0x50>
 80017e8:	2302      	movs	r3, #2
 80017ea:	e0fd      	b.n	80019e8 <HAL_I2C_IsDeviceReady+0x24c>
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	2201      	movs	r2, #1
 80017f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f003 0301 	and.w	r3, r3, #1
 80017fe:	2b01      	cmp	r3, #1
 8001800:	d007      	beq.n	8001812 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	681a      	ldr	r2, [r3, #0]
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f042 0201 	orr.w	r2, r2, #1
 8001810:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	681a      	ldr	r2, [r3, #0]
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001820:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	2224      	movs	r2, #36	; 0x24
 8001826:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	2200      	movs	r2, #0
 800182e:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	4a70      	ldr	r2, [pc, #448]	; (80019f4 <HAL_I2C_IsDeviceReady+0x258>)
 8001834:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	681a      	ldr	r2, [r3, #0]
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001844:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8001846:	69fb      	ldr	r3, [r7, #28]
 8001848:	9300      	str	r3, [sp, #0]
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	2200      	movs	r2, #0
 800184e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001852:	68f8      	ldr	r0, [r7, #12]
 8001854:	f000 fa20 	bl	8001c98 <I2C_WaitOnFlagUntilTimeout>
 8001858:	4603      	mov	r3, r0
 800185a:	2b00      	cmp	r3, #0
 800185c:	d00d      	beq.n	800187a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001868:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800186c:	d103      	bne.n	8001876 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001874:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8001876:	2303      	movs	r3, #3
 8001878:	e0b6      	b.n	80019e8 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800187a:	897b      	ldrh	r3, [r7, #10]
 800187c:	b2db      	uxtb	r3, r3
 800187e:	461a      	mov	r2, r3
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001888:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800188a:	f7ff f897 	bl	80009bc <HAL_GetTick>
 800188e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	695b      	ldr	r3, [r3, #20]
 8001896:	f003 0302 	and.w	r3, r3, #2
 800189a:	2b02      	cmp	r3, #2
 800189c:	bf0c      	ite	eq
 800189e:	2301      	moveq	r3, #1
 80018a0:	2300      	movne	r3, #0
 80018a2:	b2db      	uxtb	r3, r3
 80018a4:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	695b      	ldr	r3, [r3, #20]
 80018ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018b4:	bf0c      	ite	eq
 80018b6:	2301      	moveq	r3, #1
 80018b8:	2300      	movne	r3, #0
 80018ba:	b2db      	uxtb	r3, r3
 80018bc:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80018be:	e025      	b.n	800190c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80018c0:	f7ff f87c 	bl	80009bc <HAL_GetTick>
 80018c4:	4602      	mov	r2, r0
 80018c6:	69fb      	ldr	r3, [r7, #28]
 80018c8:	1ad3      	subs	r3, r2, r3
 80018ca:	683a      	ldr	r2, [r7, #0]
 80018cc:	429a      	cmp	r2, r3
 80018ce:	d302      	bcc.n	80018d6 <HAL_I2C_IsDeviceReady+0x13a>
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d103      	bne.n	80018de <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	22a0      	movs	r2, #160	; 0xa0
 80018da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	695b      	ldr	r3, [r3, #20]
 80018e4:	f003 0302 	and.w	r3, r3, #2
 80018e8:	2b02      	cmp	r3, #2
 80018ea:	bf0c      	ite	eq
 80018ec:	2301      	moveq	r3, #1
 80018ee:	2300      	movne	r3, #0
 80018f0:	b2db      	uxtb	r3, r3
 80018f2:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	695b      	ldr	r3, [r3, #20]
 80018fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001902:	bf0c      	ite	eq
 8001904:	2301      	moveq	r3, #1
 8001906:	2300      	movne	r3, #0
 8001908:	b2db      	uxtb	r3, r3
 800190a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001912:	b2db      	uxtb	r3, r3
 8001914:	2ba0      	cmp	r3, #160	; 0xa0
 8001916:	d005      	beq.n	8001924 <HAL_I2C_IsDeviceReady+0x188>
 8001918:	7dfb      	ldrb	r3, [r7, #23]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d102      	bne.n	8001924 <HAL_I2C_IsDeviceReady+0x188>
 800191e:	7dbb      	ldrb	r3, [r7, #22]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d0cd      	beq.n	80018c0 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	2220      	movs	r2, #32
 8001928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	695b      	ldr	r3, [r3, #20]
 8001932:	f003 0302 	and.w	r3, r3, #2
 8001936:	2b02      	cmp	r3, #2
 8001938:	d129      	bne.n	800198e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	681a      	ldr	r2, [r3, #0]
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001948:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800194a:	2300      	movs	r3, #0
 800194c:	613b      	str	r3, [r7, #16]
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	695b      	ldr	r3, [r3, #20]
 8001954:	613b      	str	r3, [r7, #16]
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	699b      	ldr	r3, [r3, #24]
 800195c:	613b      	str	r3, [r7, #16]
 800195e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001960:	69fb      	ldr	r3, [r7, #28]
 8001962:	9300      	str	r3, [sp, #0]
 8001964:	2319      	movs	r3, #25
 8001966:	2201      	movs	r2, #1
 8001968:	4921      	ldr	r1, [pc, #132]	; (80019f0 <HAL_I2C_IsDeviceReady+0x254>)
 800196a:	68f8      	ldr	r0, [r7, #12]
 800196c:	f000 f994 	bl	8001c98 <I2C_WaitOnFlagUntilTimeout>
 8001970:	4603      	mov	r3, r0
 8001972:	2b00      	cmp	r3, #0
 8001974:	d001      	beq.n	800197a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8001976:	2301      	movs	r3, #1
 8001978:	e036      	b.n	80019e8 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	2220      	movs	r2, #32
 800197e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	2200      	movs	r2, #0
 8001986:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800198a:	2300      	movs	r3, #0
 800198c:	e02c      	b.n	80019e8 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	681a      	ldr	r2, [r3, #0]
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800199c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80019a6:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80019a8:	69fb      	ldr	r3, [r7, #28]
 80019aa:	9300      	str	r3, [sp, #0]
 80019ac:	2319      	movs	r3, #25
 80019ae:	2201      	movs	r2, #1
 80019b0:	490f      	ldr	r1, [pc, #60]	; (80019f0 <HAL_I2C_IsDeviceReady+0x254>)
 80019b2:	68f8      	ldr	r0, [r7, #12]
 80019b4:	f000 f970 	bl	8001c98 <I2C_WaitOnFlagUntilTimeout>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d001      	beq.n	80019c2 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80019be:	2301      	movs	r3, #1
 80019c0:	e012      	b.n	80019e8 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80019c2:	69bb      	ldr	r3, [r7, #24]
 80019c4:	3301      	adds	r3, #1
 80019c6:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80019c8:	69ba      	ldr	r2, [r7, #24]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	429a      	cmp	r2, r3
 80019ce:	f4ff af32 	bcc.w	8001836 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	2220      	movs	r2, #32
 80019d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	2200      	movs	r2, #0
 80019de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80019e2:	2301      	movs	r3, #1
 80019e4:	e000      	b.n	80019e8 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80019e6:	2302      	movs	r3, #2
  }
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	3720      	adds	r7, #32
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	00100002 	.word	0x00100002
 80019f4:	ffff0000 	.word	0xffff0000

080019f8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b088      	sub	sp, #32
 80019fc:	af02      	add	r7, sp, #8
 80019fe:	60f8      	str	r0, [r7, #12]
 8001a00:	607a      	str	r2, [r7, #4]
 8001a02:	603b      	str	r3, [r7, #0]
 8001a04:	460b      	mov	r3, r1
 8001a06:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a0c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001a0e:	697b      	ldr	r3, [r7, #20]
 8001a10:	2b08      	cmp	r3, #8
 8001a12:	d006      	beq.n	8001a22 <I2C_MasterRequestWrite+0x2a>
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	2b01      	cmp	r3, #1
 8001a18:	d003      	beq.n	8001a22 <I2C_MasterRequestWrite+0x2a>
 8001a1a:	697b      	ldr	r3, [r7, #20]
 8001a1c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001a20:	d108      	bne.n	8001a34 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	681a      	ldr	r2, [r3, #0]
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001a30:	601a      	str	r2, [r3, #0]
 8001a32:	e00b      	b.n	8001a4c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a38:	2b12      	cmp	r3, #18
 8001a3a:	d107      	bne.n	8001a4c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	681a      	ldr	r2, [r3, #0]
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001a4a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	9300      	str	r3, [sp, #0]
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2200      	movs	r2, #0
 8001a54:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001a58:	68f8      	ldr	r0, [r7, #12]
 8001a5a:	f000 f91d 	bl	8001c98 <I2C_WaitOnFlagUntilTimeout>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d00d      	beq.n	8001a80 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001a72:	d103      	bne.n	8001a7c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a7a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001a7c:	2303      	movs	r3, #3
 8001a7e:	e035      	b.n	8001aec <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	691b      	ldr	r3, [r3, #16]
 8001a84:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001a88:	d108      	bne.n	8001a9c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001a8a:	897b      	ldrh	r3, [r7, #10]
 8001a8c:	b2db      	uxtb	r3, r3
 8001a8e:	461a      	mov	r2, r3
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001a98:	611a      	str	r2, [r3, #16]
 8001a9a:	e01b      	b.n	8001ad4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001a9c:	897b      	ldrh	r3, [r7, #10]
 8001a9e:	11db      	asrs	r3, r3, #7
 8001aa0:	b2db      	uxtb	r3, r3
 8001aa2:	f003 0306 	and.w	r3, r3, #6
 8001aa6:	b2db      	uxtb	r3, r3
 8001aa8:	f063 030f 	orn	r3, r3, #15
 8001aac:	b2da      	uxtb	r2, r3
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	687a      	ldr	r2, [r7, #4]
 8001ab8:	490e      	ldr	r1, [pc, #56]	; (8001af4 <I2C_MasterRequestWrite+0xfc>)
 8001aba:	68f8      	ldr	r0, [r7, #12]
 8001abc:	f000 f943 	bl	8001d46 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d001      	beq.n	8001aca <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	e010      	b.n	8001aec <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001aca:	897b      	ldrh	r3, [r7, #10]
 8001acc:	b2da      	uxtb	r2, r3
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	687a      	ldr	r2, [r7, #4]
 8001ad8:	4907      	ldr	r1, [pc, #28]	; (8001af8 <I2C_MasterRequestWrite+0x100>)
 8001ada:	68f8      	ldr	r0, [r7, #12]
 8001adc:	f000 f933 	bl	8001d46 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d001      	beq.n	8001aea <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	e000      	b.n	8001aec <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001aea:	2300      	movs	r3, #0
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	3718      	adds	r7, #24
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	00010008 	.word	0x00010008
 8001af8:	00010002 	.word	0x00010002

08001afc <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b088      	sub	sp, #32
 8001b00:	af02      	add	r7, sp, #8
 8001b02:	60f8      	str	r0, [r7, #12]
 8001b04:	607a      	str	r2, [r7, #4]
 8001b06:	603b      	str	r3, [r7, #0]
 8001b08:	460b      	mov	r3, r1
 8001b0a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b10:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	681a      	ldr	r2, [r3, #0]
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001b20:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001b22:	697b      	ldr	r3, [r7, #20]
 8001b24:	2b08      	cmp	r3, #8
 8001b26:	d006      	beq.n	8001b36 <I2C_MasterRequestRead+0x3a>
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	2b01      	cmp	r3, #1
 8001b2c:	d003      	beq.n	8001b36 <I2C_MasterRequestRead+0x3a>
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001b34:	d108      	bne.n	8001b48 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	681a      	ldr	r2, [r3, #0]
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001b44:	601a      	str	r2, [r3, #0]
 8001b46:	e00b      	b.n	8001b60 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b4c:	2b11      	cmp	r3, #17
 8001b4e:	d107      	bne.n	8001b60 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	681a      	ldr	r2, [r3, #0]
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001b5e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	9300      	str	r3, [sp, #0]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2200      	movs	r2, #0
 8001b68:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001b6c:	68f8      	ldr	r0, [r7, #12]
 8001b6e:	f000 f893 	bl	8001c98 <I2C_WaitOnFlagUntilTimeout>
 8001b72:	4603      	mov	r3, r0
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d00d      	beq.n	8001b94 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001b86:	d103      	bne.n	8001b90 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b8e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001b90:	2303      	movs	r3, #3
 8001b92:	e079      	b.n	8001c88 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	691b      	ldr	r3, [r3, #16]
 8001b98:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001b9c:	d108      	bne.n	8001bb0 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001b9e:	897b      	ldrh	r3, [r7, #10]
 8001ba0:	b2db      	uxtb	r3, r3
 8001ba2:	f043 0301 	orr.w	r3, r3, #1
 8001ba6:	b2da      	uxtb	r2, r3
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	611a      	str	r2, [r3, #16]
 8001bae:	e05f      	b.n	8001c70 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001bb0:	897b      	ldrh	r3, [r7, #10]
 8001bb2:	11db      	asrs	r3, r3, #7
 8001bb4:	b2db      	uxtb	r3, r3
 8001bb6:	f003 0306 	and.w	r3, r3, #6
 8001bba:	b2db      	uxtb	r3, r3
 8001bbc:	f063 030f 	orn	r3, r3, #15
 8001bc0:	b2da      	uxtb	r2, r3
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	687a      	ldr	r2, [r7, #4]
 8001bcc:	4930      	ldr	r1, [pc, #192]	; (8001c90 <I2C_MasterRequestRead+0x194>)
 8001bce:	68f8      	ldr	r0, [r7, #12]
 8001bd0:	f000 f8b9 	bl	8001d46 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d001      	beq.n	8001bde <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e054      	b.n	8001c88 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001bde:	897b      	ldrh	r3, [r7, #10]
 8001be0:	b2da      	uxtb	r2, r3
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	687a      	ldr	r2, [r7, #4]
 8001bec:	4929      	ldr	r1, [pc, #164]	; (8001c94 <I2C_MasterRequestRead+0x198>)
 8001bee:	68f8      	ldr	r0, [r7, #12]
 8001bf0:	f000 f8a9 	bl	8001d46 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d001      	beq.n	8001bfe <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	e044      	b.n	8001c88 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001bfe:	2300      	movs	r3, #0
 8001c00:	613b      	str	r3, [r7, #16]
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	695b      	ldr	r3, [r3, #20]
 8001c08:	613b      	str	r3, [r7, #16]
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	699b      	ldr	r3, [r3, #24]
 8001c10:	613b      	str	r3, [r7, #16]
 8001c12:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	681a      	ldr	r2, [r3, #0]
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001c22:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	9300      	str	r3, [sp, #0]
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001c30:	68f8      	ldr	r0, [r7, #12]
 8001c32:	f000 f831 	bl	8001c98 <I2C_WaitOnFlagUntilTimeout>
 8001c36:	4603      	mov	r3, r0
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d00d      	beq.n	8001c58 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001c4a:	d103      	bne.n	8001c54 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c52:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8001c54:	2303      	movs	r3, #3
 8001c56:	e017      	b.n	8001c88 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8001c58:	897b      	ldrh	r3, [r7, #10]
 8001c5a:	11db      	asrs	r3, r3, #7
 8001c5c:	b2db      	uxtb	r3, r3
 8001c5e:	f003 0306 	and.w	r3, r3, #6
 8001c62:	b2db      	uxtb	r3, r3
 8001c64:	f063 030e 	orn	r3, r3, #14
 8001c68:	b2da      	uxtb	r2, r3
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	687a      	ldr	r2, [r7, #4]
 8001c74:	4907      	ldr	r1, [pc, #28]	; (8001c94 <I2C_MasterRequestRead+0x198>)
 8001c76:	68f8      	ldr	r0, [r7, #12]
 8001c78:	f000 f865 	bl	8001d46 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d001      	beq.n	8001c86 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8001c82:	2301      	movs	r3, #1
 8001c84:	e000      	b.n	8001c88 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8001c86:	2300      	movs	r3, #0
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	3718      	adds	r7, #24
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}
 8001c90:	00010008 	.word	0x00010008
 8001c94:	00010002 	.word	0x00010002

08001c98 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b084      	sub	sp, #16
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	60f8      	str	r0, [r7, #12]
 8001ca0:	60b9      	str	r1, [r7, #8]
 8001ca2:	603b      	str	r3, [r7, #0]
 8001ca4:	4613      	mov	r3, r2
 8001ca6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001ca8:	e025      	b.n	8001cf6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cb0:	d021      	beq.n	8001cf6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001cb2:	f7fe fe83 	bl	80009bc <HAL_GetTick>
 8001cb6:	4602      	mov	r2, r0
 8001cb8:	69bb      	ldr	r3, [r7, #24]
 8001cba:	1ad3      	subs	r3, r2, r3
 8001cbc:	683a      	ldr	r2, [r7, #0]
 8001cbe:	429a      	cmp	r2, r3
 8001cc0:	d302      	bcc.n	8001cc8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d116      	bne.n	8001cf6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	2200      	movs	r2, #0
 8001ccc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	2220      	movs	r2, #32
 8001cd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	2200      	movs	r2, #0
 8001cda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce2:	f043 0220 	orr.w	r2, r3, #32
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	2200      	movs	r2, #0
 8001cee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e023      	b.n	8001d3e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001cf6:	68bb      	ldr	r3, [r7, #8]
 8001cf8:	0c1b      	lsrs	r3, r3, #16
 8001cfa:	b2db      	uxtb	r3, r3
 8001cfc:	2b01      	cmp	r3, #1
 8001cfe:	d10d      	bne.n	8001d1c <I2C_WaitOnFlagUntilTimeout+0x84>
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	695b      	ldr	r3, [r3, #20]
 8001d06:	43da      	mvns	r2, r3
 8001d08:	68bb      	ldr	r3, [r7, #8]
 8001d0a:	4013      	ands	r3, r2
 8001d0c:	b29b      	uxth	r3, r3
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	bf0c      	ite	eq
 8001d12:	2301      	moveq	r3, #1
 8001d14:	2300      	movne	r3, #0
 8001d16:	b2db      	uxtb	r3, r3
 8001d18:	461a      	mov	r2, r3
 8001d1a:	e00c      	b.n	8001d36 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	699b      	ldr	r3, [r3, #24]
 8001d22:	43da      	mvns	r2, r3
 8001d24:	68bb      	ldr	r3, [r7, #8]
 8001d26:	4013      	ands	r3, r2
 8001d28:	b29b      	uxth	r3, r3
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	bf0c      	ite	eq
 8001d2e:	2301      	moveq	r3, #1
 8001d30:	2300      	movne	r3, #0
 8001d32:	b2db      	uxtb	r3, r3
 8001d34:	461a      	mov	r2, r3
 8001d36:	79fb      	ldrb	r3, [r7, #7]
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	d0b6      	beq.n	8001caa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001d3c:	2300      	movs	r3, #0
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	3710      	adds	r7, #16
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}

08001d46 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001d46:	b580      	push	{r7, lr}
 8001d48:	b084      	sub	sp, #16
 8001d4a:	af00      	add	r7, sp, #0
 8001d4c:	60f8      	str	r0, [r7, #12]
 8001d4e:	60b9      	str	r1, [r7, #8]
 8001d50:	607a      	str	r2, [r7, #4]
 8001d52:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001d54:	e051      	b.n	8001dfa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	695b      	ldr	r3, [r3, #20]
 8001d5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d64:	d123      	bne.n	8001dae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	681a      	ldr	r2, [r3, #0]
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d74:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001d7e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	2200      	movs	r2, #0
 8001d84:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	2220      	movs	r2, #32
 8001d8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	2200      	movs	r2, #0
 8001d92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d9a:	f043 0204 	orr.w	r2, r3, #4
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	2200      	movs	r2, #0
 8001da6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001daa:	2301      	movs	r3, #1
 8001dac:	e046      	b.n	8001e3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001db4:	d021      	beq.n	8001dfa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001db6:	f7fe fe01 	bl	80009bc <HAL_GetTick>
 8001dba:	4602      	mov	r2, r0
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	1ad3      	subs	r3, r2, r3
 8001dc0:	687a      	ldr	r2, [r7, #4]
 8001dc2:	429a      	cmp	r2, r3
 8001dc4:	d302      	bcc.n	8001dcc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d116      	bne.n	8001dfa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	2200      	movs	r2, #0
 8001dd0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	2220      	movs	r2, #32
 8001dd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	2200      	movs	r2, #0
 8001dde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de6:	f043 0220 	orr.w	r2, r3, #32
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	2200      	movs	r2, #0
 8001df2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001df6:	2301      	movs	r3, #1
 8001df8:	e020      	b.n	8001e3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001dfa:	68bb      	ldr	r3, [r7, #8]
 8001dfc:	0c1b      	lsrs	r3, r3, #16
 8001dfe:	b2db      	uxtb	r3, r3
 8001e00:	2b01      	cmp	r3, #1
 8001e02:	d10c      	bne.n	8001e1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	695b      	ldr	r3, [r3, #20]
 8001e0a:	43da      	mvns	r2, r3
 8001e0c:	68bb      	ldr	r3, [r7, #8]
 8001e0e:	4013      	ands	r3, r2
 8001e10:	b29b      	uxth	r3, r3
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	bf14      	ite	ne
 8001e16:	2301      	movne	r3, #1
 8001e18:	2300      	moveq	r3, #0
 8001e1a:	b2db      	uxtb	r3, r3
 8001e1c:	e00b      	b.n	8001e36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	699b      	ldr	r3, [r3, #24]
 8001e24:	43da      	mvns	r2, r3
 8001e26:	68bb      	ldr	r3, [r7, #8]
 8001e28:	4013      	ands	r3, r2
 8001e2a:	b29b      	uxth	r3, r3
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	bf14      	ite	ne
 8001e30:	2301      	movne	r3, #1
 8001e32:	2300      	moveq	r3, #0
 8001e34:	b2db      	uxtb	r3, r3
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d18d      	bne.n	8001d56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8001e3a:	2300      	movs	r3, #0
}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	3710      	adds	r7, #16
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd80      	pop	{r7, pc}

08001e44 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b084      	sub	sp, #16
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	60f8      	str	r0, [r7, #12]
 8001e4c:	60b9      	str	r1, [r7, #8]
 8001e4e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001e50:	e02d      	b.n	8001eae <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001e52:	68f8      	ldr	r0, [r7, #12]
 8001e54:	f000 f8ce 	bl	8001ff4 <I2C_IsAcknowledgeFailed>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d001      	beq.n	8001e62 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	e02d      	b.n	8001ebe <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e62:	68bb      	ldr	r3, [r7, #8]
 8001e64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e68:	d021      	beq.n	8001eae <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e6a:	f7fe fda7 	bl	80009bc <HAL_GetTick>
 8001e6e:	4602      	mov	r2, r0
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	1ad3      	subs	r3, r2, r3
 8001e74:	68ba      	ldr	r2, [r7, #8]
 8001e76:	429a      	cmp	r2, r3
 8001e78:	d302      	bcc.n	8001e80 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001e7a:	68bb      	ldr	r3, [r7, #8]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d116      	bne.n	8001eae <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	2200      	movs	r2, #0
 8001e84:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	2220      	movs	r2, #32
 8001e8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	2200      	movs	r2, #0
 8001e92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e9a:	f043 0220 	orr.w	r2, r3, #32
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e007      	b.n	8001ebe <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	695b      	ldr	r3, [r3, #20]
 8001eb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001eb8:	2b80      	cmp	r3, #128	; 0x80
 8001eba:	d1ca      	bne.n	8001e52 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001ebc:	2300      	movs	r3, #0
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	3710      	adds	r7, #16
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}

08001ec6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001ec6:	b580      	push	{r7, lr}
 8001ec8:	b084      	sub	sp, #16
 8001eca:	af00      	add	r7, sp, #0
 8001ecc:	60f8      	str	r0, [r7, #12]
 8001ece:	60b9      	str	r1, [r7, #8]
 8001ed0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001ed2:	e02d      	b.n	8001f30 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001ed4:	68f8      	ldr	r0, [r7, #12]
 8001ed6:	f000 f88d 	bl	8001ff4 <I2C_IsAcknowledgeFailed>
 8001eda:	4603      	mov	r3, r0
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d001      	beq.n	8001ee4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	e02d      	b.n	8001f40 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001ee4:	68bb      	ldr	r3, [r7, #8]
 8001ee6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001eea:	d021      	beq.n	8001f30 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001eec:	f7fe fd66 	bl	80009bc <HAL_GetTick>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	1ad3      	subs	r3, r2, r3
 8001ef6:	68ba      	ldr	r2, [r7, #8]
 8001ef8:	429a      	cmp	r2, r3
 8001efa:	d302      	bcc.n	8001f02 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001efc:	68bb      	ldr	r3, [r7, #8]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d116      	bne.n	8001f30 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	2200      	movs	r2, #0
 8001f06:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	2220      	movs	r2, #32
 8001f0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	2200      	movs	r2, #0
 8001f14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f1c:	f043 0220 	orr.w	r2, r3, #32
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	2200      	movs	r2, #0
 8001f28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	e007      	b.n	8001f40 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	695b      	ldr	r3, [r3, #20]
 8001f36:	f003 0304 	and.w	r3, r3, #4
 8001f3a:	2b04      	cmp	r3, #4
 8001f3c:	d1ca      	bne.n	8001ed4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001f3e:	2300      	movs	r3, #0
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	3710      	adds	r7, #16
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}

08001f48 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b084      	sub	sp, #16
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	60f8      	str	r0, [r7, #12]
 8001f50:	60b9      	str	r1, [r7, #8]
 8001f52:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001f54:	e042      	b.n	8001fdc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	695b      	ldr	r3, [r3, #20]
 8001f5c:	f003 0310 	and.w	r3, r3, #16
 8001f60:	2b10      	cmp	r3, #16
 8001f62:	d119      	bne.n	8001f98 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f06f 0210 	mvn.w	r2, #16
 8001f6c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	2200      	movs	r2, #0
 8001f72:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	2220      	movs	r2, #32
 8001f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	2200      	movs	r2, #0
 8001f80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	2200      	movs	r2, #0
 8001f90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001f94:	2301      	movs	r3, #1
 8001f96:	e029      	b.n	8001fec <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f98:	f7fe fd10 	bl	80009bc <HAL_GetTick>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	1ad3      	subs	r3, r2, r3
 8001fa2:	68ba      	ldr	r2, [r7, #8]
 8001fa4:	429a      	cmp	r2, r3
 8001fa6:	d302      	bcc.n	8001fae <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8001fa8:	68bb      	ldr	r3, [r7, #8]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d116      	bne.n	8001fdc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	2220      	movs	r2, #32
 8001fb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc8:	f043 0220 	orr.w	r2, r3, #32
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	e007      	b.n	8001fec <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	695b      	ldr	r3, [r3, #20]
 8001fe2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fe6:	2b40      	cmp	r3, #64	; 0x40
 8001fe8:	d1b5      	bne.n	8001f56 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001fea:	2300      	movs	r3, #0
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	3710      	adds	r7, #16
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}

08001ff4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b083      	sub	sp, #12
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	695b      	ldr	r3, [r3, #20]
 8002002:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002006:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800200a:	d11b      	bne.n	8002044 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002014:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2200      	movs	r2, #0
 800201a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2220      	movs	r2, #32
 8002020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2200      	movs	r2, #0
 8002028:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002030:	f043 0204 	orr.w	r2, r3, #4
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2200      	movs	r2, #0
 800203c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002040:	2301      	movs	r3, #1
 8002042:	e000      	b.n	8002046 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002044:	2300      	movs	r3, #0
}
 8002046:	4618      	mov	r0, r3
 8002048:	370c      	adds	r7, #12
 800204a:	46bd      	mov	sp, r7
 800204c:	bc80      	pop	{r7}
 800204e:	4770      	bx	lr

08002050 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b086      	sub	sp, #24
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d101      	bne.n	8002062 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800205e:	2301      	movs	r3, #1
 8002060:	e26c      	b.n	800253c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f003 0301 	and.w	r3, r3, #1
 800206a:	2b00      	cmp	r3, #0
 800206c:	f000 8087 	beq.w	800217e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002070:	4b92      	ldr	r3, [pc, #584]	; (80022bc <HAL_RCC_OscConfig+0x26c>)
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	f003 030c 	and.w	r3, r3, #12
 8002078:	2b04      	cmp	r3, #4
 800207a:	d00c      	beq.n	8002096 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800207c:	4b8f      	ldr	r3, [pc, #572]	; (80022bc <HAL_RCC_OscConfig+0x26c>)
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	f003 030c 	and.w	r3, r3, #12
 8002084:	2b08      	cmp	r3, #8
 8002086:	d112      	bne.n	80020ae <HAL_RCC_OscConfig+0x5e>
 8002088:	4b8c      	ldr	r3, [pc, #560]	; (80022bc <HAL_RCC_OscConfig+0x26c>)
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002090:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002094:	d10b      	bne.n	80020ae <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002096:	4b89      	ldr	r3, [pc, #548]	; (80022bc <HAL_RCC_OscConfig+0x26c>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d06c      	beq.n	800217c <HAL_RCC_OscConfig+0x12c>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d168      	bne.n	800217c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	e246      	b.n	800253c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020b6:	d106      	bne.n	80020c6 <HAL_RCC_OscConfig+0x76>
 80020b8:	4b80      	ldr	r3, [pc, #512]	; (80022bc <HAL_RCC_OscConfig+0x26c>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a7f      	ldr	r2, [pc, #508]	; (80022bc <HAL_RCC_OscConfig+0x26c>)
 80020be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020c2:	6013      	str	r3, [r2, #0]
 80020c4:	e02e      	b.n	8002124 <HAL_RCC_OscConfig+0xd4>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d10c      	bne.n	80020e8 <HAL_RCC_OscConfig+0x98>
 80020ce:	4b7b      	ldr	r3, [pc, #492]	; (80022bc <HAL_RCC_OscConfig+0x26c>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4a7a      	ldr	r2, [pc, #488]	; (80022bc <HAL_RCC_OscConfig+0x26c>)
 80020d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020d8:	6013      	str	r3, [r2, #0]
 80020da:	4b78      	ldr	r3, [pc, #480]	; (80022bc <HAL_RCC_OscConfig+0x26c>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4a77      	ldr	r2, [pc, #476]	; (80022bc <HAL_RCC_OscConfig+0x26c>)
 80020e0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020e4:	6013      	str	r3, [r2, #0]
 80020e6:	e01d      	b.n	8002124 <HAL_RCC_OscConfig+0xd4>
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80020f0:	d10c      	bne.n	800210c <HAL_RCC_OscConfig+0xbc>
 80020f2:	4b72      	ldr	r3, [pc, #456]	; (80022bc <HAL_RCC_OscConfig+0x26c>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4a71      	ldr	r2, [pc, #452]	; (80022bc <HAL_RCC_OscConfig+0x26c>)
 80020f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020fc:	6013      	str	r3, [r2, #0]
 80020fe:	4b6f      	ldr	r3, [pc, #444]	; (80022bc <HAL_RCC_OscConfig+0x26c>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4a6e      	ldr	r2, [pc, #440]	; (80022bc <HAL_RCC_OscConfig+0x26c>)
 8002104:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002108:	6013      	str	r3, [r2, #0]
 800210a:	e00b      	b.n	8002124 <HAL_RCC_OscConfig+0xd4>
 800210c:	4b6b      	ldr	r3, [pc, #428]	; (80022bc <HAL_RCC_OscConfig+0x26c>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a6a      	ldr	r2, [pc, #424]	; (80022bc <HAL_RCC_OscConfig+0x26c>)
 8002112:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002116:	6013      	str	r3, [r2, #0]
 8002118:	4b68      	ldr	r3, [pc, #416]	; (80022bc <HAL_RCC_OscConfig+0x26c>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a67      	ldr	r2, [pc, #412]	; (80022bc <HAL_RCC_OscConfig+0x26c>)
 800211e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002122:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d013      	beq.n	8002154 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800212c:	f7fe fc46 	bl	80009bc <HAL_GetTick>
 8002130:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002132:	e008      	b.n	8002146 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002134:	f7fe fc42 	bl	80009bc <HAL_GetTick>
 8002138:	4602      	mov	r2, r0
 800213a:	693b      	ldr	r3, [r7, #16]
 800213c:	1ad3      	subs	r3, r2, r3
 800213e:	2b64      	cmp	r3, #100	; 0x64
 8002140:	d901      	bls.n	8002146 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002142:	2303      	movs	r3, #3
 8002144:	e1fa      	b.n	800253c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002146:	4b5d      	ldr	r3, [pc, #372]	; (80022bc <HAL_RCC_OscConfig+0x26c>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800214e:	2b00      	cmp	r3, #0
 8002150:	d0f0      	beq.n	8002134 <HAL_RCC_OscConfig+0xe4>
 8002152:	e014      	b.n	800217e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002154:	f7fe fc32 	bl	80009bc <HAL_GetTick>
 8002158:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800215a:	e008      	b.n	800216e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800215c:	f7fe fc2e 	bl	80009bc <HAL_GetTick>
 8002160:	4602      	mov	r2, r0
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	1ad3      	subs	r3, r2, r3
 8002166:	2b64      	cmp	r3, #100	; 0x64
 8002168:	d901      	bls.n	800216e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800216a:	2303      	movs	r3, #3
 800216c:	e1e6      	b.n	800253c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800216e:	4b53      	ldr	r3, [pc, #332]	; (80022bc <HAL_RCC_OscConfig+0x26c>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002176:	2b00      	cmp	r3, #0
 8002178:	d1f0      	bne.n	800215c <HAL_RCC_OscConfig+0x10c>
 800217a:	e000      	b.n	800217e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800217c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f003 0302 	and.w	r3, r3, #2
 8002186:	2b00      	cmp	r3, #0
 8002188:	d063      	beq.n	8002252 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800218a:	4b4c      	ldr	r3, [pc, #304]	; (80022bc <HAL_RCC_OscConfig+0x26c>)
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	f003 030c 	and.w	r3, r3, #12
 8002192:	2b00      	cmp	r3, #0
 8002194:	d00b      	beq.n	80021ae <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002196:	4b49      	ldr	r3, [pc, #292]	; (80022bc <HAL_RCC_OscConfig+0x26c>)
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	f003 030c 	and.w	r3, r3, #12
 800219e:	2b08      	cmp	r3, #8
 80021a0:	d11c      	bne.n	80021dc <HAL_RCC_OscConfig+0x18c>
 80021a2:	4b46      	ldr	r3, [pc, #280]	; (80022bc <HAL_RCC_OscConfig+0x26c>)
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d116      	bne.n	80021dc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021ae:	4b43      	ldr	r3, [pc, #268]	; (80022bc <HAL_RCC_OscConfig+0x26c>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f003 0302 	and.w	r3, r3, #2
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d005      	beq.n	80021c6 <HAL_RCC_OscConfig+0x176>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	691b      	ldr	r3, [r3, #16]
 80021be:	2b01      	cmp	r3, #1
 80021c0:	d001      	beq.n	80021c6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
 80021c4:	e1ba      	b.n	800253c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021c6:	4b3d      	ldr	r3, [pc, #244]	; (80022bc <HAL_RCC_OscConfig+0x26c>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	695b      	ldr	r3, [r3, #20]
 80021d2:	00db      	lsls	r3, r3, #3
 80021d4:	4939      	ldr	r1, [pc, #228]	; (80022bc <HAL_RCC_OscConfig+0x26c>)
 80021d6:	4313      	orrs	r3, r2
 80021d8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021da:	e03a      	b.n	8002252 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	691b      	ldr	r3, [r3, #16]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d020      	beq.n	8002226 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021e4:	4b36      	ldr	r3, [pc, #216]	; (80022c0 <HAL_RCC_OscConfig+0x270>)
 80021e6:	2201      	movs	r2, #1
 80021e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021ea:	f7fe fbe7 	bl	80009bc <HAL_GetTick>
 80021ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021f0:	e008      	b.n	8002204 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021f2:	f7fe fbe3 	bl	80009bc <HAL_GetTick>
 80021f6:	4602      	mov	r2, r0
 80021f8:	693b      	ldr	r3, [r7, #16]
 80021fa:	1ad3      	subs	r3, r2, r3
 80021fc:	2b02      	cmp	r3, #2
 80021fe:	d901      	bls.n	8002204 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002200:	2303      	movs	r3, #3
 8002202:	e19b      	b.n	800253c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002204:	4b2d      	ldr	r3, [pc, #180]	; (80022bc <HAL_RCC_OscConfig+0x26c>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f003 0302 	and.w	r3, r3, #2
 800220c:	2b00      	cmp	r3, #0
 800220e:	d0f0      	beq.n	80021f2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002210:	4b2a      	ldr	r3, [pc, #168]	; (80022bc <HAL_RCC_OscConfig+0x26c>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	695b      	ldr	r3, [r3, #20]
 800221c:	00db      	lsls	r3, r3, #3
 800221e:	4927      	ldr	r1, [pc, #156]	; (80022bc <HAL_RCC_OscConfig+0x26c>)
 8002220:	4313      	orrs	r3, r2
 8002222:	600b      	str	r3, [r1, #0]
 8002224:	e015      	b.n	8002252 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002226:	4b26      	ldr	r3, [pc, #152]	; (80022c0 <HAL_RCC_OscConfig+0x270>)
 8002228:	2200      	movs	r2, #0
 800222a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800222c:	f7fe fbc6 	bl	80009bc <HAL_GetTick>
 8002230:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002232:	e008      	b.n	8002246 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002234:	f7fe fbc2 	bl	80009bc <HAL_GetTick>
 8002238:	4602      	mov	r2, r0
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	1ad3      	subs	r3, r2, r3
 800223e:	2b02      	cmp	r3, #2
 8002240:	d901      	bls.n	8002246 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002242:	2303      	movs	r3, #3
 8002244:	e17a      	b.n	800253c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002246:	4b1d      	ldr	r3, [pc, #116]	; (80022bc <HAL_RCC_OscConfig+0x26c>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f003 0302 	and.w	r3, r3, #2
 800224e:	2b00      	cmp	r3, #0
 8002250:	d1f0      	bne.n	8002234 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f003 0308 	and.w	r3, r3, #8
 800225a:	2b00      	cmp	r3, #0
 800225c:	d03a      	beq.n	80022d4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	699b      	ldr	r3, [r3, #24]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d019      	beq.n	800229a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002266:	4b17      	ldr	r3, [pc, #92]	; (80022c4 <HAL_RCC_OscConfig+0x274>)
 8002268:	2201      	movs	r2, #1
 800226a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800226c:	f7fe fba6 	bl	80009bc <HAL_GetTick>
 8002270:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002272:	e008      	b.n	8002286 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002274:	f7fe fba2 	bl	80009bc <HAL_GetTick>
 8002278:	4602      	mov	r2, r0
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	1ad3      	subs	r3, r2, r3
 800227e:	2b02      	cmp	r3, #2
 8002280:	d901      	bls.n	8002286 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002282:	2303      	movs	r3, #3
 8002284:	e15a      	b.n	800253c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002286:	4b0d      	ldr	r3, [pc, #52]	; (80022bc <HAL_RCC_OscConfig+0x26c>)
 8002288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800228a:	f003 0302 	and.w	r3, r3, #2
 800228e:	2b00      	cmp	r3, #0
 8002290:	d0f0      	beq.n	8002274 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002292:	2001      	movs	r0, #1
 8002294:	f000 fada 	bl	800284c <RCC_Delay>
 8002298:	e01c      	b.n	80022d4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800229a:	4b0a      	ldr	r3, [pc, #40]	; (80022c4 <HAL_RCC_OscConfig+0x274>)
 800229c:	2200      	movs	r2, #0
 800229e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022a0:	f7fe fb8c 	bl	80009bc <HAL_GetTick>
 80022a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022a6:	e00f      	b.n	80022c8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022a8:	f7fe fb88 	bl	80009bc <HAL_GetTick>
 80022ac:	4602      	mov	r2, r0
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	1ad3      	subs	r3, r2, r3
 80022b2:	2b02      	cmp	r3, #2
 80022b4:	d908      	bls.n	80022c8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80022b6:	2303      	movs	r3, #3
 80022b8:	e140      	b.n	800253c <HAL_RCC_OscConfig+0x4ec>
 80022ba:	bf00      	nop
 80022bc:	40021000 	.word	0x40021000
 80022c0:	42420000 	.word	0x42420000
 80022c4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022c8:	4b9e      	ldr	r3, [pc, #632]	; (8002544 <HAL_RCC_OscConfig+0x4f4>)
 80022ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022cc:	f003 0302 	and.w	r3, r3, #2
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d1e9      	bne.n	80022a8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f003 0304 	and.w	r3, r3, #4
 80022dc:	2b00      	cmp	r3, #0
 80022de:	f000 80a6 	beq.w	800242e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022e2:	2300      	movs	r3, #0
 80022e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022e6:	4b97      	ldr	r3, [pc, #604]	; (8002544 <HAL_RCC_OscConfig+0x4f4>)
 80022e8:	69db      	ldr	r3, [r3, #28]
 80022ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d10d      	bne.n	800230e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022f2:	4b94      	ldr	r3, [pc, #592]	; (8002544 <HAL_RCC_OscConfig+0x4f4>)
 80022f4:	69db      	ldr	r3, [r3, #28]
 80022f6:	4a93      	ldr	r2, [pc, #588]	; (8002544 <HAL_RCC_OscConfig+0x4f4>)
 80022f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022fc:	61d3      	str	r3, [r2, #28]
 80022fe:	4b91      	ldr	r3, [pc, #580]	; (8002544 <HAL_RCC_OscConfig+0x4f4>)
 8002300:	69db      	ldr	r3, [r3, #28]
 8002302:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002306:	60bb      	str	r3, [r7, #8]
 8002308:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800230a:	2301      	movs	r3, #1
 800230c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800230e:	4b8e      	ldr	r3, [pc, #568]	; (8002548 <HAL_RCC_OscConfig+0x4f8>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002316:	2b00      	cmp	r3, #0
 8002318:	d118      	bne.n	800234c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800231a:	4b8b      	ldr	r3, [pc, #556]	; (8002548 <HAL_RCC_OscConfig+0x4f8>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4a8a      	ldr	r2, [pc, #552]	; (8002548 <HAL_RCC_OscConfig+0x4f8>)
 8002320:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002324:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002326:	f7fe fb49 	bl	80009bc <HAL_GetTick>
 800232a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800232c:	e008      	b.n	8002340 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800232e:	f7fe fb45 	bl	80009bc <HAL_GetTick>
 8002332:	4602      	mov	r2, r0
 8002334:	693b      	ldr	r3, [r7, #16]
 8002336:	1ad3      	subs	r3, r2, r3
 8002338:	2b64      	cmp	r3, #100	; 0x64
 800233a:	d901      	bls.n	8002340 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800233c:	2303      	movs	r3, #3
 800233e:	e0fd      	b.n	800253c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002340:	4b81      	ldr	r3, [pc, #516]	; (8002548 <HAL_RCC_OscConfig+0x4f8>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002348:	2b00      	cmp	r3, #0
 800234a:	d0f0      	beq.n	800232e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	68db      	ldr	r3, [r3, #12]
 8002350:	2b01      	cmp	r3, #1
 8002352:	d106      	bne.n	8002362 <HAL_RCC_OscConfig+0x312>
 8002354:	4b7b      	ldr	r3, [pc, #492]	; (8002544 <HAL_RCC_OscConfig+0x4f4>)
 8002356:	6a1b      	ldr	r3, [r3, #32]
 8002358:	4a7a      	ldr	r2, [pc, #488]	; (8002544 <HAL_RCC_OscConfig+0x4f4>)
 800235a:	f043 0301 	orr.w	r3, r3, #1
 800235e:	6213      	str	r3, [r2, #32]
 8002360:	e02d      	b.n	80023be <HAL_RCC_OscConfig+0x36e>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	68db      	ldr	r3, [r3, #12]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d10c      	bne.n	8002384 <HAL_RCC_OscConfig+0x334>
 800236a:	4b76      	ldr	r3, [pc, #472]	; (8002544 <HAL_RCC_OscConfig+0x4f4>)
 800236c:	6a1b      	ldr	r3, [r3, #32]
 800236e:	4a75      	ldr	r2, [pc, #468]	; (8002544 <HAL_RCC_OscConfig+0x4f4>)
 8002370:	f023 0301 	bic.w	r3, r3, #1
 8002374:	6213      	str	r3, [r2, #32]
 8002376:	4b73      	ldr	r3, [pc, #460]	; (8002544 <HAL_RCC_OscConfig+0x4f4>)
 8002378:	6a1b      	ldr	r3, [r3, #32]
 800237a:	4a72      	ldr	r2, [pc, #456]	; (8002544 <HAL_RCC_OscConfig+0x4f4>)
 800237c:	f023 0304 	bic.w	r3, r3, #4
 8002380:	6213      	str	r3, [r2, #32]
 8002382:	e01c      	b.n	80023be <HAL_RCC_OscConfig+0x36e>
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	68db      	ldr	r3, [r3, #12]
 8002388:	2b05      	cmp	r3, #5
 800238a:	d10c      	bne.n	80023a6 <HAL_RCC_OscConfig+0x356>
 800238c:	4b6d      	ldr	r3, [pc, #436]	; (8002544 <HAL_RCC_OscConfig+0x4f4>)
 800238e:	6a1b      	ldr	r3, [r3, #32]
 8002390:	4a6c      	ldr	r2, [pc, #432]	; (8002544 <HAL_RCC_OscConfig+0x4f4>)
 8002392:	f043 0304 	orr.w	r3, r3, #4
 8002396:	6213      	str	r3, [r2, #32]
 8002398:	4b6a      	ldr	r3, [pc, #424]	; (8002544 <HAL_RCC_OscConfig+0x4f4>)
 800239a:	6a1b      	ldr	r3, [r3, #32]
 800239c:	4a69      	ldr	r2, [pc, #420]	; (8002544 <HAL_RCC_OscConfig+0x4f4>)
 800239e:	f043 0301 	orr.w	r3, r3, #1
 80023a2:	6213      	str	r3, [r2, #32]
 80023a4:	e00b      	b.n	80023be <HAL_RCC_OscConfig+0x36e>
 80023a6:	4b67      	ldr	r3, [pc, #412]	; (8002544 <HAL_RCC_OscConfig+0x4f4>)
 80023a8:	6a1b      	ldr	r3, [r3, #32]
 80023aa:	4a66      	ldr	r2, [pc, #408]	; (8002544 <HAL_RCC_OscConfig+0x4f4>)
 80023ac:	f023 0301 	bic.w	r3, r3, #1
 80023b0:	6213      	str	r3, [r2, #32]
 80023b2:	4b64      	ldr	r3, [pc, #400]	; (8002544 <HAL_RCC_OscConfig+0x4f4>)
 80023b4:	6a1b      	ldr	r3, [r3, #32]
 80023b6:	4a63      	ldr	r2, [pc, #396]	; (8002544 <HAL_RCC_OscConfig+0x4f4>)
 80023b8:	f023 0304 	bic.w	r3, r3, #4
 80023bc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	68db      	ldr	r3, [r3, #12]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d015      	beq.n	80023f2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023c6:	f7fe faf9 	bl	80009bc <HAL_GetTick>
 80023ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023cc:	e00a      	b.n	80023e4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023ce:	f7fe faf5 	bl	80009bc <HAL_GetTick>
 80023d2:	4602      	mov	r2, r0
 80023d4:	693b      	ldr	r3, [r7, #16]
 80023d6:	1ad3      	subs	r3, r2, r3
 80023d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80023dc:	4293      	cmp	r3, r2
 80023de:	d901      	bls.n	80023e4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80023e0:	2303      	movs	r3, #3
 80023e2:	e0ab      	b.n	800253c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023e4:	4b57      	ldr	r3, [pc, #348]	; (8002544 <HAL_RCC_OscConfig+0x4f4>)
 80023e6:	6a1b      	ldr	r3, [r3, #32]
 80023e8:	f003 0302 	and.w	r3, r3, #2
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d0ee      	beq.n	80023ce <HAL_RCC_OscConfig+0x37e>
 80023f0:	e014      	b.n	800241c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023f2:	f7fe fae3 	bl	80009bc <HAL_GetTick>
 80023f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023f8:	e00a      	b.n	8002410 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023fa:	f7fe fadf 	bl	80009bc <HAL_GetTick>
 80023fe:	4602      	mov	r2, r0
 8002400:	693b      	ldr	r3, [r7, #16]
 8002402:	1ad3      	subs	r3, r2, r3
 8002404:	f241 3288 	movw	r2, #5000	; 0x1388
 8002408:	4293      	cmp	r3, r2
 800240a:	d901      	bls.n	8002410 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800240c:	2303      	movs	r3, #3
 800240e:	e095      	b.n	800253c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002410:	4b4c      	ldr	r3, [pc, #304]	; (8002544 <HAL_RCC_OscConfig+0x4f4>)
 8002412:	6a1b      	ldr	r3, [r3, #32]
 8002414:	f003 0302 	and.w	r3, r3, #2
 8002418:	2b00      	cmp	r3, #0
 800241a:	d1ee      	bne.n	80023fa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800241c:	7dfb      	ldrb	r3, [r7, #23]
 800241e:	2b01      	cmp	r3, #1
 8002420:	d105      	bne.n	800242e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002422:	4b48      	ldr	r3, [pc, #288]	; (8002544 <HAL_RCC_OscConfig+0x4f4>)
 8002424:	69db      	ldr	r3, [r3, #28]
 8002426:	4a47      	ldr	r2, [pc, #284]	; (8002544 <HAL_RCC_OscConfig+0x4f4>)
 8002428:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800242c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	69db      	ldr	r3, [r3, #28]
 8002432:	2b00      	cmp	r3, #0
 8002434:	f000 8081 	beq.w	800253a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002438:	4b42      	ldr	r3, [pc, #264]	; (8002544 <HAL_RCC_OscConfig+0x4f4>)
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	f003 030c 	and.w	r3, r3, #12
 8002440:	2b08      	cmp	r3, #8
 8002442:	d061      	beq.n	8002508 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	69db      	ldr	r3, [r3, #28]
 8002448:	2b02      	cmp	r3, #2
 800244a:	d146      	bne.n	80024da <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800244c:	4b3f      	ldr	r3, [pc, #252]	; (800254c <HAL_RCC_OscConfig+0x4fc>)
 800244e:	2200      	movs	r2, #0
 8002450:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002452:	f7fe fab3 	bl	80009bc <HAL_GetTick>
 8002456:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002458:	e008      	b.n	800246c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800245a:	f7fe faaf 	bl	80009bc <HAL_GetTick>
 800245e:	4602      	mov	r2, r0
 8002460:	693b      	ldr	r3, [r7, #16]
 8002462:	1ad3      	subs	r3, r2, r3
 8002464:	2b02      	cmp	r3, #2
 8002466:	d901      	bls.n	800246c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002468:	2303      	movs	r3, #3
 800246a:	e067      	b.n	800253c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800246c:	4b35      	ldr	r3, [pc, #212]	; (8002544 <HAL_RCC_OscConfig+0x4f4>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002474:	2b00      	cmp	r3, #0
 8002476:	d1f0      	bne.n	800245a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6a1b      	ldr	r3, [r3, #32]
 800247c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002480:	d108      	bne.n	8002494 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002482:	4b30      	ldr	r3, [pc, #192]	; (8002544 <HAL_RCC_OscConfig+0x4f4>)
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	492d      	ldr	r1, [pc, #180]	; (8002544 <HAL_RCC_OscConfig+0x4f4>)
 8002490:	4313      	orrs	r3, r2
 8002492:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002494:	4b2b      	ldr	r3, [pc, #172]	; (8002544 <HAL_RCC_OscConfig+0x4f4>)
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6a19      	ldr	r1, [r3, #32]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a4:	430b      	orrs	r3, r1
 80024a6:	4927      	ldr	r1, [pc, #156]	; (8002544 <HAL_RCC_OscConfig+0x4f4>)
 80024a8:	4313      	orrs	r3, r2
 80024aa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024ac:	4b27      	ldr	r3, [pc, #156]	; (800254c <HAL_RCC_OscConfig+0x4fc>)
 80024ae:	2201      	movs	r2, #1
 80024b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024b2:	f7fe fa83 	bl	80009bc <HAL_GetTick>
 80024b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024b8:	e008      	b.n	80024cc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024ba:	f7fe fa7f 	bl	80009bc <HAL_GetTick>
 80024be:	4602      	mov	r2, r0
 80024c0:	693b      	ldr	r3, [r7, #16]
 80024c2:	1ad3      	subs	r3, r2, r3
 80024c4:	2b02      	cmp	r3, #2
 80024c6:	d901      	bls.n	80024cc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80024c8:	2303      	movs	r3, #3
 80024ca:	e037      	b.n	800253c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024cc:	4b1d      	ldr	r3, [pc, #116]	; (8002544 <HAL_RCC_OscConfig+0x4f4>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d0f0      	beq.n	80024ba <HAL_RCC_OscConfig+0x46a>
 80024d8:	e02f      	b.n	800253a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024da:	4b1c      	ldr	r3, [pc, #112]	; (800254c <HAL_RCC_OscConfig+0x4fc>)
 80024dc:	2200      	movs	r2, #0
 80024de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024e0:	f7fe fa6c 	bl	80009bc <HAL_GetTick>
 80024e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024e6:	e008      	b.n	80024fa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024e8:	f7fe fa68 	bl	80009bc <HAL_GetTick>
 80024ec:	4602      	mov	r2, r0
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	1ad3      	subs	r3, r2, r3
 80024f2:	2b02      	cmp	r3, #2
 80024f4:	d901      	bls.n	80024fa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80024f6:	2303      	movs	r3, #3
 80024f8:	e020      	b.n	800253c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024fa:	4b12      	ldr	r3, [pc, #72]	; (8002544 <HAL_RCC_OscConfig+0x4f4>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002502:	2b00      	cmp	r3, #0
 8002504:	d1f0      	bne.n	80024e8 <HAL_RCC_OscConfig+0x498>
 8002506:	e018      	b.n	800253a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	69db      	ldr	r3, [r3, #28]
 800250c:	2b01      	cmp	r3, #1
 800250e:	d101      	bne.n	8002514 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002510:	2301      	movs	r3, #1
 8002512:	e013      	b.n	800253c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002514:	4b0b      	ldr	r3, [pc, #44]	; (8002544 <HAL_RCC_OscConfig+0x4f4>)
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6a1b      	ldr	r3, [r3, #32]
 8002524:	429a      	cmp	r2, r3
 8002526:	d106      	bne.n	8002536 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002532:	429a      	cmp	r2, r3
 8002534:	d001      	beq.n	800253a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002536:	2301      	movs	r3, #1
 8002538:	e000      	b.n	800253c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800253a:	2300      	movs	r3, #0
}
 800253c:	4618      	mov	r0, r3
 800253e:	3718      	adds	r7, #24
 8002540:	46bd      	mov	sp, r7
 8002542:	bd80      	pop	{r7, pc}
 8002544:	40021000 	.word	0x40021000
 8002548:	40007000 	.word	0x40007000
 800254c:	42420060 	.word	0x42420060

08002550 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b084      	sub	sp, #16
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
 8002558:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d101      	bne.n	8002564 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002560:	2301      	movs	r3, #1
 8002562:	e0d0      	b.n	8002706 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002564:	4b6a      	ldr	r3, [pc, #424]	; (8002710 <HAL_RCC_ClockConfig+0x1c0>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f003 0307 	and.w	r3, r3, #7
 800256c:	683a      	ldr	r2, [r7, #0]
 800256e:	429a      	cmp	r2, r3
 8002570:	d910      	bls.n	8002594 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002572:	4b67      	ldr	r3, [pc, #412]	; (8002710 <HAL_RCC_ClockConfig+0x1c0>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f023 0207 	bic.w	r2, r3, #7
 800257a:	4965      	ldr	r1, [pc, #404]	; (8002710 <HAL_RCC_ClockConfig+0x1c0>)
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	4313      	orrs	r3, r2
 8002580:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002582:	4b63      	ldr	r3, [pc, #396]	; (8002710 <HAL_RCC_ClockConfig+0x1c0>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f003 0307 	and.w	r3, r3, #7
 800258a:	683a      	ldr	r2, [r7, #0]
 800258c:	429a      	cmp	r2, r3
 800258e:	d001      	beq.n	8002594 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002590:	2301      	movs	r3, #1
 8002592:	e0b8      	b.n	8002706 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f003 0302 	and.w	r3, r3, #2
 800259c:	2b00      	cmp	r3, #0
 800259e:	d020      	beq.n	80025e2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f003 0304 	and.w	r3, r3, #4
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d005      	beq.n	80025b8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80025ac:	4b59      	ldr	r3, [pc, #356]	; (8002714 <HAL_RCC_ClockConfig+0x1c4>)
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	4a58      	ldr	r2, [pc, #352]	; (8002714 <HAL_RCC_ClockConfig+0x1c4>)
 80025b2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80025b6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f003 0308 	and.w	r3, r3, #8
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d005      	beq.n	80025d0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80025c4:	4b53      	ldr	r3, [pc, #332]	; (8002714 <HAL_RCC_ClockConfig+0x1c4>)
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	4a52      	ldr	r2, [pc, #328]	; (8002714 <HAL_RCC_ClockConfig+0x1c4>)
 80025ca:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80025ce:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025d0:	4b50      	ldr	r3, [pc, #320]	; (8002714 <HAL_RCC_ClockConfig+0x1c4>)
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	689b      	ldr	r3, [r3, #8]
 80025dc:	494d      	ldr	r1, [pc, #308]	; (8002714 <HAL_RCC_ClockConfig+0x1c4>)
 80025de:	4313      	orrs	r3, r2
 80025e0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f003 0301 	and.w	r3, r3, #1
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d040      	beq.n	8002670 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	2b01      	cmp	r3, #1
 80025f4:	d107      	bne.n	8002606 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025f6:	4b47      	ldr	r3, [pc, #284]	; (8002714 <HAL_RCC_ClockConfig+0x1c4>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d115      	bne.n	800262e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002602:	2301      	movs	r3, #1
 8002604:	e07f      	b.n	8002706 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	2b02      	cmp	r3, #2
 800260c:	d107      	bne.n	800261e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800260e:	4b41      	ldr	r3, [pc, #260]	; (8002714 <HAL_RCC_ClockConfig+0x1c4>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002616:	2b00      	cmp	r3, #0
 8002618:	d109      	bne.n	800262e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	e073      	b.n	8002706 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800261e:	4b3d      	ldr	r3, [pc, #244]	; (8002714 <HAL_RCC_ClockConfig+0x1c4>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f003 0302 	and.w	r3, r3, #2
 8002626:	2b00      	cmp	r3, #0
 8002628:	d101      	bne.n	800262e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	e06b      	b.n	8002706 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800262e:	4b39      	ldr	r3, [pc, #228]	; (8002714 <HAL_RCC_ClockConfig+0x1c4>)
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	f023 0203 	bic.w	r2, r3, #3
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	4936      	ldr	r1, [pc, #216]	; (8002714 <HAL_RCC_ClockConfig+0x1c4>)
 800263c:	4313      	orrs	r3, r2
 800263e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002640:	f7fe f9bc 	bl	80009bc <HAL_GetTick>
 8002644:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002646:	e00a      	b.n	800265e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002648:	f7fe f9b8 	bl	80009bc <HAL_GetTick>
 800264c:	4602      	mov	r2, r0
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	1ad3      	subs	r3, r2, r3
 8002652:	f241 3288 	movw	r2, #5000	; 0x1388
 8002656:	4293      	cmp	r3, r2
 8002658:	d901      	bls.n	800265e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800265a:	2303      	movs	r3, #3
 800265c:	e053      	b.n	8002706 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800265e:	4b2d      	ldr	r3, [pc, #180]	; (8002714 <HAL_RCC_ClockConfig+0x1c4>)
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	f003 020c 	and.w	r2, r3, #12
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	009b      	lsls	r3, r3, #2
 800266c:	429a      	cmp	r2, r3
 800266e:	d1eb      	bne.n	8002648 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002670:	4b27      	ldr	r3, [pc, #156]	; (8002710 <HAL_RCC_ClockConfig+0x1c0>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f003 0307 	and.w	r3, r3, #7
 8002678:	683a      	ldr	r2, [r7, #0]
 800267a:	429a      	cmp	r2, r3
 800267c:	d210      	bcs.n	80026a0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800267e:	4b24      	ldr	r3, [pc, #144]	; (8002710 <HAL_RCC_ClockConfig+0x1c0>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f023 0207 	bic.w	r2, r3, #7
 8002686:	4922      	ldr	r1, [pc, #136]	; (8002710 <HAL_RCC_ClockConfig+0x1c0>)
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	4313      	orrs	r3, r2
 800268c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800268e:	4b20      	ldr	r3, [pc, #128]	; (8002710 <HAL_RCC_ClockConfig+0x1c0>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f003 0307 	and.w	r3, r3, #7
 8002696:	683a      	ldr	r2, [r7, #0]
 8002698:	429a      	cmp	r2, r3
 800269a:	d001      	beq.n	80026a0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800269c:	2301      	movs	r3, #1
 800269e:	e032      	b.n	8002706 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f003 0304 	and.w	r3, r3, #4
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d008      	beq.n	80026be <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026ac:	4b19      	ldr	r3, [pc, #100]	; (8002714 <HAL_RCC_ClockConfig+0x1c4>)
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	68db      	ldr	r3, [r3, #12]
 80026b8:	4916      	ldr	r1, [pc, #88]	; (8002714 <HAL_RCC_ClockConfig+0x1c4>)
 80026ba:	4313      	orrs	r3, r2
 80026bc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f003 0308 	and.w	r3, r3, #8
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d009      	beq.n	80026de <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80026ca:	4b12      	ldr	r3, [pc, #72]	; (8002714 <HAL_RCC_ClockConfig+0x1c4>)
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	691b      	ldr	r3, [r3, #16]
 80026d6:	00db      	lsls	r3, r3, #3
 80026d8:	490e      	ldr	r1, [pc, #56]	; (8002714 <HAL_RCC_ClockConfig+0x1c4>)
 80026da:	4313      	orrs	r3, r2
 80026dc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80026de:	f000 f821 	bl	8002724 <HAL_RCC_GetSysClockFreq>
 80026e2:	4601      	mov	r1, r0
 80026e4:	4b0b      	ldr	r3, [pc, #44]	; (8002714 <HAL_RCC_ClockConfig+0x1c4>)
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	091b      	lsrs	r3, r3, #4
 80026ea:	f003 030f 	and.w	r3, r3, #15
 80026ee:	4a0a      	ldr	r2, [pc, #40]	; (8002718 <HAL_RCC_ClockConfig+0x1c8>)
 80026f0:	5cd3      	ldrb	r3, [r2, r3]
 80026f2:	fa21 f303 	lsr.w	r3, r1, r3
 80026f6:	4a09      	ldr	r2, [pc, #36]	; (800271c <HAL_RCC_ClockConfig+0x1cc>)
 80026f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80026fa:	4b09      	ldr	r3, [pc, #36]	; (8002720 <HAL_RCC_ClockConfig+0x1d0>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4618      	mov	r0, r3
 8002700:	f7fe f91a 	bl	8000938 <HAL_InitTick>

  return HAL_OK;
 8002704:	2300      	movs	r3, #0
}
 8002706:	4618      	mov	r0, r3
 8002708:	3710      	adds	r7, #16
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}
 800270e:	bf00      	nop
 8002710:	40022000 	.word	0x40022000
 8002714:	40021000 	.word	0x40021000
 8002718:	080035bc 	.word	0x080035bc
 800271c:	20000000 	.word	0x20000000
 8002720:	20000004 	.word	0x20000004

08002724 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002724:	b490      	push	{r4, r7}
 8002726:	b08a      	sub	sp, #40	; 0x28
 8002728:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800272a:	4b2a      	ldr	r3, [pc, #168]	; (80027d4 <HAL_RCC_GetSysClockFreq+0xb0>)
 800272c:	1d3c      	adds	r4, r7, #4
 800272e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002730:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002734:	4b28      	ldr	r3, [pc, #160]	; (80027d8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002736:	881b      	ldrh	r3, [r3, #0]
 8002738:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800273a:	2300      	movs	r3, #0
 800273c:	61fb      	str	r3, [r7, #28]
 800273e:	2300      	movs	r3, #0
 8002740:	61bb      	str	r3, [r7, #24]
 8002742:	2300      	movs	r3, #0
 8002744:	627b      	str	r3, [r7, #36]	; 0x24
 8002746:	2300      	movs	r3, #0
 8002748:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800274a:	2300      	movs	r3, #0
 800274c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800274e:	4b23      	ldr	r3, [pc, #140]	; (80027dc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002754:	69fb      	ldr	r3, [r7, #28]
 8002756:	f003 030c 	and.w	r3, r3, #12
 800275a:	2b04      	cmp	r3, #4
 800275c:	d002      	beq.n	8002764 <HAL_RCC_GetSysClockFreq+0x40>
 800275e:	2b08      	cmp	r3, #8
 8002760:	d003      	beq.n	800276a <HAL_RCC_GetSysClockFreq+0x46>
 8002762:	e02d      	b.n	80027c0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002764:	4b1e      	ldr	r3, [pc, #120]	; (80027e0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002766:	623b      	str	r3, [r7, #32]
      break;
 8002768:	e02d      	b.n	80027c6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800276a:	69fb      	ldr	r3, [r7, #28]
 800276c:	0c9b      	lsrs	r3, r3, #18
 800276e:	f003 030f 	and.w	r3, r3, #15
 8002772:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002776:	4413      	add	r3, r2
 8002778:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800277c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800277e:	69fb      	ldr	r3, [r7, #28]
 8002780:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002784:	2b00      	cmp	r3, #0
 8002786:	d013      	beq.n	80027b0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002788:	4b14      	ldr	r3, [pc, #80]	; (80027dc <HAL_RCC_GetSysClockFreq+0xb8>)
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	0c5b      	lsrs	r3, r3, #17
 800278e:	f003 0301 	and.w	r3, r3, #1
 8002792:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002796:	4413      	add	r3, r2
 8002798:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800279c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800279e:	697b      	ldr	r3, [r7, #20]
 80027a0:	4a0f      	ldr	r2, [pc, #60]	; (80027e0 <HAL_RCC_GetSysClockFreq+0xbc>)
 80027a2:	fb02 f203 	mul.w	r2, r2, r3
 80027a6:	69bb      	ldr	r3, [r7, #24]
 80027a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80027ac:	627b      	str	r3, [r7, #36]	; 0x24
 80027ae:	e004      	b.n	80027ba <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80027b0:	697b      	ldr	r3, [r7, #20]
 80027b2:	4a0c      	ldr	r2, [pc, #48]	; (80027e4 <HAL_RCC_GetSysClockFreq+0xc0>)
 80027b4:	fb02 f303 	mul.w	r3, r2, r3
 80027b8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80027ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027bc:	623b      	str	r3, [r7, #32]
      break;
 80027be:	e002      	b.n	80027c6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80027c0:	4b07      	ldr	r3, [pc, #28]	; (80027e0 <HAL_RCC_GetSysClockFreq+0xbc>)
 80027c2:	623b      	str	r3, [r7, #32]
      break;
 80027c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80027c6:	6a3b      	ldr	r3, [r7, #32]
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	3728      	adds	r7, #40	; 0x28
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bc90      	pop	{r4, r7}
 80027d0:	4770      	bx	lr
 80027d2:	bf00      	nop
 80027d4:	080035a8 	.word	0x080035a8
 80027d8:	080035b8 	.word	0x080035b8
 80027dc:	40021000 	.word	0x40021000
 80027e0:	007a1200 	.word	0x007a1200
 80027e4:	003d0900 	.word	0x003d0900

080027e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027e8:	b480      	push	{r7}
 80027ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80027ec:	4b02      	ldr	r3, [pc, #8]	; (80027f8 <HAL_RCC_GetHCLKFreq+0x10>)
 80027ee:	681b      	ldr	r3, [r3, #0]
}
 80027f0:	4618      	mov	r0, r3
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bc80      	pop	{r7}
 80027f6:	4770      	bx	lr
 80027f8:	20000000 	.word	0x20000000

080027fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002800:	f7ff fff2 	bl	80027e8 <HAL_RCC_GetHCLKFreq>
 8002804:	4601      	mov	r1, r0
 8002806:	4b05      	ldr	r3, [pc, #20]	; (800281c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	0a1b      	lsrs	r3, r3, #8
 800280c:	f003 0307 	and.w	r3, r3, #7
 8002810:	4a03      	ldr	r2, [pc, #12]	; (8002820 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002812:	5cd3      	ldrb	r3, [r2, r3]
 8002814:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002818:	4618      	mov	r0, r3
 800281a:	bd80      	pop	{r7, pc}
 800281c:	40021000 	.word	0x40021000
 8002820:	080035cc 	.word	0x080035cc

08002824 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002828:	f7ff ffde 	bl	80027e8 <HAL_RCC_GetHCLKFreq>
 800282c:	4601      	mov	r1, r0
 800282e:	4b05      	ldr	r3, [pc, #20]	; (8002844 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	0adb      	lsrs	r3, r3, #11
 8002834:	f003 0307 	and.w	r3, r3, #7
 8002838:	4a03      	ldr	r2, [pc, #12]	; (8002848 <HAL_RCC_GetPCLK2Freq+0x24>)
 800283a:	5cd3      	ldrb	r3, [r2, r3]
 800283c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002840:	4618      	mov	r0, r3
 8002842:	bd80      	pop	{r7, pc}
 8002844:	40021000 	.word	0x40021000
 8002848:	080035cc 	.word	0x080035cc

0800284c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800284c:	b480      	push	{r7}
 800284e:	b085      	sub	sp, #20
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002854:	4b0a      	ldr	r3, [pc, #40]	; (8002880 <RCC_Delay+0x34>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a0a      	ldr	r2, [pc, #40]	; (8002884 <RCC_Delay+0x38>)
 800285a:	fba2 2303 	umull	r2, r3, r2, r3
 800285e:	0a5b      	lsrs	r3, r3, #9
 8002860:	687a      	ldr	r2, [r7, #4]
 8002862:	fb02 f303 	mul.w	r3, r2, r3
 8002866:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002868:	bf00      	nop
  }
  while (Delay --);
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	1e5a      	subs	r2, r3, #1
 800286e:	60fa      	str	r2, [r7, #12]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d1f9      	bne.n	8002868 <RCC_Delay+0x1c>
}
 8002874:	bf00      	nop
 8002876:	3714      	adds	r7, #20
 8002878:	46bd      	mov	sp, r7
 800287a:	bc80      	pop	{r7}
 800287c:	4770      	bx	lr
 800287e:	bf00      	nop
 8002880:	20000000 	.word	0x20000000
 8002884:	10624dd3 	.word	0x10624dd3

08002888 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b082      	sub	sp, #8
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d101      	bne.n	800289a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	e03f      	b.n	800291a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80028a0:	b2db      	uxtb	r3, r3
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d106      	bne.n	80028b4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2200      	movs	r2, #0
 80028aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80028ae:	6878      	ldr	r0, [r7, #4]
 80028b0:	f7fd fef0 	bl	8000694 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2224      	movs	r2, #36	; 0x24
 80028b8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	68da      	ldr	r2, [r3, #12]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80028ca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80028cc:	6878      	ldr	r0, [r7, #4]
 80028ce:	f000 f905 	bl	8002adc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	691a      	ldr	r2, [r3, #16]
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80028e0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	695a      	ldr	r2, [r3, #20]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80028f0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	68da      	ldr	r2, [r3, #12]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002900:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2200      	movs	r2, #0
 8002906:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2220      	movs	r2, #32
 800290c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2220      	movs	r2, #32
 8002914:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002918:	2300      	movs	r3, #0
}
 800291a:	4618      	mov	r0, r3
 800291c:	3708      	adds	r7, #8
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}

08002922 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002922:	b580      	push	{r7, lr}
 8002924:	b08a      	sub	sp, #40	; 0x28
 8002926:	af02      	add	r7, sp, #8
 8002928:	60f8      	str	r0, [r7, #12]
 800292a:	60b9      	str	r1, [r7, #8]
 800292c:	603b      	str	r3, [r7, #0]
 800292e:	4613      	mov	r3, r2
 8002930:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002932:	2300      	movs	r3, #0
 8002934:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800293c:	b2db      	uxtb	r3, r3
 800293e:	2b20      	cmp	r3, #32
 8002940:	d17c      	bne.n	8002a3c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d002      	beq.n	800294e <HAL_UART_Transmit+0x2c>
 8002948:	88fb      	ldrh	r3, [r7, #6]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d101      	bne.n	8002952 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800294e:	2301      	movs	r3, #1
 8002950:	e075      	b.n	8002a3e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002958:	2b01      	cmp	r3, #1
 800295a:	d101      	bne.n	8002960 <HAL_UART_Transmit+0x3e>
 800295c:	2302      	movs	r3, #2
 800295e:	e06e      	b.n	8002a3e <HAL_UART_Transmit+0x11c>
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	2201      	movs	r2, #1
 8002964:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	2200      	movs	r2, #0
 800296c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	2221      	movs	r2, #33	; 0x21
 8002972:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002976:	f7fe f821 	bl	80009bc <HAL_GetTick>
 800297a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	88fa      	ldrh	r2, [r7, #6]
 8002980:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	88fa      	ldrh	r2, [r7, #6]
 8002986:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002990:	d108      	bne.n	80029a4 <HAL_UART_Transmit+0x82>
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	691b      	ldr	r3, [r3, #16]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d104      	bne.n	80029a4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800299a:	2300      	movs	r3, #0
 800299c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800299e:	68bb      	ldr	r3, [r7, #8]
 80029a0:	61bb      	str	r3, [r7, #24]
 80029a2:	e003      	b.n	80029ac <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80029a8:	2300      	movs	r3, #0
 80029aa:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	2200      	movs	r2, #0
 80029b0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80029b4:	e02a      	b.n	8002a0c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	9300      	str	r3, [sp, #0]
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	2200      	movs	r2, #0
 80029be:	2180      	movs	r1, #128	; 0x80
 80029c0:	68f8      	ldr	r0, [r7, #12]
 80029c2:	f000 f840 	bl	8002a46 <UART_WaitOnFlagUntilTimeout>
 80029c6:	4603      	mov	r3, r0
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d001      	beq.n	80029d0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80029cc:	2303      	movs	r3, #3
 80029ce:	e036      	b.n	8002a3e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80029d0:	69fb      	ldr	r3, [r7, #28]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d10b      	bne.n	80029ee <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80029d6:	69bb      	ldr	r3, [r7, #24]
 80029d8:	881b      	ldrh	r3, [r3, #0]
 80029da:	461a      	mov	r2, r3
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80029e4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80029e6:	69bb      	ldr	r3, [r7, #24]
 80029e8:	3302      	adds	r3, #2
 80029ea:	61bb      	str	r3, [r7, #24]
 80029ec:	e007      	b.n	80029fe <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80029ee:	69fb      	ldr	r3, [r7, #28]
 80029f0:	781a      	ldrb	r2, [r3, #0]
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80029f8:	69fb      	ldr	r3, [r7, #28]
 80029fa:	3301      	adds	r3, #1
 80029fc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002a02:	b29b      	uxth	r3, r3
 8002a04:	3b01      	subs	r3, #1
 8002a06:	b29a      	uxth	r2, r3
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002a10:	b29b      	uxth	r3, r3
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d1cf      	bne.n	80029b6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	9300      	str	r3, [sp, #0]
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	2140      	movs	r1, #64	; 0x40
 8002a20:	68f8      	ldr	r0, [r7, #12]
 8002a22:	f000 f810 	bl	8002a46 <UART_WaitOnFlagUntilTimeout>
 8002a26:	4603      	mov	r3, r0
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d001      	beq.n	8002a30 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002a2c:	2303      	movs	r3, #3
 8002a2e:	e006      	b.n	8002a3e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	2220      	movs	r2, #32
 8002a34:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	e000      	b.n	8002a3e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002a3c:	2302      	movs	r3, #2
  }
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	3720      	adds	r7, #32
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}

08002a46 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002a46:	b580      	push	{r7, lr}
 8002a48:	b084      	sub	sp, #16
 8002a4a:	af00      	add	r7, sp, #0
 8002a4c:	60f8      	str	r0, [r7, #12]
 8002a4e:	60b9      	str	r1, [r7, #8]
 8002a50:	603b      	str	r3, [r7, #0]
 8002a52:	4613      	mov	r3, r2
 8002a54:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a56:	e02c      	b.n	8002ab2 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a58:	69bb      	ldr	r3, [r7, #24]
 8002a5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a5e:	d028      	beq.n	8002ab2 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002a60:	69bb      	ldr	r3, [r7, #24]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d007      	beq.n	8002a76 <UART_WaitOnFlagUntilTimeout+0x30>
 8002a66:	f7fd ffa9 	bl	80009bc <HAL_GetTick>
 8002a6a:	4602      	mov	r2, r0
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	1ad3      	subs	r3, r2, r3
 8002a70:	69ba      	ldr	r2, [r7, #24]
 8002a72:	429a      	cmp	r2, r3
 8002a74:	d21d      	bcs.n	8002ab2 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	68da      	ldr	r2, [r3, #12]
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002a84:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	695a      	ldr	r2, [r3, #20]
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f022 0201 	bic.w	r2, r2, #1
 8002a94:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	2220      	movs	r2, #32
 8002a9a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	2220      	movs	r2, #32
 8002aa2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002aae:	2303      	movs	r3, #3
 8002ab0:	e00f      	b.n	8002ad2 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	681a      	ldr	r2, [r3, #0]
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	4013      	ands	r3, r2
 8002abc:	68ba      	ldr	r2, [r7, #8]
 8002abe:	429a      	cmp	r2, r3
 8002ac0:	bf0c      	ite	eq
 8002ac2:	2301      	moveq	r3, #1
 8002ac4:	2300      	movne	r3, #0
 8002ac6:	b2db      	uxtb	r3, r3
 8002ac8:	461a      	mov	r2, r3
 8002aca:	79fb      	ldrb	r3, [r7, #7]
 8002acc:	429a      	cmp	r2, r3
 8002ace:	d0c3      	beq.n	8002a58 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002ad0:	2300      	movs	r3, #0
}
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	3710      	adds	r7, #16
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd80      	pop	{r7, pc}
	...

08002adc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b084      	sub	sp, #16
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	691b      	ldr	r3, [r3, #16]
 8002aea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	68da      	ldr	r2, [r3, #12]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	430a      	orrs	r2, r1
 8002af8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	689a      	ldr	r2, [r3, #8]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	691b      	ldr	r3, [r3, #16]
 8002b02:	431a      	orrs	r2, r3
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	695b      	ldr	r3, [r3, #20]
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	68db      	ldr	r3, [r3, #12]
 8002b12:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002b16:	f023 030c 	bic.w	r3, r3, #12
 8002b1a:	687a      	ldr	r2, [r7, #4]
 8002b1c:	6812      	ldr	r2, [r2, #0]
 8002b1e:	68b9      	ldr	r1, [r7, #8]
 8002b20:	430b      	orrs	r3, r1
 8002b22:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	695b      	ldr	r3, [r3, #20]
 8002b2a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	699a      	ldr	r2, [r3, #24]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	430a      	orrs	r2, r1
 8002b38:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a2c      	ldr	r2, [pc, #176]	; (8002bf0 <UART_SetConfig+0x114>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d103      	bne.n	8002b4c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002b44:	f7ff fe6e 	bl	8002824 <HAL_RCC_GetPCLK2Freq>
 8002b48:	60f8      	str	r0, [r7, #12]
 8002b4a:	e002      	b.n	8002b52 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002b4c:	f7ff fe56 	bl	80027fc <HAL_RCC_GetPCLK1Freq>
 8002b50:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002b52:	68fa      	ldr	r2, [r7, #12]
 8002b54:	4613      	mov	r3, r2
 8002b56:	009b      	lsls	r3, r3, #2
 8002b58:	4413      	add	r3, r2
 8002b5a:	009a      	lsls	r2, r3, #2
 8002b5c:	441a      	add	r2, r3
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	009b      	lsls	r3, r3, #2
 8002b64:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b68:	4a22      	ldr	r2, [pc, #136]	; (8002bf4 <UART_SetConfig+0x118>)
 8002b6a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b6e:	095b      	lsrs	r3, r3, #5
 8002b70:	0119      	lsls	r1, r3, #4
 8002b72:	68fa      	ldr	r2, [r7, #12]
 8002b74:	4613      	mov	r3, r2
 8002b76:	009b      	lsls	r3, r3, #2
 8002b78:	4413      	add	r3, r2
 8002b7a:	009a      	lsls	r2, r3, #2
 8002b7c:	441a      	add	r2, r3
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	009b      	lsls	r3, r3, #2
 8002b84:	fbb2 f2f3 	udiv	r2, r2, r3
 8002b88:	4b1a      	ldr	r3, [pc, #104]	; (8002bf4 <UART_SetConfig+0x118>)
 8002b8a:	fba3 0302 	umull	r0, r3, r3, r2
 8002b8e:	095b      	lsrs	r3, r3, #5
 8002b90:	2064      	movs	r0, #100	; 0x64
 8002b92:	fb00 f303 	mul.w	r3, r0, r3
 8002b96:	1ad3      	subs	r3, r2, r3
 8002b98:	011b      	lsls	r3, r3, #4
 8002b9a:	3332      	adds	r3, #50	; 0x32
 8002b9c:	4a15      	ldr	r2, [pc, #84]	; (8002bf4 <UART_SetConfig+0x118>)
 8002b9e:	fba2 2303 	umull	r2, r3, r2, r3
 8002ba2:	095b      	lsrs	r3, r3, #5
 8002ba4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ba8:	4419      	add	r1, r3
 8002baa:	68fa      	ldr	r2, [r7, #12]
 8002bac:	4613      	mov	r3, r2
 8002bae:	009b      	lsls	r3, r3, #2
 8002bb0:	4413      	add	r3, r2
 8002bb2:	009a      	lsls	r2, r3, #2
 8002bb4:	441a      	add	r2, r3
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	009b      	lsls	r3, r3, #2
 8002bbc:	fbb2 f2f3 	udiv	r2, r2, r3
 8002bc0:	4b0c      	ldr	r3, [pc, #48]	; (8002bf4 <UART_SetConfig+0x118>)
 8002bc2:	fba3 0302 	umull	r0, r3, r3, r2
 8002bc6:	095b      	lsrs	r3, r3, #5
 8002bc8:	2064      	movs	r0, #100	; 0x64
 8002bca:	fb00 f303 	mul.w	r3, r0, r3
 8002bce:	1ad3      	subs	r3, r2, r3
 8002bd0:	011b      	lsls	r3, r3, #4
 8002bd2:	3332      	adds	r3, #50	; 0x32
 8002bd4:	4a07      	ldr	r2, [pc, #28]	; (8002bf4 <UART_SetConfig+0x118>)
 8002bd6:	fba2 2303 	umull	r2, r3, r2, r3
 8002bda:	095b      	lsrs	r3, r3, #5
 8002bdc:	f003 020f 	and.w	r2, r3, #15
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	440a      	add	r2, r1
 8002be6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002be8:	bf00      	nop
 8002bea:	3710      	adds	r7, #16
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}
 8002bf0:	40013800 	.word	0x40013800
 8002bf4:	51eb851f 	.word	0x51eb851f

08002bf8 <__errno>:
 8002bf8:	4b01      	ldr	r3, [pc, #4]	; (8002c00 <__errno+0x8>)
 8002bfa:	6818      	ldr	r0, [r3, #0]
 8002bfc:	4770      	bx	lr
 8002bfe:	bf00      	nop
 8002c00:	2000000c 	.word	0x2000000c

08002c04 <__libc_init_array>:
 8002c04:	b570      	push	{r4, r5, r6, lr}
 8002c06:	2500      	movs	r5, #0
 8002c08:	4e0c      	ldr	r6, [pc, #48]	; (8002c3c <__libc_init_array+0x38>)
 8002c0a:	4c0d      	ldr	r4, [pc, #52]	; (8002c40 <__libc_init_array+0x3c>)
 8002c0c:	1ba4      	subs	r4, r4, r6
 8002c0e:	10a4      	asrs	r4, r4, #2
 8002c10:	42a5      	cmp	r5, r4
 8002c12:	d109      	bne.n	8002c28 <__libc_init_array+0x24>
 8002c14:	f000 fc36 	bl	8003484 <_init>
 8002c18:	2500      	movs	r5, #0
 8002c1a:	4e0a      	ldr	r6, [pc, #40]	; (8002c44 <__libc_init_array+0x40>)
 8002c1c:	4c0a      	ldr	r4, [pc, #40]	; (8002c48 <__libc_init_array+0x44>)
 8002c1e:	1ba4      	subs	r4, r4, r6
 8002c20:	10a4      	asrs	r4, r4, #2
 8002c22:	42a5      	cmp	r5, r4
 8002c24:	d105      	bne.n	8002c32 <__libc_init_array+0x2e>
 8002c26:	bd70      	pop	{r4, r5, r6, pc}
 8002c28:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002c2c:	4798      	blx	r3
 8002c2e:	3501      	adds	r5, #1
 8002c30:	e7ee      	b.n	8002c10 <__libc_init_array+0xc>
 8002c32:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002c36:	4798      	blx	r3
 8002c38:	3501      	adds	r5, #1
 8002c3a:	e7f2      	b.n	8002c22 <__libc_init_array+0x1e>
 8002c3c:	08003608 	.word	0x08003608
 8002c40:	08003608 	.word	0x08003608
 8002c44:	08003608 	.word	0x08003608
 8002c48:	0800360c 	.word	0x0800360c

08002c4c <memcpy>:
 8002c4c:	b510      	push	{r4, lr}
 8002c4e:	1e43      	subs	r3, r0, #1
 8002c50:	440a      	add	r2, r1
 8002c52:	4291      	cmp	r1, r2
 8002c54:	d100      	bne.n	8002c58 <memcpy+0xc>
 8002c56:	bd10      	pop	{r4, pc}
 8002c58:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002c5c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002c60:	e7f7      	b.n	8002c52 <memcpy+0x6>

08002c62 <memset>:
 8002c62:	4603      	mov	r3, r0
 8002c64:	4402      	add	r2, r0
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d100      	bne.n	8002c6c <memset+0xa>
 8002c6a:	4770      	bx	lr
 8002c6c:	f803 1b01 	strb.w	r1, [r3], #1
 8002c70:	e7f9      	b.n	8002c66 <memset+0x4>
	...

08002c74 <_vsiprintf_r>:
 8002c74:	b500      	push	{lr}
 8002c76:	b09b      	sub	sp, #108	; 0x6c
 8002c78:	9100      	str	r1, [sp, #0]
 8002c7a:	9104      	str	r1, [sp, #16]
 8002c7c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002c80:	9105      	str	r1, [sp, #20]
 8002c82:	9102      	str	r1, [sp, #8]
 8002c84:	4905      	ldr	r1, [pc, #20]	; (8002c9c <_vsiprintf_r+0x28>)
 8002c86:	9103      	str	r1, [sp, #12]
 8002c88:	4669      	mov	r1, sp
 8002c8a:	f000 f86d 	bl	8002d68 <_svfiprintf_r>
 8002c8e:	2200      	movs	r2, #0
 8002c90:	9b00      	ldr	r3, [sp, #0]
 8002c92:	701a      	strb	r2, [r3, #0]
 8002c94:	b01b      	add	sp, #108	; 0x6c
 8002c96:	f85d fb04 	ldr.w	pc, [sp], #4
 8002c9a:	bf00      	nop
 8002c9c:	ffff0208 	.word	0xffff0208

08002ca0 <vsiprintf>:
 8002ca0:	4613      	mov	r3, r2
 8002ca2:	460a      	mov	r2, r1
 8002ca4:	4601      	mov	r1, r0
 8002ca6:	4802      	ldr	r0, [pc, #8]	; (8002cb0 <vsiprintf+0x10>)
 8002ca8:	6800      	ldr	r0, [r0, #0]
 8002caa:	f7ff bfe3 	b.w	8002c74 <_vsiprintf_r>
 8002cae:	bf00      	nop
 8002cb0:	2000000c 	.word	0x2000000c

08002cb4 <__ssputs_r>:
 8002cb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002cb8:	688e      	ldr	r6, [r1, #8]
 8002cba:	4682      	mov	sl, r0
 8002cbc:	429e      	cmp	r6, r3
 8002cbe:	460c      	mov	r4, r1
 8002cc0:	4690      	mov	r8, r2
 8002cc2:	4699      	mov	r9, r3
 8002cc4:	d837      	bhi.n	8002d36 <__ssputs_r+0x82>
 8002cc6:	898a      	ldrh	r2, [r1, #12]
 8002cc8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002ccc:	d031      	beq.n	8002d32 <__ssputs_r+0x7e>
 8002cce:	2302      	movs	r3, #2
 8002cd0:	6825      	ldr	r5, [r4, #0]
 8002cd2:	6909      	ldr	r1, [r1, #16]
 8002cd4:	1a6f      	subs	r7, r5, r1
 8002cd6:	6965      	ldr	r5, [r4, #20]
 8002cd8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002cdc:	fb95 f5f3 	sdiv	r5, r5, r3
 8002ce0:	f109 0301 	add.w	r3, r9, #1
 8002ce4:	443b      	add	r3, r7
 8002ce6:	429d      	cmp	r5, r3
 8002ce8:	bf38      	it	cc
 8002cea:	461d      	movcc	r5, r3
 8002cec:	0553      	lsls	r3, r2, #21
 8002cee:	d530      	bpl.n	8002d52 <__ssputs_r+0x9e>
 8002cf0:	4629      	mov	r1, r5
 8002cf2:	f000 fb2d 	bl	8003350 <_malloc_r>
 8002cf6:	4606      	mov	r6, r0
 8002cf8:	b950      	cbnz	r0, 8002d10 <__ssputs_r+0x5c>
 8002cfa:	230c      	movs	r3, #12
 8002cfc:	f04f 30ff 	mov.w	r0, #4294967295
 8002d00:	f8ca 3000 	str.w	r3, [sl]
 8002d04:	89a3      	ldrh	r3, [r4, #12]
 8002d06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d0a:	81a3      	strh	r3, [r4, #12]
 8002d0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002d10:	463a      	mov	r2, r7
 8002d12:	6921      	ldr	r1, [r4, #16]
 8002d14:	f7ff ff9a 	bl	8002c4c <memcpy>
 8002d18:	89a3      	ldrh	r3, [r4, #12]
 8002d1a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002d1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d22:	81a3      	strh	r3, [r4, #12]
 8002d24:	6126      	str	r6, [r4, #16]
 8002d26:	443e      	add	r6, r7
 8002d28:	6026      	str	r6, [r4, #0]
 8002d2a:	464e      	mov	r6, r9
 8002d2c:	6165      	str	r5, [r4, #20]
 8002d2e:	1bed      	subs	r5, r5, r7
 8002d30:	60a5      	str	r5, [r4, #8]
 8002d32:	454e      	cmp	r6, r9
 8002d34:	d900      	bls.n	8002d38 <__ssputs_r+0x84>
 8002d36:	464e      	mov	r6, r9
 8002d38:	4632      	mov	r2, r6
 8002d3a:	4641      	mov	r1, r8
 8002d3c:	6820      	ldr	r0, [r4, #0]
 8002d3e:	f000 faa1 	bl	8003284 <memmove>
 8002d42:	68a3      	ldr	r3, [r4, #8]
 8002d44:	2000      	movs	r0, #0
 8002d46:	1b9b      	subs	r3, r3, r6
 8002d48:	60a3      	str	r3, [r4, #8]
 8002d4a:	6823      	ldr	r3, [r4, #0]
 8002d4c:	441e      	add	r6, r3
 8002d4e:	6026      	str	r6, [r4, #0]
 8002d50:	e7dc      	b.n	8002d0c <__ssputs_r+0x58>
 8002d52:	462a      	mov	r2, r5
 8002d54:	f000 fb56 	bl	8003404 <_realloc_r>
 8002d58:	4606      	mov	r6, r0
 8002d5a:	2800      	cmp	r0, #0
 8002d5c:	d1e2      	bne.n	8002d24 <__ssputs_r+0x70>
 8002d5e:	6921      	ldr	r1, [r4, #16]
 8002d60:	4650      	mov	r0, sl
 8002d62:	f000 faa9 	bl	80032b8 <_free_r>
 8002d66:	e7c8      	b.n	8002cfa <__ssputs_r+0x46>

08002d68 <_svfiprintf_r>:
 8002d68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d6c:	461d      	mov	r5, r3
 8002d6e:	898b      	ldrh	r3, [r1, #12]
 8002d70:	b09d      	sub	sp, #116	; 0x74
 8002d72:	061f      	lsls	r7, r3, #24
 8002d74:	4680      	mov	r8, r0
 8002d76:	460c      	mov	r4, r1
 8002d78:	4616      	mov	r6, r2
 8002d7a:	d50f      	bpl.n	8002d9c <_svfiprintf_r+0x34>
 8002d7c:	690b      	ldr	r3, [r1, #16]
 8002d7e:	b96b      	cbnz	r3, 8002d9c <_svfiprintf_r+0x34>
 8002d80:	2140      	movs	r1, #64	; 0x40
 8002d82:	f000 fae5 	bl	8003350 <_malloc_r>
 8002d86:	6020      	str	r0, [r4, #0]
 8002d88:	6120      	str	r0, [r4, #16]
 8002d8a:	b928      	cbnz	r0, 8002d98 <_svfiprintf_r+0x30>
 8002d8c:	230c      	movs	r3, #12
 8002d8e:	f8c8 3000 	str.w	r3, [r8]
 8002d92:	f04f 30ff 	mov.w	r0, #4294967295
 8002d96:	e0c8      	b.n	8002f2a <_svfiprintf_r+0x1c2>
 8002d98:	2340      	movs	r3, #64	; 0x40
 8002d9a:	6163      	str	r3, [r4, #20]
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	9309      	str	r3, [sp, #36]	; 0x24
 8002da0:	2320      	movs	r3, #32
 8002da2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002da6:	2330      	movs	r3, #48	; 0x30
 8002da8:	f04f 0b01 	mov.w	fp, #1
 8002dac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002db0:	9503      	str	r5, [sp, #12]
 8002db2:	4637      	mov	r7, r6
 8002db4:	463d      	mov	r5, r7
 8002db6:	f815 3b01 	ldrb.w	r3, [r5], #1
 8002dba:	b10b      	cbz	r3, 8002dc0 <_svfiprintf_r+0x58>
 8002dbc:	2b25      	cmp	r3, #37	; 0x25
 8002dbe:	d13e      	bne.n	8002e3e <_svfiprintf_r+0xd6>
 8002dc0:	ebb7 0a06 	subs.w	sl, r7, r6
 8002dc4:	d00b      	beq.n	8002dde <_svfiprintf_r+0x76>
 8002dc6:	4653      	mov	r3, sl
 8002dc8:	4632      	mov	r2, r6
 8002dca:	4621      	mov	r1, r4
 8002dcc:	4640      	mov	r0, r8
 8002dce:	f7ff ff71 	bl	8002cb4 <__ssputs_r>
 8002dd2:	3001      	adds	r0, #1
 8002dd4:	f000 80a4 	beq.w	8002f20 <_svfiprintf_r+0x1b8>
 8002dd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002dda:	4453      	add	r3, sl
 8002ddc:	9309      	str	r3, [sp, #36]	; 0x24
 8002dde:	783b      	ldrb	r3, [r7, #0]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	f000 809d 	beq.w	8002f20 <_svfiprintf_r+0x1b8>
 8002de6:	2300      	movs	r3, #0
 8002de8:	f04f 32ff 	mov.w	r2, #4294967295
 8002dec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002df0:	9304      	str	r3, [sp, #16]
 8002df2:	9307      	str	r3, [sp, #28]
 8002df4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002df8:	931a      	str	r3, [sp, #104]	; 0x68
 8002dfa:	462f      	mov	r7, r5
 8002dfc:	2205      	movs	r2, #5
 8002dfe:	f817 1b01 	ldrb.w	r1, [r7], #1
 8002e02:	4850      	ldr	r0, [pc, #320]	; (8002f44 <_svfiprintf_r+0x1dc>)
 8002e04:	f000 fa30 	bl	8003268 <memchr>
 8002e08:	9b04      	ldr	r3, [sp, #16]
 8002e0a:	b9d0      	cbnz	r0, 8002e42 <_svfiprintf_r+0xda>
 8002e0c:	06d9      	lsls	r1, r3, #27
 8002e0e:	bf44      	itt	mi
 8002e10:	2220      	movmi	r2, #32
 8002e12:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002e16:	071a      	lsls	r2, r3, #28
 8002e18:	bf44      	itt	mi
 8002e1a:	222b      	movmi	r2, #43	; 0x2b
 8002e1c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002e20:	782a      	ldrb	r2, [r5, #0]
 8002e22:	2a2a      	cmp	r2, #42	; 0x2a
 8002e24:	d015      	beq.n	8002e52 <_svfiprintf_r+0xea>
 8002e26:	462f      	mov	r7, r5
 8002e28:	2000      	movs	r0, #0
 8002e2a:	250a      	movs	r5, #10
 8002e2c:	9a07      	ldr	r2, [sp, #28]
 8002e2e:	4639      	mov	r1, r7
 8002e30:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002e34:	3b30      	subs	r3, #48	; 0x30
 8002e36:	2b09      	cmp	r3, #9
 8002e38:	d94d      	bls.n	8002ed6 <_svfiprintf_r+0x16e>
 8002e3a:	b1b8      	cbz	r0, 8002e6c <_svfiprintf_r+0x104>
 8002e3c:	e00f      	b.n	8002e5e <_svfiprintf_r+0xf6>
 8002e3e:	462f      	mov	r7, r5
 8002e40:	e7b8      	b.n	8002db4 <_svfiprintf_r+0x4c>
 8002e42:	4a40      	ldr	r2, [pc, #256]	; (8002f44 <_svfiprintf_r+0x1dc>)
 8002e44:	463d      	mov	r5, r7
 8002e46:	1a80      	subs	r0, r0, r2
 8002e48:	fa0b f000 	lsl.w	r0, fp, r0
 8002e4c:	4318      	orrs	r0, r3
 8002e4e:	9004      	str	r0, [sp, #16]
 8002e50:	e7d3      	b.n	8002dfa <_svfiprintf_r+0x92>
 8002e52:	9a03      	ldr	r2, [sp, #12]
 8002e54:	1d11      	adds	r1, r2, #4
 8002e56:	6812      	ldr	r2, [r2, #0]
 8002e58:	9103      	str	r1, [sp, #12]
 8002e5a:	2a00      	cmp	r2, #0
 8002e5c:	db01      	blt.n	8002e62 <_svfiprintf_r+0xfa>
 8002e5e:	9207      	str	r2, [sp, #28]
 8002e60:	e004      	b.n	8002e6c <_svfiprintf_r+0x104>
 8002e62:	4252      	negs	r2, r2
 8002e64:	f043 0302 	orr.w	r3, r3, #2
 8002e68:	9207      	str	r2, [sp, #28]
 8002e6a:	9304      	str	r3, [sp, #16]
 8002e6c:	783b      	ldrb	r3, [r7, #0]
 8002e6e:	2b2e      	cmp	r3, #46	; 0x2e
 8002e70:	d10c      	bne.n	8002e8c <_svfiprintf_r+0x124>
 8002e72:	787b      	ldrb	r3, [r7, #1]
 8002e74:	2b2a      	cmp	r3, #42	; 0x2a
 8002e76:	d133      	bne.n	8002ee0 <_svfiprintf_r+0x178>
 8002e78:	9b03      	ldr	r3, [sp, #12]
 8002e7a:	3702      	adds	r7, #2
 8002e7c:	1d1a      	adds	r2, r3, #4
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	9203      	str	r2, [sp, #12]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	bfb8      	it	lt
 8002e86:	f04f 33ff 	movlt.w	r3, #4294967295
 8002e8a:	9305      	str	r3, [sp, #20]
 8002e8c:	4d2e      	ldr	r5, [pc, #184]	; (8002f48 <_svfiprintf_r+0x1e0>)
 8002e8e:	2203      	movs	r2, #3
 8002e90:	7839      	ldrb	r1, [r7, #0]
 8002e92:	4628      	mov	r0, r5
 8002e94:	f000 f9e8 	bl	8003268 <memchr>
 8002e98:	b138      	cbz	r0, 8002eaa <_svfiprintf_r+0x142>
 8002e9a:	2340      	movs	r3, #64	; 0x40
 8002e9c:	1b40      	subs	r0, r0, r5
 8002e9e:	fa03 f000 	lsl.w	r0, r3, r0
 8002ea2:	9b04      	ldr	r3, [sp, #16]
 8002ea4:	3701      	adds	r7, #1
 8002ea6:	4303      	orrs	r3, r0
 8002ea8:	9304      	str	r3, [sp, #16]
 8002eaa:	7839      	ldrb	r1, [r7, #0]
 8002eac:	2206      	movs	r2, #6
 8002eae:	4827      	ldr	r0, [pc, #156]	; (8002f4c <_svfiprintf_r+0x1e4>)
 8002eb0:	1c7e      	adds	r6, r7, #1
 8002eb2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002eb6:	f000 f9d7 	bl	8003268 <memchr>
 8002eba:	2800      	cmp	r0, #0
 8002ebc:	d038      	beq.n	8002f30 <_svfiprintf_r+0x1c8>
 8002ebe:	4b24      	ldr	r3, [pc, #144]	; (8002f50 <_svfiprintf_r+0x1e8>)
 8002ec0:	bb13      	cbnz	r3, 8002f08 <_svfiprintf_r+0x1a0>
 8002ec2:	9b03      	ldr	r3, [sp, #12]
 8002ec4:	3307      	adds	r3, #7
 8002ec6:	f023 0307 	bic.w	r3, r3, #7
 8002eca:	3308      	adds	r3, #8
 8002ecc:	9303      	str	r3, [sp, #12]
 8002ece:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002ed0:	444b      	add	r3, r9
 8002ed2:	9309      	str	r3, [sp, #36]	; 0x24
 8002ed4:	e76d      	b.n	8002db2 <_svfiprintf_r+0x4a>
 8002ed6:	fb05 3202 	mla	r2, r5, r2, r3
 8002eda:	2001      	movs	r0, #1
 8002edc:	460f      	mov	r7, r1
 8002ede:	e7a6      	b.n	8002e2e <_svfiprintf_r+0xc6>
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	250a      	movs	r5, #10
 8002ee4:	4619      	mov	r1, r3
 8002ee6:	3701      	adds	r7, #1
 8002ee8:	9305      	str	r3, [sp, #20]
 8002eea:	4638      	mov	r0, r7
 8002eec:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002ef0:	3a30      	subs	r2, #48	; 0x30
 8002ef2:	2a09      	cmp	r2, #9
 8002ef4:	d903      	bls.n	8002efe <_svfiprintf_r+0x196>
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d0c8      	beq.n	8002e8c <_svfiprintf_r+0x124>
 8002efa:	9105      	str	r1, [sp, #20]
 8002efc:	e7c6      	b.n	8002e8c <_svfiprintf_r+0x124>
 8002efe:	fb05 2101 	mla	r1, r5, r1, r2
 8002f02:	2301      	movs	r3, #1
 8002f04:	4607      	mov	r7, r0
 8002f06:	e7f0      	b.n	8002eea <_svfiprintf_r+0x182>
 8002f08:	ab03      	add	r3, sp, #12
 8002f0a:	9300      	str	r3, [sp, #0]
 8002f0c:	4622      	mov	r2, r4
 8002f0e:	4b11      	ldr	r3, [pc, #68]	; (8002f54 <_svfiprintf_r+0x1ec>)
 8002f10:	a904      	add	r1, sp, #16
 8002f12:	4640      	mov	r0, r8
 8002f14:	f3af 8000 	nop.w
 8002f18:	f1b0 3fff 	cmp.w	r0, #4294967295
 8002f1c:	4681      	mov	r9, r0
 8002f1e:	d1d6      	bne.n	8002ece <_svfiprintf_r+0x166>
 8002f20:	89a3      	ldrh	r3, [r4, #12]
 8002f22:	065b      	lsls	r3, r3, #25
 8002f24:	f53f af35 	bmi.w	8002d92 <_svfiprintf_r+0x2a>
 8002f28:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002f2a:	b01d      	add	sp, #116	; 0x74
 8002f2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002f30:	ab03      	add	r3, sp, #12
 8002f32:	9300      	str	r3, [sp, #0]
 8002f34:	4622      	mov	r2, r4
 8002f36:	4b07      	ldr	r3, [pc, #28]	; (8002f54 <_svfiprintf_r+0x1ec>)
 8002f38:	a904      	add	r1, sp, #16
 8002f3a:	4640      	mov	r0, r8
 8002f3c:	f000 f882 	bl	8003044 <_printf_i>
 8002f40:	e7ea      	b.n	8002f18 <_svfiprintf_r+0x1b0>
 8002f42:	bf00      	nop
 8002f44:	080035d4 	.word	0x080035d4
 8002f48:	080035da 	.word	0x080035da
 8002f4c:	080035de 	.word	0x080035de
 8002f50:	00000000 	.word	0x00000000
 8002f54:	08002cb5 	.word	0x08002cb5

08002f58 <_printf_common>:
 8002f58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002f5c:	4691      	mov	r9, r2
 8002f5e:	461f      	mov	r7, r3
 8002f60:	688a      	ldr	r2, [r1, #8]
 8002f62:	690b      	ldr	r3, [r1, #16]
 8002f64:	4606      	mov	r6, r0
 8002f66:	4293      	cmp	r3, r2
 8002f68:	bfb8      	it	lt
 8002f6a:	4613      	movlt	r3, r2
 8002f6c:	f8c9 3000 	str.w	r3, [r9]
 8002f70:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002f74:	460c      	mov	r4, r1
 8002f76:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002f7a:	b112      	cbz	r2, 8002f82 <_printf_common+0x2a>
 8002f7c:	3301      	adds	r3, #1
 8002f7e:	f8c9 3000 	str.w	r3, [r9]
 8002f82:	6823      	ldr	r3, [r4, #0]
 8002f84:	0699      	lsls	r1, r3, #26
 8002f86:	bf42      	ittt	mi
 8002f88:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002f8c:	3302      	addmi	r3, #2
 8002f8e:	f8c9 3000 	strmi.w	r3, [r9]
 8002f92:	6825      	ldr	r5, [r4, #0]
 8002f94:	f015 0506 	ands.w	r5, r5, #6
 8002f98:	d107      	bne.n	8002faa <_printf_common+0x52>
 8002f9a:	f104 0a19 	add.w	sl, r4, #25
 8002f9e:	68e3      	ldr	r3, [r4, #12]
 8002fa0:	f8d9 2000 	ldr.w	r2, [r9]
 8002fa4:	1a9b      	subs	r3, r3, r2
 8002fa6:	42ab      	cmp	r3, r5
 8002fa8:	dc29      	bgt.n	8002ffe <_printf_common+0xa6>
 8002faa:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8002fae:	6822      	ldr	r2, [r4, #0]
 8002fb0:	3300      	adds	r3, #0
 8002fb2:	bf18      	it	ne
 8002fb4:	2301      	movne	r3, #1
 8002fb6:	0692      	lsls	r2, r2, #26
 8002fb8:	d42e      	bmi.n	8003018 <_printf_common+0xc0>
 8002fba:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002fbe:	4639      	mov	r1, r7
 8002fc0:	4630      	mov	r0, r6
 8002fc2:	47c0      	blx	r8
 8002fc4:	3001      	adds	r0, #1
 8002fc6:	d021      	beq.n	800300c <_printf_common+0xb4>
 8002fc8:	6823      	ldr	r3, [r4, #0]
 8002fca:	68e5      	ldr	r5, [r4, #12]
 8002fcc:	f003 0306 	and.w	r3, r3, #6
 8002fd0:	2b04      	cmp	r3, #4
 8002fd2:	bf18      	it	ne
 8002fd4:	2500      	movne	r5, #0
 8002fd6:	f8d9 2000 	ldr.w	r2, [r9]
 8002fda:	f04f 0900 	mov.w	r9, #0
 8002fde:	bf08      	it	eq
 8002fe0:	1aad      	subeq	r5, r5, r2
 8002fe2:	68a3      	ldr	r3, [r4, #8]
 8002fe4:	6922      	ldr	r2, [r4, #16]
 8002fe6:	bf08      	it	eq
 8002fe8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002fec:	4293      	cmp	r3, r2
 8002fee:	bfc4      	itt	gt
 8002ff0:	1a9b      	subgt	r3, r3, r2
 8002ff2:	18ed      	addgt	r5, r5, r3
 8002ff4:	341a      	adds	r4, #26
 8002ff6:	454d      	cmp	r5, r9
 8002ff8:	d11a      	bne.n	8003030 <_printf_common+0xd8>
 8002ffa:	2000      	movs	r0, #0
 8002ffc:	e008      	b.n	8003010 <_printf_common+0xb8>
 8002ffe:	2301      	movs	r3, #1
 8003000:	4652      	mov	r2, sl
 8003002:	4639      	mov	r1, r7
 8003004:	4630      	mov	r0, r6
 8003006:	47c0      	blx	r8
 8003008:	3001      	adds	r0, #1
 800300a:	d103      	bne.n	8003014 <_printf_common+0xbc>
 800300c:	f04f 30ff 	mov.w	r0, #4294967295
 8003010:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003014:	3501      	adds	r5, #1
 8003016:	e7c2      	b.n	8002f9e <_printf_common+0x46>
 8003018:	2030      	movs	r0, #48	; 0x30
 800301a:	18e1      	adds	r1, r4, r3
 800301c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003020:	1c5a      	adds	r2, r3, #1
 8003022:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003026:	4422      	add	r2, r4
 8003028:	3302      	adds	r3, #2
 800302a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800302e:	e7c4      	b.n	8002fba <_printf_common+0x62>
 8003030:	2301      	movs	r3, #1
 8003032:	4622      	mov	r2, r4
 8003034:	4639      	mov	r1, r7
 8003036:	4630      	mov	r0, r6
 8003038:	47c0      	blx	r8
 800303a:	3001      	adds	r0, #1
 800303c:	d0e6      	beq.n	800300c <_printf_common+0xb4>
 800303e:	f109 0901 	add.w	r9, r9, #1
 8003042:	e7d8      	b.n	8002ff6 <_printf_common+0x9e>

08003044 <_printf_i>:
 8003044:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003048:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800304c:	460c      	mov	r4, r1
 800304e:	7e09      	ldrb	r1, [r1, #24]
 8003050:	b085      	sub	sp, #20
 8003052:	296e      	cmp	r1, #110	; 0x6e
 8003054:	4617      	mov	r7, r2
 8003056:	4606      	mov	r6, r0
 8003058:	4698      	mov	r8, r3
 800305a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800305c:	f000 80b3 	beq.w	80031c6 <_printf_i+0x182>
 8003060:	d822      	bhi.n	80030a8 <_printf_i+0x64>
 8003062:	2963      	cmp	r1, #99	; 0x63
 8003064:	d036      	beq.n	80030d4 <_printf_i+0x90>
 8003066:	d80a      	bhi.n	800307e <_printf_i+0x3a>
 8003068:	2900      	cmp	r1, #0
 800306a:	f000 80b9 	beq.w	80031e0 <_printf_i+0x19c>
 800306e:	2958      	cmp	r1, #88	; 0x58
 8003070:	f000 8083 	beq.w	800317a <_printf_i+0x136>
 8003074:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003078:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800307c:	e032      	b.n	80030e4 <_printf_i+0xa0>
 800307e:	2964      	cmp	r1, #100	; 0x64
 8003080:	d001      	beq.n	8003086 <_printf_i+0x42>
 8003082:	2969      	cmp	r1, #105	; 0x69
 8003084:	d1f6      	bne.n	8003074 <_printf_i+0x30>
 8003086:	6820      	ldr	r0, [r4, #0]
 8003088:	6813      	ldr	r3, [r2, #0]
 800308a:	0605      	lsls	r5, r0, #24
 800308c:	f103 0104 	add.w	r1, r3, #4
 8003090:	d52a      	bpl.n	80030e8 <_printf_i+0xa4>
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	6011      	str	r1, [r2, #0]
 8003096:	2b00      	cmp	r3, #0
 8003098:	da03      	bge.n	80030a2 <_printf_i+0x5e>
 800309a:	222d      	movs	r2, #45	; 0x2d
 800309c:	425b      	negs	r3, r3
 800309e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80030a2:	486f      	ldr	r0, [pc, #444]	; (8003260 <_printf_i+0x21c>)
 80030a4:	220a      	movs	r2, #10
 80030a6:	e039      	b.n	800311c <_printf_i+0xd8>
 80030a8:	2973      	cmp	r1, #115	; 0x73
 80030aa:	f000 809d 	beq.w	80031e8 <_printf_i+0x1a4>
 80030ae:	d808      	bhi.n	80030c2 <_printf_i+0x7e>
 80030b0:	296f      	cmp	r1, #111	; 0x6f
 80030b2:	d020      	beq.n	80030f6 <_printf_i+0xb2>
 80030b4:	2970      	cmp	r1, #112	; 0x70
 80030b6:	d1dd      	bne.n	8003074 <_printf_i+0x30>
 80030b8:	6823      	ldr	r3, [r4, #0]
 80030ba:	f043 0320 	orr.w	r3, r3, #32
 80030be:	6023      	str	r3, [r4, #0]
 80030c0:	e003      	b.n	80030ca <_printf_i+0x86>
 80030c2:	2975      	cmp	r1, #117	; 0x75
 80030c4:	d017      	beq.n	80030f6 <_printf_i+0xb2>
 80030c6:	2978      	cmp	r1, #120	; 0x78
 80030c8:	d1d4      	bne.n	8003074 <_printf_i+0x30>
 80030ca:	2378      	movs	r3, #120	; 0x78
 80030cc:	4865      	ldr	r0, [pc, #404]	; (8003264 <_printf_i+0x220>)
 80030ce:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80030d2:	e055      	b.n	8003180 <_printf_i+0x13c>
 80030d4:	6813      	ldr	r3, [r2, #0]
 80030d6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80030da:	1d19      	adds	r1, r3, #4
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	6011      	str	r1, [r2, #0]
 80030e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80030e4:	2301      	movs	r3, #1
 80030e6:	e08c      	b.n	8003202 <_printf_i+0x1be>
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f010 0f40 	tst.w	r0, #64	; 0x40
 80030ee:	6011      	str	r1, [r2, #0]
 80030f0:	bf18      	it	ne
 80030f2:	b21b      	sxthne	r3, r3
 80030f4:	e7cf      	b.n	8003096 <_printf_i+0x52>
 80030f6:	6813      	ldr	r3, [r2, #0]
 80030f8:	6825      	ldr	r5, [r4, #0]
 80030fa:	1d18      	adds	r0, r3, #4
 80030fc:	6010      	str	r0, [r2, #0]
 80030fe:	0628      	lsls	r0, r5, #24
 8003100:	d501      	bpl.n	8003106 <_printf_i+0xc2>
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	e002      	b.n	800310c <_printf_i+0xc8>
 8003106:	0668      	lsls	r0, r5, #25
 8003108:	d5fb      	bpl.n	8003102 <_printf_i+0xbe>
 800310a:	881b      	ldrh	r3, [r3, #0]
 800310c:	296f      	cmp	r1, #111	; 0x6f
 800310e:	bf14      	ite	ne
 8003110:	220a      	movne	r2, #10
 8003112:	2208      	moveq	r2, #8
 8003114:	4852      	ldr	r0, [pc, #328]	; (8003260 <_printf_i+0x21c>)
 8003116:	2100      	movs	r1, #0
 8003118:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800311c:	6865      	ldr	r5, [r4, #4]
 800311e:	2d00      	cmp	r5, #0
 8003120:	60a5      	str	r5, [r4, #8]
 8003122:	f2c0 8095 	blt.w	8003250 <_printf_i+0x20c>
 8003126:	6821      	ldr	r1, [r4, #0]
 8003128:	f021 0104 	bic.w	r1, r1, #4
 800312c:	6021      	str	r1, [r4, #0]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d13d      	bne.n	80031ae <_printf_i+0x16a>
 8003132:	2d00      	cmp	r5, #0
 8003134:	f040 808e 	bne.w	8003254 <_printf_i+0x210>
 8003138:	4665      	mov	r5, ip
 800313a:	2a08      	cmp	r2, #8
 800313c:	d10b      	bne.n	8003156 <_printf_i+0x112>
 800313e:	6823      	ldr	r3, [r4, #0]
 8003140:	07db      	lsls	r3, r3, #31
 8003142:	d508      	bpl.n	8003156 <_printf_i+0x112>
 8003144:	6923      	ldr	r3, [r4, #16]
 8003146:	6862      	ldr	r2, [r4, #4]
 8003148:	429a      	cmp	r2, r3
 800314a:	bfde      	ittt	le
 800314c:	2330      	movle	r3, #48	; 0x30
 800314e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003152:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003156:	ebac 0305 	sub.w	r3, ip, r5
 800315a:	6123      	str	r3, [r4, #16]
 800315c:	f8cd 8000 	str.w	r8, [sp]
 8003160:	463b      	mov	r3, r7
 8003162:	aa03      	add	r2, sp, #12
 8003164:	4621      	mov	r1, r4
 8003166:	4630      	mov	r0, r6
 8003168:	f7ff fef6 	bl	8002f58 <_printf_common>
 800316c:	3001      	adds	r0, #1
 800316e:	d14d      	bne.n	800320c <_printf_i+0x1c8>
 8003170:	f04f 30ff 	mov.w	r0, #4294967295
 8003174:	b005      	add	sp, #20
 8003176:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800317a:	4839      	ldr	r0, [pc, #228]	; (8003260 <_printf_i+0x21c>)
 800317c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003180:	6813      	ldr	r3, [r2, #0]
 8003182:	6821      	ldr	r1, [r4, #0]
 8003184:	1d1d      	adds	r5, r3, #4
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	6015      	str	r5, [r2, #0]
 800318a:	060a      	lsls	r2, r1, #24
 800318c:	d50b      	bpl.n	80031a6 <_printf_i+0x162>
 800318e:	07ca      	lsls	r2, r1, #31
 8003190:	bf44      	itt	mi
 8003192:	f041 0120 	orrmi.w	r1, r1, #32
 8003196:	6021      	strmi	r1, [r4, #0]
 8003198:	b91b      	cbnz	r3, 80031a2 <_printf_i+0x15e>
 800319a:	6822      	ldr	r2, [r4, #0]
 800319c:	f022 0220 	bic.w	r2, r2, #32
 80031a0:	6022      	str	r2, [r4, #0]
 80031a2:	2210      	movs	r2, #16
 80031a4:	e7b7      	b.n	8003116 <_printf_i+0xd2>
 80031a6:	064d      	lsls	r5, r1, #25
 80031a8:	bf48      	it	mi
 80031aa:	b29b      	uxthmi	r3, r3
 80031ac:	e7ef      	b.n	800318e <_printf_i+0x14a>
 80031ae:	4665      	mov	r5, ip
 80031b0:	fbb3 f1f2 	udiv	r1, r3, r2
 80031b4:	fb02 3311 	mls	r3, r2, r1, r3
 80031b8:	5cc3      	ldrb	r3, [r0, r3]
 80031ba:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80031be:	460b      	mov	r3, r1
 80031c0:	2900      	cmp	r1, #0
 80031c2:	d1f5      	bne.n	80031b0 <_printf_i+0x16c>
 80031c4:	e7b9      	b.n	800313a <_printf_i+0xf6>
 80031c6:	6813      	ldr	r3, [r2, #0]
 80031c8:	6825      	ldr	r5, [r4, #0]
 80031ca:	1d18      	adds	r0, r3, #4
 80031cc:	6961      	ldr	r1, [r4, #20]
 80031ce:	6010      	str	r0, [r2, #0]
 80031d0:	0628      	lsls	r0, r5, #24
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	d501      	bpl.n	80031da <_printf_i+0x196>
 80031d6:	6019      	str	r1, [r3, #0]
 80031d8:	e002      	b.n	80031e0 <_printf_i+0x19c>
 80031da:	066a      	lsls	r2, r5, #25
 80031dc:	d5fb      	bpl.n	80031d6 <_printf_i+0x192>
 80031de:	8019      	strh	r1, [r3, #0]
 80031e0:	2300      	movs	r3, #0
 80031e2:	4665      	mov	r5, ip
 80031e4:	6123      	str	r3, [r4, #16]
 80031e6:	e7b9      	b.n	800315c <_printf_i+0x118>
 80031e8:	6813      	ldr	r3, [r2, #0]
 80031ea:	1d19      	adds	r1, r3, #4
 80031ec:	6011      	str	r1, [r2, #0]
 80031ee:	681d      	ldr	r5, [r3, #0]
 80031f0:	6862      	ldr	r2, [r4, #4]
 80031f2:	2100      	movs	r1, #0
 80031f4:	4628      	mov	r0, r5
 80031f6:	f000 f837 	bl	8003268 <memchr>
 80031fa:	b108      	cbz	r0, 8003200 <_printf_i+0x1bc>
 80031fc:	1b40      	subs	r0, r0, r5
 80031fe:	6060      	str	r0, [r4, #4]
 8003200:	6863      	ldr	r3, [r4, #4]
 8003202:	6123      	str	r3, [r4, #16]
 8003204:	2300      	movs	r3, #0
 8003206:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800320a:	e7a7      	b.n	800315c <_printf_i+0x118>
 800320c:	6923      	ldr	r3, [r4, #16]
 800320e:	462a      	mov	r2, r5
 8003210:	4639      	mov	r1, r7
 8003212:	4630      	mov	r0, r6
 8003214:	47c0      	blx	r8
 8003216:	3001      	adds	r0, #1
 8003218:	d0aa      	beq.n	8003170 <_printf_i+0x12c>
 800321a:	6823      	ldr	r3, [r4, #0]
 800321c:	079b      	lsls	r3, r3, #30
 800321e:	d413      	bmi.n	8003248 <_printf_i+0x204>
 8003220:	68e0      	ldr	r0, [r4, #12]
 8003222:	9b03      	ldr	r3, [sp, #12]
 8003224:	4298      	cmp	r0, r3
 8003226:	bfb8      	it	lt
 8003228:	4618      	movlt	r0, r3
 800322a:	e7a3      	b.n	8003174 <_printf_i+0x130>
 800322c:	2301      	movs	r3, #1
 800322e:	464a      	mov	r2, r9
 8003230:	4639      	mov	r1, r7
 8003232:	4630      	mov	r0, r6
 8003234:	47c0      	blx	r8
 8003236:	3001      	adds	r0, #1
 8003238:	d09a      	beq.n	8003170 <_printf_i+0x12c>
 800323a:	3501      	adds	r5, #1
 800323c:	68e3      	ldr	r3, [r4, #12]
 800323e:	9a03      	ldr	r2, [sp, #12]
 8003240:	1a9b      	subs	r3, r3, r2
 8003242:	42ab      	cmp	r3, r5
 8003244:	dcf2      	bgt.n	800322c <_printf_i+0x1e8>
 8003246:	e7eb      	b.n	8003220 <_printf_i+0x1dc>
 8003248:	2500      	movs	r5, #0
 800324a:	f104 0919 	add.w	r9, r4, #25
 800324e:	e7f5      	b.n	800323c <_printf_i+0x1f8>
 8003250:	2b00      	cmp	r3, #0
 8003252:	d1ac      	bne.n	80031ae <_printf_i+0x16a>
 8003254:	7803      	ldrb	r3, [r0, #0]
 8003256:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800325a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800325e:	e76c      	b.n	800313a <_printf_i+0xf6>
 8003260:	080035e5 	.word	0x080035e5
 8003264:	080035f6 	.word	0x080035f6

08003268 <memchr>:
 8003268:	b510      	push	{r4, lr}
 800326a:	b2c9      	uxtb	r1, r1
 800326c:	4402      	add	r2, r0
 800326e:	4290      	cmp	r0, r2
 8003270:	4603      	mov	r3, r0
 8003272:	d101      	bne.n	8003278 <memchr+0x10>
 8003274:	2300      	movs	r3, #0
 8003276:	e003      	b.n	8003280 <memchr+0x18>
 8003278:	781c      	ldrb	r4, [r3, #0]
 800327a:	3001      	adds	r0, #1
 800327c:	428c      	cmp	r4, r1
 800327e:	d1f6      	bne.n	800326e <memchr+0x6>
 8003280:	4618      	mov	r0, r3
 8003282:	bd10      	pop	{r4, pc}

08003284 <memmove>:
 8003284:	4288      	cmp	r0, r1
 8003286:	b510      	push	{r4, lr}
 8003288:	eb01 0302 	add.w	r3, r1, r2
 800328c:	d807      	bhi.n	800329e <memmove+0x1a>
 800328e:	1e42      	subs	r2, r0, #1
 8003290:	4299      	cmp	r1, r3
 8003292:	d00a      	beq.n	80032aa <memmove+0x26>
 8003294:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003298:	f802 4f01 	strb.w	r4, [r2, #1]!
 800329c:	e7f8      	b.n	8003290 <memmove+0xc>
 800329e:	4283      	cmp	r3, r0
 80032a0:	d9f5      	bls.n	800328e <memmove+0xa>
 80032a2:	1881      	adds	r1, r0, r2
 80032a4:	1ad2      	subs	r2, r2, r3
 80032a6:	42d3      	cmn	r3, r2
 80032a8:	d100      	bne.n	80032ac <memmove+0x28>
 80032aa:	bd10      	pop	{r4, pc}
 80032ac:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80032b0:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80032b4:	e7f7      	b.n	80032a6 <memmove+0x22>
	...

080032b8 <_free_r>:
 80032b8:	b538      	push	{r3, r4, r5, lr}
 80032ba:	4605      	mov	r5, r0
 80032bc:	2900      	cmp	r1, #0
 80032be:	d043      	beq.n	8003348 <_free_r+0x90>
 80032c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80032c4:	1f0c      	subs	r4, r1, #4
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	bfb8      	it	lt
 80032ca:	18e4      	addlt	r4, r4, r3
 80032cc:	f000 f8d0 	bl	8003470 <__malloc_lock>
 80032d0:	4a1e      	ldr	r2, [pc, #120]	; (800334c <_free_r+0x94>)
 80032d2:	6813      	ldr	r3, [r2, #0]
 80032d4:	4610      	mov	r0, r2
 80032d6:	b933      	cbnz	r3, 80032e6 <_free_r+0x2e>
 80032d8:	6063      	str	r3, [r4, #4]
 80032da:	6014      	str	r4, [r2, #0]
 80032dc:	4628      	mov	r0, r5
 80032de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80032e2:	f000 b8c6 	b.w	8003472 <__malloc_unlock>
 80032e6:	42a3      	cmp	r3, r4
 80032e8:	d90b      	bls.n	8003302 <_free_r+0x4a>
 80032ea:	6821      	ldr	r1, [r4, #0]
 80032ec:	1862      	adds	r2, r4, r1
 80032ee:	4293      	cmp	r3, r2
 80032f0:	bf01      	itttt	eq
 80032f2:	681a      	ldreq	r2, [r3, #0]
 80032f4:	685b      	ldreq	r3, [r3, #4]
 80032f6:	1852      	addeq	r2, r2, r1
 80032f8:	6022      	streq	r2, [r4, #0]
 80032fa:	6063      	str	r3, [r4, #4]
 80032fc:	6004      	str	r4, [r0, #0]
 80032fe:	e7ed      	b.n	80032dc <_free_r+0x24>
 8003300:	4613      	mov	r3, r2
 8003302:	685a      	ldr	r2, [r3, #4]
 8003304:	b10a      	cbz	r2, 800330a <_free_r+0x52>
 8003306:	42a2      	cmp	r2, r4
 8003308:	d9fa      	bls.n	8003300 <_free_r+0x48>
 800330a:	6819      	ldr	r1, [r3, #0]
 800330c:	1858      	adds	r0, r3, r1
 800330e:	42a0      	cmp	r0, r4
 8003310:	d10b      	bne.n	800332a <_free_r+0x72>
 8003312:	6820      	ldr	r0, [r4, #0]
 8003314:	4401      	add	r1, r0
 8003316:	1858      	adds	r0, r3, r1
 8003318:	4282      	cmp	r2, r0
 800331a:	6019      	str	r1, [r3, #0]
 800331c:	d1de      	bne.n	80032dc <_free_r+0x24>
 800331e:	6810      	ldr	r0, [r2, #0]
 8003320:	6852      	ldr	r2, [r2, #4]
 8003322:	4401      	add	r1, r0
 8003324:	6019      	str	r1, [r3, #0]
 8003326:	605a      	str	r2, [r3, #4]
 8003328:	e7d8      	b.n	80032dc <_free_r+0x24>
 800332a:	d902      	bls.n	8003332 <_free_r+0x7a>
 800332c:	230c      	movs	r3, #12
 800332e:	602b      	str	r3, [r5, #0]
 8003330:	e7d4      	b.n	80032dc <_free_r+0x24>
 8003332:	6820      	ldr	r0, [r4, #0]
 8003334:	1821      	adds	r1, r4, r0
 8003336:	428a      	cmp	r2, r1
 8003338:	bf01      	itttt	eq
 800333a:	6811      	ldreq	r1, [r2, #0]
 800333c:	6852      	ldreq	r2, [r2, #4]
 800333e:	1809      	addeq	r1, r1, r0
 8003340:	6021      	streq	r1, [r4, #0]
 8003342:	6062      	str	r2, [r4, #4]
 8003344:	605c      	str	r4, [r3, #4]
 8003346:	e7c9      	b.n	80032dc <_free_r+0x24>
 8003348:	bd38      	pop	{r3, r4, r5, pc}
 800334a:	bf00      	nop
 800334c:	20000090 	.word	0x20000090

08003350 <_malloc_r>:
 8003350:	b570      	push	{r4, r5, r6, lr}
 8003352:	1ccd      	adds	r5, r1, #3
 8003354:	f025 0503 	bic.w	r5, r5, #3
 8003358:	3508      	adds	r5, #8
 800335a:	2d0c      	cmp	r5, #12
 800335c:	bf38      	it	cc
 800335e:	250c      	movcc	r5, #12
 8003360:	2d00      	cmp	r5, #0
 8003362:	4606      	mov	r6, r0
 8003364:	db01      	blt.n	800336a <_malloc_r+0x1a>
 8003366:	42a9      	cmp	r1, r5
 8003368:	d903      	bls.n	8003372 <_malloc_r+0x22>
 800336a:	230c      	movs	r3, #12
 800336c:	6033      	str	r3, [r6, #0]
 800336e:	2000      	movs	r0, #0
 8003370:	bd70      	pop	{r4, r5, r6, pc}
 8003372:	f000 f87d 	bl	8003470 <__malloc_lock>
 8003376:	4a21      	ldr	r2, [pc, #132]	; (80033fc <_malloc_r+0xac>)
 8003378:	6814      	ldr	r4, [r2, #0]
 800337a:	4621      	mov	r1, r4
 800337c:	b991      	cbnz	r1, 80033a4 <_malloc_r+0x54>
 800337e:	4c20      	ldr	r4, [pc, #128]	; (8003400 <_malloc_r+0xb0>)
 8003380:	6823      	ldr	r3, [r4, #0]
 8003382:	b91b      	cbnz	r3, 800338c <_malloc_r+0x3c>
 8003384:	4630      	mov	r0, r6
 8003386:	f000 f863 	bl	8003450 <_sbrk_r>
 800338a:	6020      	str	r0, [r4, #0]
 800338c:	4629      	mov	r1, r5
 800338e:	4630      	mov	r0, r6
 8003390:	f000 f85e 	bl	8003450 <_sbrk_r>
 8003394:	1c43      	adds	r3, r0, #1
 8003396:	d124      	bne.n	80033e2 <_malloc_r+0x92>
 8003398:	230c      	movs	r3, #12
 800339a:	4630      	mov	r0, r6
 800339c:	6033      	str	r3, [r6, #0]
 800339e:	f000 f868 	bl	8003472 <__malloc_unlock>
 80033a2:	e7e4      	b.n	800336e <_malloc_r+0x1e>
 80033a4:	680b      	ldr	r3, [r1, #0]
 80033a6:	1b5b      	subs	r3, r3, r5
 80033a8:	d418      	bmi.n	80033dc <_malloc_r+0x8c>
 80033aa:	2b0b      	cmp	r3, #11
 80033ac:	d90f      	bls.n	80033ce <_malloc_r+0x7e>
 80033ae:	600b      	str	r3, [r1, #0]
 80033b0:	18cc      	adds	r4, r1, r3
 80033b2:	50cd      	str	r5, [r1, r3]
 80033b4:	4630      	mov	r0, r6
 80033b6:	f000 f85c 	bl	8003472 <__malloc_unlock>
 80033ba:	f104 000b 	add.w	r0, r4, #11
 80033be:	1d23      	adds	r3, r4, #4
 80033c0:	f020 0007 	bic.w	r0, r0, #7
 80033c4:	1ac3      	subs	r3, r0, r3
 80033c6:	d0d3      	beq.n	8003370 <_malloc_r+0x20>
 80033c8:	425a      	negs	r2, r3
 80033ca:	50e2      	str	r2, [r4, r3]
 80033cc:	e7d0      	b.n	8003370 <_malloc_r+0x20>
 80033ce:	684b      	ldr	r3, [r1, #4]
 80033d0:	428c      	cmp	r4, r1
 80033d2:	bf16      	itet	ne
 80033d4:	6063      	strne	r3, [r4, #4]
 80033d6:	6013      	streq	r3, [r2, #0]
 80033d8:	460c      	movne	r4, r1
 80033da:	e7eb      	b.n	80033b4 <_malloc_r+0x64>
 80033dc:	460c      	mov	r4, r1
 80033de:	6849      	ldr	r1, [r1, #4]
 80033e0:	e7cc      	b.n	800337c <_malloc_r+0x2c>
 80033e2:	1cc4      	adds	r4, r0, #3
 80033e4:	f024 0403 	bic.w	r4, r4, #3
 80033e8:	42a0      	cmp	r0, r4
 80033ea:	d005      	beq.n	80033f8 <_malloc_r+0xa8>
 80033ec:	1a21      	subs	r1, r4, r0
 80033ee:	4630      	mov	r0, r6
 80033f0:	f000 f82e 	bl	8003450 <_sbrk_r>
 80033f4:	3001      	adds	r0, #1
 80033f6:	d0cf      	beq.n	8003398 <_malloc_r+0x48>
 80033f8:	6025      	str	r5, [r4, #0]
 80033fa:	e7db      	b.n	80033b4 <_malloc_r+0x64>
 80033fc:	20000090 	.word	0x20000090
 8003400:	20000094 	.word	0x20000094

08003404 <_realloc_r>:
 8003404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003406:	4607      	mov	r7, r0
 8003408:	4614      	mov	r4, r2
 800340a:	460e      	mov	r6, r1
 800340c:	b921      	cbnz	r1, 8003418 <_realloc_r+0x14>
 800340e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003412:	4611      	mov	r1, r2
 8003414:	f7ff bf9c 	b.w	8003350 <_malloc_r>
 8003418:	b922      	cbnz	r2, 8003424 <_realloc_r+0x20>
 800341a:	f7ff ff4d 	bl	80032b8 <_free_r>
 800341e:	4625      	mov	r5, r4
 8003420:	4628      	mov	r0, r5
 8003422:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003424:	f000 f826 	bl	8003474 <_malloc_usable_size_r>
 8003428:	42a0      	cmp	r0, r4
 800342a:	d20f      	bcs.n	800344c <_realloc_r+0x48>
 800342c:	4621      	mov	r1, r4
 800342e:	4638      	mov	r0, r7
 8003430:	f7ff ff8e 	bl	8003350 <_malloc_r>
 8003434:	4605      	mov	r5, r0
 8003436:	2800      	cmp	r0, #0
 8003438:	d0f2      	beq.n	8003420 <_realloc_r+0x1c>
 800343a:	4631      	mov	r1, r6
 800343c:	4622      	mov	r2, r4
 800343e:	f7ff fc05 	bl	8002c4c <memcpy>
 8003442:	4631      	mov	r1, r6
 8003444:	4638      	mov	r0, r7
 8003446:	f7ff ff37 	bl	80032b8 <_free_r>
 800344a:	e7e9      	b.n	8003420 <_realloc_r+0x1c>
 800344c:	4635      	mov	r5, r6
 800344e:	e7e7      	b.n	8003420 <_realloc_r+0x1c>

08003450 <_sbrk_r>:
 8003450:	b538      	push	{r3, r4, r5, lr}
 8003452:	2300      	movs	r3, #0
 8003454:	4c05      	ldr	r4, [pc, #20]	; (800346c <_sbrk_r+0x1c>)
 8003456:	4605      	mov	r5, r0
 8003458:	4608      	mov	r0, r1
 800345a:	6023      	str	r3, [r4, #0]
 800345c:	f7fd f990 	bl	8000780 <_sbrk>
 8003460:	1c43      	adds	r3, r0, #1
 8003462:	d102      	bne.n	800346a <_sbrk_r+0x1a>
 8003464:	6823      	ldr	r3, [r4, #0]
 8003466:	b103      	cbz	r3, 800346a <_sbrk_r+0x1a>
 8003468:	602b      	str	r3, [r5, #0]
 800346a:	bd38      	pop	{r3, r4, r5, pc}
 800346c:	200001e4 	.word	0x200001e4

08003470 <__malloc_lock>:
 8003470:	4770      	bx	lr

08003472 <__malloc_unlock>:
 8003472:	4770      	bx	lr

08003474 <_malloc_usable_size_r>:
 8003474:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003478:	1f18      	subs	r0, r3, #4
 800347a:	2b00      	cmp	r3, #0
 800347c:	bfbc      	itt	lt
 800347e:	580b      	ldrlt	r3, [r1, r0]
 8003480:	18c0      	addlt	r0, r0, r3
 8003482:	4770      	bx	lr

08003484 <_init>:
 8003484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003486:	bf00      	nop
 8003488:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800348a:	bc08      	pop	{r3}
 800348c:	469e      	mov	lr, r3
 800348e:	4770      	bx	lr

08003490 <_fini>:
 8003490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003492:	bf00      	nop
 8003494:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003496:	bc08      	pop	{r3}
 8003498:	469e      	mov	lr, r3
 800349a:	4770      	bx	lr
