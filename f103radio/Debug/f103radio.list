
f103radio.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ee0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000012c  08003fec  08003fec  00013fec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004118  08004118  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08004118  08004118  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004118  08004118  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004118  08004118  00014118  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800411c  0800411c  0001411c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004120  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001dc  20000070  08004190  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000024c  08004190  0002024c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ca72  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001f41  00000000  00000000  0002cb0b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000a50  00000000  00000000  0002ea50  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000960  00000000  00000000  0002f4a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018405  00000000  00000000  0002fe00  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a029  00000000  00000000  00048205  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00084e60  00000000  00000000  0005222e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d708e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002bb0  00000000  00000000  000d710c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08003fd4 	.word	0x08003fd4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08003fd4 	.word	0x08003fd4

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b088      	sub	sp, #32
 8000160:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000162:	f107 0310 	add.w	r3, r7, #16
 8000166:	2200      	movs	r2, #0
 8000168:	601a      	str	r2, [r3, #0]
 800016a:	605a      	str	r2, [r3, #4]
 800016c:	609a      	str	r2, [r3, #8]
 800016e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000170:	4b1d      	ldr	r3, [pc, #116]	; (80001e8 <MX_GPIO_Init+0x8c>)
 8000172:	699b      	ldr	r3, [r3, #24]
 8000174:	4a1c      	ldr	r2, [pc, #112]	; (80001e8 <MX_GPIO_Init+0x8c>)
 8000176:	f043 0320 	orr.w	r3, r3, #32
 800017a:	6193      	str	r3, [r2, #24]
 800017c:	4b1a      	ldr	r3, [pc, #104]	; (80001e8 <MX_GPIO_Init+0x8c>)
 800017e:	699b      	ldr	r3, [r3, #24]
 8000180:	f003 0320 	and.w	r3, r3, #32
 8000184:	60fb      	str	r3, [r7, #12]
 8000186:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000188:	4b17      	ldr	r3, [pc, #92]	; (80001e8 <MX_GPIO_Init+0x8c>)
 800018a:	699b      	ldr	r3, [r3, #24]
 800018c:	4a16      	ldr	r2, [pc, #88]	; (80001e8 <MX_GPIO_Init+0x8c>)
 800018e:	f043 0304 	orr.w	r3, r3, #4
 8000192:	6193      	str	r3, [r2, #24]
 8000194:	4b14      	ldr	r3, [pc, #80]	; (80001e8 <MX_GPIO_Init+0x8c>)
 8000196:	699b      	ldr	r3, [r3, #24]
 8000198:	f003 0304 	and.w	r3, r3, #4
 800019c:	60bb      	str	r3, [r7, #8]
 800019e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80001a0:	4b11      	ldr	r3, [pc, #68]	; (80001e8 <MX_GPIO_Init+0x8c>)
 80001a2:	699b      	ldr	r3, [r3, #24]
 80001a4:	4a10      	ldr	r2, [pc, #64]	; (80001e8 <MX_GPIO_Init+0x8c>)
 80001a6:	f043 0308 	orr.w	r3, r3, #8
 80001aa:	6193      	str	r3, [r2, #24]
 80001ac:	4b0e      	ldr	r3, [pc, #56]	; (80001e8 <MX_GPIO_Init+0x8c>)
 80001ae:	699b      	ldr	r3, [r3, #24]
 80001b0:	f003 0308 	and.w	r3, r3, #8
 80001b4:	607b      	str	r3, [r7, #4]
 80001b6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_BOARD_GPIO_Port, LED_BOARD_Pin, GPIO_PIN_RESET);
 80001b8:	2200      	movs	r2, #0
 80001ba:	2102      	movs	r1, #2
 80001bc:	480b      	ldr	r0, [pc, #44]	; (80001ec <MX_GPIO_Init+0x90>)
 80001be:	f001 f8a3 	bl	8001308 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_BOARD_Pin;
 80001c2:	2302      	movs	r3, #2
 80001c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80001c6:	2301      	movs	r3, #1
 80001c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001ca:	2300      	movs	r3, #0
 80001cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80001ce:	2302      	movs	r3, #2
 80001d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_BOARD_GPIO_Port, &GPIO_InitStruct);
 80001d2:	f107 0310 	add.w	r3, r7, #16
 80001d6:	4619      	mov	r1, r3
 80001d8:	4804      	ldr	r0, [pc, #16]	; (80001ec <MX_GPIO_Init+0x90>)
 80001da:	f000 ff3b 	bl	8001054 <HAL_GPIO_Init>

}
 80001de:	bf00      	nop
 80001e0:	3720      	adds	r7, #32
 80001e2:	46bd      	mov	sp, r7
 80001e4:	bd80      	pop	{r7, pc}
 80001e6:	bf00      	nop
 80001e8:	40021000 	.word	0x40021000
 80001ec:	40010800 	.word	0x40010800

080001f0 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80001f0:	b580      	push	{r7, lr}
 80001f2:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 80001f4:	4b12      	ldr	r3, [pc, #72]	; (8000240 <MX_I2C1_Init+0x50>)
 80001f6:	4a13      	ldr	r2, [pc, #76]	; (8000244 <MX_I2C1_Init+0x54>)
 80001f8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80001fa:	4b11      	ldr	r3, [pc, #68]	; (8000240 <MX_I2C1_Init+0x50>)
 80001fc:	4a12      	ldr	r2, [pc, #72]	; (8000248 <MX_I2C1_Init+0x58>)
 80001fe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000200:	4b0f      	ldr	r3, [pc, #60]	; (8000240 <MX_I2C1_Init+0x50>)
 8000202:	2200      	movs	r2, #0
 8000204:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000206:	4b0e      	ldr	r3, [pc, #56]	; (8000240 <MX_I2C1_Init+0x50>)
 8000208:	2200      	movs	r2, #0
 800020a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800020c:	4b0c      	ldr	r3, [pc, #48]	; (8000240 <MX_I2C1_Init+0x50>)
 800020e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000212:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000214:	4b0a      	ldr	r3, [pc, #40]	; (8000240 <MX_I2C1_Init+0x50>)
 8000216:	2200      	movs	r2, #0
 8000218:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800021a:	4b09      	ldr	r3, [pc, #36]	; (8000240 <MX_I2C1_Init+0x50>)
 800021c:	2200      	movs	r2, #0
 800021e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000220:	4b07      	ldr	r3, [pc, #28]	; (8000240 <MX_I2C1_Init+0x50>)
 8000222:	2200      	movs	r2, #0
 8000224:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000226:	4b06      	ldr	r3, [pc, #24]	; (8000240 <MX_I2C1_Init+0x50>)
 8000228:	2200      	movs	r2, #0
 800022a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800022c:	4804      	ldr	r0, [pc, #16]	; (8000240 <MX_I2C1_Init+0x50>)
 800022e:	f001 f883 	bl	8001338 <HAL_I2C_Init>
 8000232:	4603      	mov	r3, r0
 8000234:	2b00      	cmp	r3, #0
 8000236:	d001      	beq.n	800023c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000238:	f000 fad5 	bl	80007e6 <Error_Handler>
  }

}
 800023c:	bf00      	nop
 800023e:	bd80      	pop	{r7, pc}
 8000240:	20000098 	.word	0x20000098
 8000244:	40005400 	.word	0x40005400
 8000248:	000186a0 	.word	0x000186a0

0800024c <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 800024c:	b580      	push	{r7, lr}
 800024e:	af00      	add	r7, sp, #0

  hi2c2.Instance = I2C2;
 8000250:	4b12      	ldr	r3, [pc, #72]	; (800029c <MX_I2C2_Init+0x50>)
 8000252:	4a13      	ldr	r2, [pc, #76]	; (80002a0 <MX_I2C2_Init+0x54>)
 8000254:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000256:	4b11      	ldr	r3, [pc, #68]	; (800029c <MX_I2C2_Init+0x50>)
 8000258:	4a12      	ldr	r2, [pc, #72]	; (80002a4 <MX_I2C2_Init+0x58>)
 800025a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800025c:	4b0f      	ldr	r3, [pc, #60]	; (800029c <MX_I2C2_Init+0x50>)
 800025e:	2200      	movs	r2, #0
 8000260:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000262:	4b0e      	ldr	r3, [pc, #56]	; (800029c <MX_I2C2_Init+0x50>)
 8000264:	2200      	movs	r2, #0
 8000266:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000268:	4b0c      	ldr	r3, [pc, #48]	; (800029c <MX_I2C2_Init+0x50>)
 800026a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800026e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000270:	4b0a      	ldr	r3, [pc, #40]	; (800029c <MX_I2C2_Init+0x50>)
 8000272:	2200      	movs	r2, #0
 8000274:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000276:	4b09      	ldr	r3, [pc, #36]	; (800029c <MX_I2C2_Init+0x50>)
 8000278:	2200      	movs	r2, #0
 800027a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800027c:	4b07      	ldr	r3, [pc, #28]	; (800029c <MX_I2C2_Init+0x50>)
 800027e:	2200      	movs	r2, #0
 8000280:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000282:	4b06      	ldr	r3, [pc, #24]	; (800029c <MX_I2C2_Init+0x50>)
 8000284:	2200      	movs	r2, #0
 8000286:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000288:	4804      	ldr	r0, [pc, #16]	; (800029c <MX_I2C2_Init+0x50>)
 800028a:	f001 f855 	bl	8001338 <HAL_I2C_Init>
 800028e:	4603      	mov	r3, r0
 8000290:	2b00      	cmp	r3, #0
 8000292:	d001      	beq.n	8000298 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000294:	f000 faa7 	bl	80007e6 <Error_Handler>
  }

}
 8000298:	bf00      	nop
 800029a:	bd80      	pop	{r7, pc}
 800029c:	200000ec 	.word	0x200000ec
 80002a0:	40005800 	.word	0x40005800
 80002a4:	000186a0 	.word	0x000186a0

080002a8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	b08a      	sub	sp, #40	; 0x28
 80002ac:	af00      	add	r7, sp, #0
 80002ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002b0:	f107 0318 	add.w	r3, r7, #24
 80002b4:	2200      	movs	r2, #0
 80002b6:	601a      	str	r2, [r3, #0]
 80002b8:	605a      	str	r2, [r3, #4]
 80002ba:	609a      	str	r2, [r3, #8]
 80002bc:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	681b      	ldr	r3, [r3, #0]
 80002c2:	4a2b      	ldr	r2, [pc, #172]	; (8000370 <HAL_I2C_MspInit+0xc8>)
 80002c4:	4293      	cmp	r3, r2
 80002c6:	d124      	bne.n	8000312 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80002c8:	4b2a      	ldr	r3, [pc, #168]	; (8000374 <HAL_I2C_MspInit+0xcc>)
 80002ca:	699b      	ldr	r3, [r3, #24]
 80002cc:	4a29      	ldr	r2, [pc, #164]	; (8000374 <HAL_I2C_MspInit+0xcc>)
 80002ce:	f043 0308 	orr.w	r3, r3, #8
 80002d2:	6193      	str	r3, [r2, #24]
 80002d4:	4b27      	ldr	r3, [pc, #156]	; (8000374 <HAL_I2C_MspInit+0xcc>)
 80002d6:	699b      	ldr	r3, [r3, #24]
 80002d8:	f003 0308 	and.w	r3, r3, #8
 80002dc:	617b      	str	r3, [r7, #20]
 80002de:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80002e0:	23c0      	movs	r3, #192	; 0xc0
 80002e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80002e4:	2312      	movs	r3, #18
 80002e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80002e8:	2303      	movs	r3, #3
 80002ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80002ec:	f107 0318 	add.w	r3, r7, #24
 80002f0:	4619      	mov	r1, r3
 80002f2:	4821      	ldr	r0, [pc, #132]	; (8000378 <HAL_I2C_MspInit+0xd0>)
 80002f4:	f000 feae 	bl	8001054 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80002f8:	4b1e      	ldr	r3, [pc, #120]	; (8000374 <HAL_I2C_MspInit+0xcc>)
 80002fa:	69db      	ldr	r3, [r3, #28]
 80002fc:	4a1d      	ldr	r2, [pc, #116]	; (8000374 <HAL_I2C_MspInit+0xcc>)
 80002fe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000302:	61d3      	str	r3, [r2, #28]
 8000304:	4b1b      	ldr	r3, [pc, #108]	; (8000374 <HAL_I2C_MspInit+0xcc>)
 8000306:	69db      	ldr	r3, [r3, #28]
 8000308:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800030c:	613b      	str	r3, [r7, #16]
 800030e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000310:	e029      	b.n	8000366 <HAL_I2C_MspInit+0xbe>
  else if(i2cHandle->Instance==I2C2)
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	681b      	ldr	r3, [r3, #0]
 8000316:	4a19      	ldr	r2, [pc, #100]	; (800037c <HAL_I2C_MspInit+0xd4>)
 8000318:	4293      	cmp	r3, r2
 800031a:	d124      	bne.n	8000366 <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800031c:	4b15      	ldr	r3, [pc, #84]	; (8000374 <HAL_I2C_MspInit+0xcc>)
 800031e:	699b      	ldr	r3, [r3, #24]
 8000320:	4a14      	ldr	r2, [pc, #80]	; (8000374 <HAL_I2C_MspInit+0xcc>)
 8000322:	f043 0308 	orr.w	r3, r3, #8
 8000326:	6193      	str	r3, [r2, #24]
 8000328:	4b12      	ldr	r3, [pc, #72]	; (8000374 <HAL_I2C_MspInit+0xcc>)
 800032a:	699b      	ldr	r3, [r3, #24]
 800032c:	f003 0308 	and.w	r3, r3, #8
 8000330:	60fb      	str	r3, [r7, #12]
 8000332:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000334:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000338:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800033a:	2312      	movs	r3, #18
 800033c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800033e:	2303      	movs	r3, #3
 8000340:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000342:	f107 0318 	add.w	r3, r7, #24
 8000346:	4619      	mov	r1, r3
 8000348:	480b      	ldr	r0, [pc, #44]	; (8000378 <HAL_I2C_MspInit+0xd0>)
 800034a:	f000 fe83 	bl	8001054 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800034e:	4b09      	ldr	r3, [pc, #36]	; (8000374 <HAL_I2C_MspInit+0xcc>)
 8000350:	69db      	ldr	r3, [r3, #28]
 8000352:	4a08      	ldr	r2, [pc, #32]	; (8000374 <HAL_I2C_MspInit+0xcc>)
 8000354:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000358:	61d3      	str	r3, [r2, #28]
 800035a:	4b06      	ldr	r3, [pc, #24]	; (8000374 <HAL_I2C_MspInit+0xcc>)
 800035c:	69db      	ldr	r3, [r3, #28]
 800035e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000362:	60bb      	str	r3, [r7, #8]
 8000364:	68bb      	ldr	r3, [r7, #8]
}
 8000366:	bf00      	nop
 8000368:	3728      	adds	r7, #40	; 0x28
 800036a:	46bd      	mov	sp, r7
 800036c:	bd80      	pop	{r7, pc}
 800036e:	bf00      	nop
 8000370:	40005400 	.word	0x40005400
 8000374:	40021000 	.word	0x40021000
 8000378:	40010c00 	.word	0x40010c00
 800037c:	40005800 	.word	0x40005800

08000380 <lcd_set_e>:
static void lcd_nibble(lcd_t *l, uint8_t nibble);
static void  lcd_byte(lcd_t *l , uint8_t byte, uint8_t dc);


// E
static void lcd_set_e(lcd_t *l){
 8000380:	b580      	push	{r7, lr}
 8000382:	b082      	sub	sp, #8
 8000384:	af00      	add	r7, sp, #0
 8000386:	6078      	str	r0, [r7, #4]
	l->iostate |= (1<<E_PIN);
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	785b      	ldrb	r3, [r3, #1]
 800038c:	f043 0304 	orr.w	r3, r3, #4
 8000390:	b2da      	uxtb	r2, r3
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	705a      	strb	r2, [r3, #1]
	lcd_pcf8574_write(l,l->iostate);
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	785b      	ldrb	r3, [r3, #1]
 800039a:	4619      	mov	r1, r3
 800039c:	6878      	ldr	r0, [r7, #4]
 800039e:	f000 f879 	bl	8000494 <lcd_pcf8574_write>
}
 80003a2:	bf00      	nop
 80003a4:	3708      	adds	r7, #8
 80003a6:	46bd      	mov	sp, r7
 80003a8:	bd80      	pop	{r7, pc}

080003aa <lcd_reset_e>:
static void lcd_reset_e(lcd_t *l){
 80003aa:	b580      	push	{r7, lr}
 80003ac:	b082      	sub	sp, #8
 80003ae:	af00      	add	r7, sp, #0
 80003b0:	6078      	str	r0, [r7, #4]
	l->iostate &=~(1<<E_PIN);
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	785b      	ldrb	r3, [r3, #1]
 80003b6:	f023 0304 	bic.w	r3, r3, #4
 80003ba:	b2da      	uxtb	r2, r3
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	705a      	strb	r2, [r3, #1]
	lcd_pcf8574_write(l,l->iostate);
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	785b      	ldrb	r3, [r3, #1]
 80003c4:	4619      	mov	r1, r3
 80003c6:	6878      	ldr	r0, [r7, #4]
 80003c8:	f000 f864 	bl	8000494 <lcd_pcf8574_write>
}
 80003cc:	bf00      	nop
 80003ce:	3708      	adds	r7, #8
 80003d0:	46bd      	mov	sp, r7
 80003d2:	bd80      	pop	{r7, pc}

080003d4 <lcd_set_rs>:
static void lcd_reset_rw(lcd_t *l){
	l->iostate &=~(1<<RW_PIN);
	lcd_pcf8574_write(l,l->iostate);
}
// RS
static void lcd_set_rs(lcd_t *l){
 80003d4:	b580      	push	{r7, lr}
 80003d6:	b082      	sub	sp, #8
 80003d8:	af00      	add	r7, sp, #0
 80003da:	6078      	str	r0, [r7, #4]
	l->iostate |= (1<<RS_PIN);
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	785b      	ldrb	r3, [r3, #1]
 80003e0:	f043 0301 	orr.w	r3, r3, #1
 80003e4:	b2da      	uxtb	r2, r3
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	705a      	strb	r2, [r3, #1]
	lcd_pcf8574_write(l,l->iostate);
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	785b      	ldrb	r3, [r3, #1]
 80003ee:	4619      	mov	r1, r3
 80003f0:	6878      	ldr	r0, [r7, #4]
 80003f2:	f000 f84f 	bl	8000494 <lcd_pcf8574_write>
}
 80003f6:	bf00      	nop
 80003f8:	3708      	adds	r7, #8
 80003fa:	46bd      	mov	sp, r7
 80003fc:	bd80      	pop	{r7, pc}

080003fe <lcd_reset_rs>:
static void lcd_reset_rs(lcd_t *l){
 80003fe:	b580      	push	{r7, lr}
 8000400:	b082      	sub	sp, #8
 8000402:	af00      	add	r7, sp, #0
 8000404:	6078      	str	r0, [r7, #4]
	l->iostate &=~(1<<RS_PIN);
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	785b      	ldrb	r3, [r3, #1]
 800040a:	f023 0301 	bic.w	r3, r3, #1
 800040e:	b2da      	uxtb	r2, r3
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	705a      	strb	r2, [r3, #1]
	lcd_pcf8574_write(l,l->iostate);
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	785b      	ldrb	r3, [r3, #1]
 8000418:	4619      	mov	r1, r3
 800041a:	6878      	ldr	r0, [r7, #4]
 800041c:	f000 f83a 	bl	8000494 <lcd_pcf8574_write>
}
 8000420:	bf00      	nop
 8000422:	3708      	adds	r7, #8
 8000424:	46bd      	mov	sp, r7
 8000426:	bd80      	pop	{r7, pc}

08000428 <lcd_set_led>:
// LED
static void lcd_set_led(lcd_t *l){
 8000428:	b580      	push	{r7, lr}
 800042a:	b082      	sub	sp, #8
 800042c:	af00      	add	r7, sp, #0
 800042e:	6078      	str	r0, [r7, #4]
	l->iostate |= (1<<LED_PIN);
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	785b      	ldrb	r3, [r3, #1]
 8000434:	f043 0308 	orr.w	r3, r3, #8
 8000438:	b2da      	uxtb	r2, r3
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	705a      	strb	r2, [r3, #1]
	lcd_pcf8574_write(l,l->iostate);
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	785b      	ldrb	r3, [r3, #1]
 8000442:	4619      	mov	r1, r3
 8000444:	6878      	ldr	r0, [r7, #4]
 8000446:	f000 f825 	bl	8000494 <lcd_pcf8574_write>
}
 800044a:	bf00      	nop
 800044c:	3708      	adds	r7, #8
 800044e:	46bd      	mov	sp, r7
 8000450:	bd80      	pop	{r7, pc}

08000452 <_delay>:
	lcd_pcf8574_write(l,l->iostate);
}



void _delay(uint32_t cnt){
 8000452:	b480      	push	{r7}
 8000454:	b083      	sub	sp, #12
 8000456:	af00      	add	r7, sp, #0
 8000458:	6078      	str	r0, [r7, #4]
	while(cnt){
 800045a:	e00b      	b.n	8000474 <_delay+0x22>
		asm("nop");
 800045c:	bf00      	nop
		asm("nop");
 800045e:	bf00      	nop
		asm("nop");
 8000460:	bf00      	nop
		asm("nop");
 8000462:	bf00      	nop
		asm("nop");
 8000464:	bf00      	nop
		asm("nop");
 8000466:	bf00      	nop
		asm("nop");
 8000468:	bf00      	nop
		asm("nop");
 800046a:	bf00      	nop
		asm("nop");
 800046c:	bf00      	nop
		cnt--;
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	3b01      	subs	r3, #1
 8000472:	607b      	str	r3, [r7, #4]
	while(cnt){
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	2b00      	cmp	r3, #0
 8000478:	d1f0      	bne.n	800045c <_delay+0xa>
	}
}
 800047a:	bf00      	nop
 800047c:	370c      	adds	r7, #12
 800047e:	46bd      	mov	sp, r7
 8000480:	bc80      	pop	{r7}
 8000482:	4770      	bx	lr

08000484 <lcd_delay>:


void lcd_delay(){
 8000484:	b580      	push	{r7, lr}
 8000486:	af00      	add	r7, sp, #0
	//_delay(10000); // ~1,2ms
	_delay(10000); // 0,12ms
 8000488:	f242 7010 	movw	r0, #10000	; 0x2710
 800048c:	f7ff ffe1 	bl	8000452 <_delay>
}
 8000490:	bf00      	nop
 8000492:	bd80      	pop	{r7, pc}

08000494 <lcd_pcf8574_write>:



void lcd_pcf8574_write(lcd_t *s, uint8_t data){
 8000494:	b580      	push	{r7, lr}
 8000496:	b086      	sub	sp, #24
 8000498:	af02      	add	r7, sp, #8
 800049a:	6078      	str	r0, [r7, #4]
 800049c:	460b      	mov	r3, r1
 800049e:	70fb      	strb	r3, [r7, #3]
	s->iostate=data;
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	78fa      	ldrb	r2, [r7, #3]
 80004a4:	705a      	strb	r2, [r3, #1]
	uint8_t error=0;
 80004a6:	2300      	movs	r3, #0
 80004a8:	73fb      	strb	r3, [r7, #15]
	//vTaskSuspendAll();
	error = HAL_I2C_Master_Transmit(s->hi2c, (uint16_t)s->addr, &s->iostate, 1, 100);
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	6858      	ldr	r0, [r3, #4]
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	781b      	ldrb	r3, [r3, #0]
 80004b2:	b299      	uxth	r1, r3
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	1c5a      	adds	r2, r3, #1
 80004b8:	2364      	movs	r3, #100	; 0x64
 80004ba:	9300      	str	r3, [sp, #0]
 80004bc:	2301      	movs	r3, #1
 80004be:	f001 f873 	bl	80015a8 <HAL_I2C_Master_Transmit>
 80004c2:	4603      	mov	r3, r0
 80004c4:	73fb      	strb	r3, [r7, #15]
	//xTaskResumeAll();
	(void)error;
	if(error!=0) dbg("eeror %d",error);
 80004c6:	7bfb      	ldrb	r3, [r7, #15]
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	d004      	beq.n	80004d6 <lcd_pcf8574_write+0x42>
 80004cc:	7bfb      	ldrb	r3, [r7, #15]
 80004ce:	4619      	mov	r1, r3
 80004d0:	4803      	ldr	r0, [pc, #12]	; (80004e0 <lcd_pcf8574_write+0x4c>)
 80004d2:	f000 fb95 	bl	8000c00 <dbg>

}
 80004d6:	bf00      	nop
 80004d8:	3710      	adds	r7, #16
 80004da:	46bd      	mov	sp, r7
 80004dc:	bd80      	pop	{r7, pc}
 80004de:	bf00      	nop
 80004e0:	08003fec 	.word	0x08003fec

080004e4 <lcd_nibble>:


void lcd_nibble(lcd_t *l, uint8_t nibble){
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b082      	sub	sp, #8
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]
 80004ec:	460b      	mov	r3, r1
 80004ee:	70fb      	strb	r3, [r7, #3]
	nibble=nibble<<4;
 80004f0:	78fb      	ldrb	r3, [r7, #3]
 80004f2:	011b      	lsls	r3, r3, #4
 80004f4:	70fb      	strb	r3, [r7, #3]
	lcd_set_e(l);
 80004f6:	6878      	ldr	r0, [r7, #4]
 80004f8:	f7ff ff42 	bl	8000380 <lcd_set_e>
	lcd_delay();
 80004fc:	f7ff ffc2 	bl	8000484 <lcd_delay>
	l->iostate&=0x0F;
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	785b      	ldrb	r3, [r3, #1]
 8000504:	f003 030f 	and.w	r3, r3, #15
 8000508:	b2da      	uxtb	r2, r3
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	705a      	strb	r2, [r3, #1]
	l->iostate|=nibble;
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	785a      	ldrb	r2, [r3, #1]
 8000512:	78fb      	ldrb	r3, [r7, #3]
 8000514:	4313      	orrs	r3, r2
 8000516:	b2da      	uxtb	r2, r3
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	705a      	strb	r2, [r3, #1]
	lcd_pcf8574_write(l,l->iostate);
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	785b      	ldrb	r3, [r3, #1]
 8000520:	4619      	mov	r1, r3
 8000522:	6878      	ldr	r0, [r7, #4]
 8000524:	f7ff ffb6 	bl	8000494 <lcd_pcf8574_write>
	lcd_delay();
 8000528:	f7ff ffac 	bl	8000484 <lcd_delay>
	lcd_reset_e(l);
 800052c:	6878      	ldr	r0, [r7, #4]
 800052e:	f7ff ff3c 	bl	80003aa <lcd_reset_e>
}
 8000532:	bf00      	nop
 8000534:	3708      	adds	r7, #8
 8000536:	46bd      	mov	sp, r7
 8000538:	bd80      	pop	{r7, pc}

0800053a <lcd_byte>:

static void lcd_byte(lcd_t *l , uint8_t byte, uint8_t dc){
 800053a:	b580      	push	{r7, lr}
 800053c:	b082      	sub	sp, #8
 800053e:	af00      	add	r7, sp, #0
 8000540:	6078      	str	r0, [r7, #4]
 8000542:	460b      	mov	r3, r1
 8000544:	70fb      	strb	r3, [r7, #3]
 8000546:	4613      	mov	r3, r2
 8000548:	70bb      	strb	r3, [r7, #2]
	if(dc==0){
 800054a:	78bb      	ldrb	r3, [r7, #2]
 800054c:	2b00      	cmp	r3, #0
 800054e:	d103      	bne.n	8000558 <lcd_byte+0x1e>
		lcd_reset_rs(l);
 8000550:	6878      	ldr	r0, [r7, #4]
 8000552:	f7ff ff54 	bl	80003fe <lcd_reset_rs>
 8000556:	e002      	b.n	800055e <lcd_byte+0x24>
	}
	else
		lcd_set_rs(l);
 8000558:	6878      	ldr	r0, [r7, #4]
 800055a:	f7ff ff3b 	bl	80003d4 <lcd_set_rs>

	lcd_nibble(l,byte>>4);
 800055e:	78fb      	ldrb	r3, [r7, #3]
 8000560:	091b      	lsrs	r3, r3, #4
 8000562:	b2db      	uxtb	r3, r3
 8000564:	4619      	mov	r1, r3
 8000566:	6878      	ldr	r0, [r7, #4]
 8000568:	f7ff ffbc 	bl	80004e4 <lcd_nibble>
	lcd_nibble(l,byte);
 800056c:	78fb      	ldrb	r3, [r7, #3]
 800056e:	4619      	mov	r1, r3
 8000570:	6878      	ldr	r0, [r7, #4]
 8000572:	f7ff ffb7 	bl	80004e4 <lcd_nibble>
}
 8000576:	bf00      	nop
 8000578:	3708      	adds	r7, #8
 800057a:	46bd      	mov	sp, r7
 800057c:	bd80      	pop	{r7, pc}

0800057e <lcd_init>:




void lcd_init(lcd_t *lcd,uint8_t addr,I2C_HandleTypeDef *hi2c){
 800057e:	b580      	push	{r7, lr}
 8000580:	b084      	sub	sp, #16
 8000582:	af00      	add	r7, sp, #0
 8000584:	60f8      	str	r0, [r7, #12]
 8000586:	460b      	mov	r3, r1
 8000588:	607a      	str	r2, [r7, #4]
 800058a:	72fb      	strb	r3, [r7, #11]
	(void)&lcd_reset_rw;
	(void)&lcd_reset_led;


	// init pcf struct
	lcd->addr=addr;
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	7afa      	ldrb	r2, [r7, #11]
 8000590:	701a      	strb	r2, [r3, #0]
	lcd->hi2c=hi2c;
 8000592:	68fb      	ldr	r3, [r7, #12]
 8000594:	687a      	ldr	r2, [r7, #4]
 8000596:	605a      	str	r2, [r3, #4]
	lcd->iostate=0;
 8000598:	68fb      	ldr	r3, [r7, #12]
 800059a:	2200      	movs	r2, #0
 800059c:	705a      	strb	r2, [r3, #1]

	lcd_set_led(lcd);
 800059e:	68f8      	ldr	r0, [r7, #12]
 80005a0:	f7ff ff42 	bl	8000428 <lcd_set_led>

	HAL_Delay(15); //wait to power up
 80005a4:	200f      	movs	r0, #15
 80005a6:	f000 fc4f 	bl	8000e48 <HAL_Delay>

	lcd_nibble(lcd,0x03);
 80005aa:	2103      	movs	r1, #3
 80005ac:	68f8      	ldr	r0, [r7, #12]
 80005ae:	f7ff ff99 	bl	80004e4 <lcd_nibble>
	HAL_Delay(45);
 80005b2:	202d      	movs	r0, #45	; 0x2d
 80005b4:	f000 fc48 	bl	8000e48 <HAL_Delay>
	lcd_nibble(lcd,0x03);
 80005b8:	2103      	movs	r1, #3
 80005ba:	68f8      	ldr	r0, [r7, #12]
 80005bc:	f7ff ff92 	bl	80004e4 <lcd_nibble>
	HAL_Delay(45);
 80005c0:	202d      	movs	r0, #45	; 0x2d
 80005c2:	f000 fc41 	bl	8000e48 <HAL_Delay>
	lcd_nibble(lcd,0x03);
 80005c6:	2103      	movs	r1, #3
 80005c8:	68f8      	ldr	r0, [r7, #12]
 80005ca:	f7ff ff8b 	bl	80004e4 <lcd_nibble>
	HAL_Delay(45);
 80005ce:	202d      	movs	r0, #45	; 0x2d
 80005d0:	f000 fc3a 	bl	8000e48 <HAL_Delay>
	lcd_nibble(lcd,0x02);
 80005d4:	2102      	movs	r1, #2
 80005d6:	68f8      	ldr	r0, [r7, #12]
 80005d8:	f7ff ff84 	bl	80004e4 <lcd_nibble>
	HAL_Delay(100);
 80005dc:	2064      	movs	r0, #100	; 0x64
 80005de:	f000 fc33 	bl	8000e48 <HAL_Delay>

	lcd_byte(lcd,0b00101000,0);
 80005e2:	2200      	movs	r2, #0
 80005e4:	2128      	movs	r1, #40	; 0x28
 80005e6:	68f8      	ldr	r0, [r7, #12]
 80005e8:	f7ff ffa7 	bl	800053a <lcd_byte>
	lcd_byte(lcd,0b00001100,0);
 80005ec:	2200      	movs	r2, #0
 80005ee:	210c      	movs	r1, #12
 80005f0:	68f8      	ldr	r0, [r7, #12]
 80005f2:	f7ff ffa2 	bl	800053a <lcd_byte>
	lcd_byte(lcd,0b00000110,0);
 80005f6:	2200      	movs	r2, #0
 80005f8:	2106      	movs	r1, #6
 80005fa:	68f8      	ldr	r0, [r7, #12]
 80005fc:	f7ff ff9d 	bl	800053a <lcd_byte>


	lcd_byte(lcd,0x01,0); // clear lcd
 8000600:	2200      	movs	r2, #0
 8000602:	2101      	movs	r1, #1
 8000604:	68f8      	ldr	r0, [r7, #12]
 8000606:	f7ff ff98 	bl	800053a <lcd_byte>
}
 800060a:	bf00      	nop
 800060c:	3710      	adds	r7, #16
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}

08000612 <lcd_char>:

void lcd_clear(lcd_t *lcd){
	lcd_byte(lcd,0x01,0);
}

void lcd_char(lcd_t *lcd, char c){
 8000612:	b580      	push	{r7, lr}
 8000614:	b082      	sub	sp, #8
 8000616:	af00      	add	r7, sp, #0
 8000618:	6078      	str	r0, [r7, #4]
 800061a:	460b      	mov	r3, r1
 800061c:	70fb      	strb	r3, [r7, #3]
	lcd_byte(lcd,c,1);
 800061e:	78fb      	ldrb	r3, [r7, #3]
 8000620:	2201      	movs	r2, #1
 8000622:	4619      	mov	r1, r3
 8000624:	6878      	ldr	r0, [r7, #4]
 8000626:	f7ff ff88 	bl	800053a <lcd_byte>
}
 800062a:	bf00      	nop
 800062c:	3708      	adds	r7, #8
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}

08000632 <lcd_string>:

void lcd_string(lcd_t *lcd, char *string){
 8000632:	b580      	push	{r7, lr}
 8000634:	b082      	sub	sp, #8
 8000636:	af00      	add	r7, sp, #0
 8000638:	6078      	str	r0, [r7, #4]
 800063a:	6039      	str	r1, [r7, #0]
	while(*string) lcd_char(lcd,*string++);
 800063c:	e007      	b.n	800064e <lcd_string+0x1c>
 800063e:	683b      	ldr	r3, [r7, #0]
 8000640:	1c5a      	adds	r2, r3, #1
 8000642:	603a      	str	r2, [r7, #0]
 8000644:	781b      	ldrb	r3, [r3, #0]
 8000646:	4619      	mov	r1, r3
 8000648:	6878      	ldr	r0, [r7, #4]
 800064a:	f7ff ffe2 	bl	8000612 <lcd_char>
 800064e:	683b      	ldr	r3, [r7, #0]
 8000650:	781b      	ldrb	r3, [r3, #0]
 8000652:	2b00      	cmp	r3, #0
 8000654:	d1f3      	bne.n	800063e <lcd_string+0xc>
}
 8000656:	bf00      	nop
 8000658:	3708      	adds	r7, #8
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}

0800065e <lcd_pos>:
	lcd_string(lcd,buffer);
}


// TODO: tests
void lcd_pos(lcd_t *lcd, int x, int y) {
 800065e:	b580      	push	{r7, lr}
 8000660:	b084      	sub	sp, #16
 8000662:	af00      	add	r7, sp, #0
 8000664:	60f8      	str	r0, [r7, #12]
 8000666:	60b9      	str	r1, [r7, #8]
 8000668:	607a      	str	r2, [r7, #4]
	switch (y) {
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	2b00      	cmp	r3, #0
 800066e:	d002      	beq.n	8000676 <lcd_pos+0x18>
 8000670:	2b01      	cmp	r3, #1
 8000672:	d00f      	beq.n	8000694 <lcd_pos+0x36>
	case 1:
		lcd_byte(lcd, (0x40 + x) | 0x80 , 0);
		HAL_Delay(1);
		break;
	}
}
 8000674:	e020      	b.n	80006b8 <lcd_pos+0x5a>
		lcd_byte(lcd, x | 0x80 , 0);
 8000676:	68bb      	ldr	r3, [r7, #8]
 8000678:	b25b      	sxtb	r3, r3
 800067a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800067e:	b25b      	sxtb	r3, r3
 8000680:	b2db      	uxtb	r3, r3
 8000682:	2200      	movs	r2, #0
 8000684:	4619      	mov	r1, r3
 8000686:	68f8      	ldr	r0, [r7, #12]
 8000688:	f7ff ff57 	bl	800053a <lcd_byte>
		HAL_Delay(1);
 800068c:	2001      	movs	r0, #1
 800068e:	f000 fbdb 	bl	8000e48 <HAL_Delay>
		break;
 8000692:	e011      	b.n	80006b8 <lcd_pos+0x5a>
		lcd_byte(lcd, (0x40 + x) | 0x80 , 0);
 8000694:	68bb      	ldr	r3, [r7, #8]
 8000696:	b2db      	uxtb	r3, r3
 8000698:	3340      	adds	r3, #64	; 0x40
 800069a:	b2db      	uxtb	r3, r3
 800069c:	b25b      	sxtb	r3, r3
 800069e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80006a2:	b25b      	sxtb	r3, r3
 80006a4:	b2db      	uxtb	r3, r3
 80006a6:	2200      	movs	r2, #0
 80006a8:	4619      	mov	r1, r3
 80006aa:	68f8      	ldr	r0, [r7, #12]
 80006ac:	f7ff ff45 	bl	800053a <lcd_byte>
		HAL_Delay(1);
 80006b0:	2001      	movs	r0, #1
 80006b2:	f000 fbc9 	bl	8000e48 <HAL_Delay>
		break;
 80006b6:	bf00      	nop
}
 80006b8:	bf00      	nop
 80006ba:	3710      	adds	r7, #16
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}

080006c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006c4:	f000 fb5e 	bl	8000d84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006c8:	f000 f848 	bl	800075c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006cc:	f7ff fd46 	bl	800015c <MX_GPIO_Init>
  MX_I2C2_Init();
 80006d0:	f7ff fdbc 	bl	800024c <MX_I2C2_Init>
  MX_USART1_UART_Init();
 80006d4:	f000 faba 	bl	8000c4c <MX_USART1_UART_Init>
  MX_I2C1_Init();
 80006d8:	f7ff fd8a 	bl	80001f0 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  uart_dbg_init(&huart1);
 80006dc:	4816      	ldr	r0, [pc, #88]	; (8000738 <main+0x78>)
 80006de:	f000 fa51 	bl	8000b84 <uart_dbg_init>
  clear_console();
 80006e2:	f000 fa9f 	bl	8000c24 <clear_console>
  dbg("Start!\n\r");
 80006e6:	4815      	ldr	r0, [pc, #84]	; (800073c <main+0x7c>)
 80006e8:	f000 fa8a 	bl	8000c00 <dbg>

  lcd_init(&lcd, LCD_I2C_ADDRESS<<1, LCD_I2C_HANDLER);
 80006ec:	4a14      	ldr	r2, [pc, #80]	; (8000740 <main+0x80>)
 80006ee:	217e      	movs	r1, #126	; 0x7e
 80006f0:	4814      	ldr	r0, [pc, #80]	; (8000744 <main+0x84>)
 80006f2:	f7ff ff44 	bl	800057e <lcd_init>
  lcd_string(&lcd, "RADIO 65-108MHz");
 80006f6:	4914      	ldr	r1, [pc, #80]	; (8000748 <main+0x88>)
 80006f8:	4812      	ldr	r0, [pc, #72]	; (8000744 <main+0x84>)
 80006fa:	f7ff ff9a 	bl	8000632 <lcd_string>
  lcd_pos(&lcd, 0, 1);
 80006fe:	2201      	movs	r2, #1
 8000700:	2100      	movs	r1, #0
 8000702:	4810      	ldr	r0, [pc, #64]	; (8000744 <main+0x84>)
 8000704:	f7ff ffab 	bl	800065e <lcd_pos>
  lcd_string(&lcd, "INICJALIZACJA");
 8000708:	4910      	ldr	r1, [pc, #64]	; (800074c <main+0x8c>)
 800070a:	480e      	ldr	r0, [pc, #56]	; (8000744 <main+0x84>)
 800070c:	f7ff ff91 	bl	8000632 <lcd_string>


  if(rda5807_init(&hi2c2)==RDA5807_NOT_FOUND)
 8000710:	480f      	ldr	r0, [pc, #60]	; (8000750 <main+0x90>)
 8000712:	f000 f86f 	bl	80007f4 <rda5807_init>
 8000716:	4603      	mov	r3, r0
 8000718:	f113 0f02 	cmn.w	r3, #2
 800071c:	d103      	bne.n	8000726 <main+0x66>
  {
	  dbg("RDA5807 module not found!\n\r");
 800071e:	480d      	ldr	r0, [pc, #52]	; (8000754 <main+0x94>)
 8000720:	f000 fa6e 	bl	8000c00 <dbg>
	  while(1);
 8000724:	e7fe      	b.n	8000724 <main+0x64>
  } else{
	  dbg("RDA5807 module found!\n\r");
 8000726:	480c      	ldr	r0, [pc, #48]	; (8000758 <main+0x98>)
 8000728:	f000 fa6a 	bl	8000c00 <dbg>
  }

  rda5807_read_status_ex();
 800072c:	f000 f952 	bl	80009d4 <rda5807_read_status_ex>
  rda5807_read_status();
 8000730:	f000 f91e 	bl	8000970 <rda5807_read_status>
  while(1);
 8000734:	e7fe      	b.n	8000734 <main+0x74>
 8000736:	bf00      	nop
 8000738:	20000204 	.word	0x20000204
 800073c:	0800400c 	.word	0x0800400c
 8000740:	20000098 	.word	0x20000098
 8000744:	20000140 	.word	0x20000140
 8000748:	08004018 	.word	0x08004018
 800074c:	08004028 	.word	0x08004028
 8000750:	200000ec 	.word	0x200000ec
 8000754:	08004038 	.word	0x08004038
 8000758:	08004054 	.word	0x08004054

0800075c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b090      	sub	sp, #64	; 0x40
 8000760:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000762:	f107 0318 	add.w	r3, r7, #24
 8000766:	2228      	movs	r2, #40	; 0x28
 8000768:	2100      	movs	r1, #0
 800076a:	4618      	mov	r0, r3
 800076c:	f003 f821 	bl	80037b2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000770:	1d3b      	adds	r3, r7, #4
 8000772:	2200      	movs	r2, #0
 8000774:	601a      	str	r2, [r3, #0]
 8000776:	605a      	str	r2, [r3, #4]
 8000778:	609a      	str	r2, [r3, #8]
 800077a:	60da      	str	r2, [r3, #12]
 800077c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800077e:	2301      	movs	r3, #1
 8000780:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000782:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000786:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000788:	2300      	movs	r3, #0
 800078a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800078c:	2301      	movs	r3, #1
 800078e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000790:	2302      	movs	r3, #2
 8000792:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000794:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000798:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800079a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800079e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007a0:	f107 0318 	add.w	r3, r7, #24
 80007a4:	4618      	mov	r0, r3
 80007a6:	f002 f9fb 	bl	8002ba0 <HAL_RCC_OscConfig>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d001      	beq.n	80007b4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80007b0:	f000 f819 	bl	80007e6 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007b4:	230f      	movs	r3, #15
 80007b6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007b8:	2302      	movs	r3, #2
 80007ba:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007bc:	2300      	movs	r3, #0
 80007be:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007c4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007c6:	2300      	movs	r3, #0
 80007c8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007ca:	1d3b      	adds	r3, r7, #4
 80007cc:	2102      	movs	r1, #2
 80007ce:	4618      	mov	r0, r3
 80007d0:	f002 fc66 	bl	80030a0 <HAL_RCC_ClockConfig>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <SystemClock_Config+0x82>
  {
    Error_Handler();
 80007da:	f000 f804 	bl	80007e6 <Error_Handler>
  }
}
 80007de:	bf00      	nop
 80007e0:	3740      	adds	r7, #64	; 0x40
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}

080007e6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007e6:	b480      	push	{r7}
 80007e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80007ea:	bf00      	nop
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bc80      	pop	{r7}
 80007f0:	4770      	bx	lr
	...

080007f4 <rda5807_init>:
uint16_t frequency;
uint16_t band;
uint8_t spacing = 1;
uint8_t volume;

int8_t rda5807_init(I2C_HandleTypeDef *i2c_h) {
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b082      	sub	sp, #8
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
	// check is RDA I2C working
	if (rda5807_check_is_connected(i2c_h) == RDA5807_NOT_FOUND) {
 80007fc:	6878      	ldr	r0, [r7, #4]
 80007fe:	f000 f869 	bl	80008d4 <rda5807_check_is_connected>
 8000802:	4603      	mov	r3, r0
 8000804:	f113 0f02 	cmn.w	r3, #2
 8000808:	d102      	bne.n	8000810 <rda5807_init+0x1c>
		return RDA5807_NOT_FOUND;
 800080a:	f06f 0301 	mvn.w	r3, #1
 800080e:	e059      	b.n	80008c4 <rda5807_init+0xd0>
	}
	rdahi2c = *i2c_h;
 8000810:	4a2e      	ldr	r2, [pc, #184]	; (80008cc <rda5807_init+0xd8>)
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	4610      	mov	r0, r2
 8000816:	4619      	mov	r1, r3
 8000818:	2354      	movs	r3, #84	; 0x54
 800081a:	461a      	mov	r2, r3
 800081c:	f002 ffbe 	bl	800379c <memcpy>

	// set init values of registers
	rda5807_config.reg02.refined.DMUTE = 1;
 8000820:	4a2b      	ldr	r2, [pc, #172]	; (80008d0 <rda5807_init+0xdc>)
 8000822:	7953      	ldrb	r3, [r2, #5]
 8000824:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000828:	7153      	strb	r3, [r2, #5]
	rda5807_config.reg02.refined.DHIZ = 1;
 800082a:	4a29      	ldr	r2, [pc, #164]	; (80008d0 <rda5807_init+0xdc>)
 800082c:	7953      	ldrb	r3, [r2, #5]
 800082e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000832:	7153      	strb	r3, [r2, #5]
	rda5807_config.reg02.refined.ENABLE = 1;
 8000834:	4a26      	ldr	r2, [pc, #152]	; (80008d0 <rda5807_init+0xdc>)
 8000836:	7913      	ldrb	r3, [r2, #4]
 8000838:	f043 0301 	orr.w	r3, r3, #1
 800083c:	7113      	strb	r3, [r2, #4]
	rda5807_config.reg02.refined.BASS = 1;
 800083e:	4a24      	ldr	r2, [pc, #144]	; (80008d0 <rda5807_init+0xdc>)
 8000840:	7953      	ldrb	r3, [r2, #5]
 8000842:	f043 0310 	orr.w	r3, r3, #16
 8000846:	7153      	strb	r3, [r2, #5]
	//rda5807_config.reg02.refined.RDS_EN = 1;

	rda5807_config.reg04.refined.RDS_FIFO_CLR = 1;
 8000848:	4a21      	ldr	r2, [pc, #132]	; (80008d0 <rda5807_init+0xdc>)
 800084a:	7a53      	ldrb	r3, [r2, #9]
 800084c:	f043 0304 	orr.w	r3, r3, #4
 8000850:	7253      	strb	r3, [r2, #9]

	rda5807_config.reg05.refined.INT_MODE = 0;
 8000852:	4a1f      	ldr	r2, [pc, #124]	; (80008d0 <rda5807_init+0xdc>)
 8000854:	7ad3      	ldrb	r3, [r2, #11]
 8000856:	f36f 13c7 	bfc	r3, #7, #1
 800085a:	72d3      	strb	r3, [r2, #11]
	rda5807_config.reg05.refined.LNA_PORT_SEL = 2;
 800085c:	4a1c      	ldr	r2, [pc, #112]	; (80008d0 <rda5807_init+0xdc>)
 800085e:	7a93      	ldrb	r3, [r2, #10]
 8000860:	2102      	movs	r1, #2
 8000862:	f361 1387 	bfi	r3, r1, #6, #2
 8000866:	7293      	strb	r3, [r2, #10]
	rda5807_config.reg05.refined.LNA_ICSEL_BIT = 0;
 8000868:	4a19      	ldr	r2, [pc, #100]	; (80008d0 <rda5807_init+0xdc>)
 800086a:	7a93      	ldrb	r3, [r2, #10]
 800086c:	f36f 1305 	bfc	r3, #4, #2
 8000870:	7293      	strb	r3, [r2, #10]
	rda5807_config.reg05.refined.SEEKTH = 8;
 8000872:	4a17      	ldr	r2, [pc, #92]	; (80008d0 <rda5807_init+0xdc>)
 8000874:	7ad3      	ldrb	r3, [r2, #11]
 8000876:	2108      	movs	r1, #8
 8000878:	f361 0303 	bfi	r3, r1, #0, #4
 800087c:	72d3      	strb	r3, [r2, #11]
	rda5807_config.reg05.refined.VOLUME = 0b0001;
 800087e:	4a14      	ldr	r2, [pc, #80]	; (80008d0 <rda5807_init+0xdc>)
 8000880:	7a93      	ldrb	r3, [r2, #10]
 8000882:	2101      	movs	r1, #1
 8000884:	f361 0303 	bfi	r3, r1, #0, #4
 8000888:	7293      	strb	r3, [r2, #10]

	//rda5807_config.reg03.refined.CHAN = 0x15F;

	// TODO:
	//rda5807_write_register(0x02, 2); // software reset chip;
	rda5807_write_register(0x03, rda5807_config.reg03.raw);
 800088a:	4b11      	ldr	r3, [pc, #68]	; (80008d0 <rda5807_init+0xdc>)
 800088c:	88db      	ldrh	r3, [r3, #6]
 800088e:	4619      	mov	r1, r3
 8000890:	2003      	movs	r0, #3
 8000892:	f000 f839 	bl	8000908 <rda5807_write_register>
	rda5807_write_register(0x02, rda5807_config.reg02.raw);
 8000896:	4b0e      	ldr	r3, [pc, #56]	; (80008d0 <rda5807_init+0xdc>)
 8000898:	889b      	ldrh	r3, [r3, #4]
 800089a:	4619      	mov	r1, r3
 800089c:	2002      	movs	r0, #2
 800089e:	f000 f833 	bl	8000908 <rda5807_write_register>
	rda5807_write_register(0x05, rda5807_config.reg05.raw);
 80008a2:	4b0b      	ldr	r3, [pc, #44]	; (80008d0 <rda5807_init+0xdc>)
 80008a4:	895b      	ldrh	r3, [r3, #10]
 80008a6:	4619      	mov	r1, r3
 80008a8:	2005      	movs	r0, #5
 80008aa:	f000 f82d 	bl	8000908 <rda5807_write_register>
	rda5807_write_register(0x02, rda5807_config.reg02.raw);
 80008ae:	4b08      	ldr	r3, [pc, #32]	; (80008d0 <rda5807_init+0xdc>)
 80008b0:	889b      	ldrh	r3, [r3, #4]
 80008b2:	4619      	mov	r1, r3
 80008b4:	2002      	movs	r0, #2
 80008b6:	f000 f827 	bl	8000908 <rda5807_write_register>

	HAL_Delay(500);
 80008ba:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80008be:	f000 fac3 	bl	8000e48 <HAL_Delay>

	//rda5807_write_register(0x02, 0b1111000000000001);
	//rda5807_write_register(0x05, 0b0000100010111111);

	return RDA5807_OK;
 80008c2:	2300      	movs	r3, #0
}
 80008c4:	4618      	mov	r0, r3
 80008c6:	3708      	adds	r7, #8
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	2000014c 	.word	0x2000014c
 80008d0:	200001b0 	.word	0x200001b0

080008d4 <rda5807_check_is_connected>:

int8_t rda5807_check_is_connected(I2C_HandleTypeDef *i2c) {
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b084      	sub	sp, #16
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
	uint8_t err = 0;
 80008dc:	2300      	movs	r3, #0
 80008de:	73fb      	strb	r3, [r7, #15]
	err = HAL_I2C_IsDeviceReady(i2c, 0x10 << 1, 2, 50);
 80008e0:	2332      	movs	r3, #50	; 0x32
 80008e2:	2202      	movs	r2, #2
 80008e4:	2120      	movs	r1, #32
 80008e6:	6878      	ldr	r0, [r7, #4]
 80008e8:	f001 fc18 	bl	800211c <HAL_I2C_IsDeviceReady>
 80008ec:	4603      	mov	r3, r0
 80008ee:	73fb      	strb	r3, [r7, #15]
	return err ? RDA5807_NOT_FOUND : RDA5807_OK;
 80008f0:	7bfb      	ldrb	r3, [r7, #15]
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d002      	beq.n	80008fc <rda5807_check_is_connected+0x28>
 80008f6:	f06f 0301 	mvn.w	r3, #1
 80008fa:	e000      	b.n	80008fe <rda5807_check_is_connected+0x2a>
 80008fc:	2300      	movs	r3, #0
}
 80008fe:	4618      	mov	r0, r3
 8000900:	3710      	adds	r7, #16
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
	...

08000908 <rda5807_write_register>:

int8_t rda5807_write_register(uint8_t reg, uint16_t val) {
 8000908:	b580      	push	{r7, lr}
 800090a:	b086      	sub	sp, #24
 800090c:	af02      	add	r7, sp, #8
 800090e:	4603      	mov	r3, r0
 8000910:	460a      	mov	r2, r1
 8000912:	71fb      	strb	r3, [r7, #7]
 8000914:	4613      	mov	r3, r2
 8000916:	80bb      	strh	r3, [r7, #4]
	// check register addres is valid
	if (reg < 0x02 || reg > 0x08)
 8000918:	79fb      	ldrb	r3, [r7, #7]
 800091a:	2b01      	cmp	r3, #1
 800091c:	d902      	bls.n	8000924 <rda5807_write_register+0x1c>
 800091e:	79fb      	ldrb	r3, [r7, #7]
 8000920:	2b08      	cmp	r3, #8
 8000922:	d902      	bls.n	800092a <rda5807_write_register+0x22>
		return RDA5807_WRITE_ERROR;
 8000924:	f06f 0302 	mvn.w	r3, #2
 8000928:	e01c      	b.n	8000964 <rda5807_write_register+0x5c>
	// prepare send buffer
	uint8_t data[3];
	data[0] = reg;
 800092a:	79fb      	ldrb	r3, [r7, #7]
 800092c:	733b      	strb	r3, [r7, #12]
	data[1] = val >> 8;
 800092e:	88bb      	ldrh	r3, [r7, #4]
 8000930:	0a1b      	lsrs	r3, r3, #8
 8000932:	b29b      	uxth	r3, r3
 8000934:	b2db      	uxtb	r3, r3
 8000936:	737b      	strb	r3, [r7, #13]
	data[2] = (uint8_t) val & 0xFF;
 8000938:	88bb      	ldrh	r3, [r7, #4]
 800093a:	b2db      	uxtb	r3, r3
 800093c:	73bb      	strb	r3, [r7, #14]

	// send data to rda5807
	HAL_StatusTypeDef err;
	err = HAL_I2C_Master_Transmit(&rdahi2c, 0x11 << 1, data, 3, 300);
 800093e:	f107 020c 	add.w	r2, r7, #12
 8000942:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8000946:	9300      	str	r3, [sp, #0]
 8000948:	2303      	movs	r3, #3
 800094a:	2122      	movs	r1, #34	; 0x22
 800094c:	4807      	ldr	r0, [pc, #28]	; (800096c <rda5807_write_register+0x64>)
 800094e:	f000 fe2b 	bl	80015a8 <HAL_I2C_Master_Transmit>
 8000952:	4603      	mov	r3, r0
 8000954:	73fb      	strb	r3, [r7, #15]
	if (err != HAL_OK)
 8000956:	7bfb      	ldrb	r3, [r7, #15]
 8000958:	2b00      	cmp	r3, #0
 800095a:	d002      	beq.n	8000962 <rda5807_write_register+0x5a>
		return RDA5807_WRITE_ERROR;
 800095c:	f06f 0302 	mvn.w	r3, #2
 8000960:	e000      	b.n	8000964 <rda5807_write_register+0x5c>
	return RDA5807_OK;
 8000962:	2300      	movs	r3, #0
}
 8000964:	4618      	mov	r0, r3
 8000966:	3710      	adds	r7, #16
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}
 800096c:	2000014c 	.word	0x2000014c

08000970 <rda5807_read_status>:

void rda5807_read_status(void) {
 8000970:	b580      	push	{r7, lr}
 8000972:	b082      	sub	sp, #8
 8000974:	af02      	add	r7, sp, #8
	HAL_I2C_Master_Receive(&rdahi2c, 0x10<<1, (uint8_t*)&rda5807_status, 12, 10);
 8000976:	230a      	movs	r3, #10
 8000978:	9300      	str	r3, [sp, #0]
 800097a:	230c      	movs	r3, #12
 800097c:	4a0f      	ldr	r2, [pc, #60]	; (80009bc <rda5807_read_status+0x4c>)
 800097e:	2120      	movs	r1, #32
 8000980:	480f      	ldr	r0, [pc, #60]	; (80009c0 <rda5807_read_status+0x50>)
 8000982:	f000 ff0f 	bl	80017a4 <HAL_I2C_Master_Receive>
	dbg("a %x\n\r",rda5807_status.reg0a.raw);
 8000986:	4b0d      	ldr	r3, [pc, #52]	; (80009bc <rda5807_read_status+0x4c>)
 8000988:	881b      	ldrh	r3, [r3, #0]
 800098a:	4619      	mov	r1, r3
 800098c:	480d      	ldr	r0, [pc, #52]	; (80009c4 <rda5807_read_status+0x54>)
 800098e:	f000 f937 	bl	8000c00 <dbg>
	dbg("b %x\n\r",rda5807_status.reg0b.raw);
 8000992:	4b0a      	ldr	r3, [pc, #40]	; (80009bc <rda5807_read_status+0x4c>)
 8000994:	885b      	ldrh	r3, [r3, #2]
 8000996:	4619      	mov	r1, r3
 8000998:	480b      	ldr	r0, [pc, #44]	; (80009c8 <rda5807_read_status+0x58>)
 800099a:	f000 f931 	bl	8000c00 <dbg>
	dbg("c %x\n\r",rda5807_status.reg0c.RDSA);
 800099e:	4b07      	ldr	r3, [pc, #28]	; (80009bc <rda5807_read_status+0x4c>)
 80009a0:	889b      	ldrh	r3, [r3, #4]
 80009a2:	4619      	mov	r1, r3
 80009a4:	4809      	ldr	r0, [pc, #36]	; (80009cc <rda5807_read_status+0x5c>)
 80009a6:	f000 f92b 	bl	8000c00 <dbg>
	dbg("d %x\n\r",rda5807_status.reg0d.RDSB);
 80009aa:	4b04      	ldr	r3, [pc, #16]	; (80009bc <rda5807_read_status+0x4c>)
 80009ac:	88db      	ldrh	r3, [r3, #6]
 80009ae:	4619      	mov	r1, r3
 80009b0:	4807      	ldr	r0, [pc, #28]	; (80009d0 <rda5807_read_status+0x60>)
 80009b2:	f000 f925 	bl	8000c00 <dbg>
}
 80009b6:	bf00      	nop
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	200001a4 	.word	0x200001a4
 80009c0:	2000014c 	.word	0x2000014c
 80009c4:	0800406c 	.word	0x0800406c
 80009c8:	08004074 	.word	0x08004074
 80009cc:	0800407c 	.word	0x0800407c
 80009d0:	08004084 	.word	0x08004084

080009d4 <rda5807_read_status_ex>:

void rda5807_read_status_ex(void) {
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b0c6      	sub	sp, #280	; 0x118
 80009d8:	af04      	add	r7, sp, #16
	uint8_t data[256];
	memset(data, 0, 256);
 80009da:	1d3b      	adds	r3, r7, #4
 80009dc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80009e0:	2100      	movs	r1, #0
 80009e2:	4618      	mov	r0, r3
 80009e4:	f002 fee5 	bl	80037b2 <memset>
	//int error = HAL_I2C_Master_Receive(&hi2c2, 0x11<<1, data,64, 10);
	HAL_I2C_Mem_Read(&rdahi2c, 0x11 << 1, 0, 2, data, 32, 10);
 80009e8:	230a      	movs	r3, #10
 80009ea:	9302      	str	r3, [sp, #8]
 80009ec:	2320      	movs	r3, #32
 80009ee:	9301      	str	r3, [sp, #4]
 80009f0:	1d3b      	adds	r3, r7, #4
 80009f2:	9300      	str	r3, [sp, #0]
 80009f4:	2302      	movs	r3, #2
 80009f6:	2200      	movs	r2, #0
 80009f8:	2122      	movs	r1, #34	; 0x22
 80009fa:	4814      	ldr	r0, [pc, #80]	; (8000a4c <rda5807_read_status_ex+0x78>)
 80009fc:	f001 f92c 	bl	8001c58 <HAL_I2C_Mem_Read>

	for (int i = 0; i < 16; i++) {
 8000a00:	2300      	movs	r3, #0
 8000a02:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8000a06:	e017      	b.n	8000a38 <rda5807_read_status_ex+0x64>
		dbg("reg %d = %x\n\r", i, ((data[i * 2] << 8) + data[i * 2 + 1]));
 8000a08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8000a0c:	005b      	lsls	r3, r3, #1
 8000a0e:	1d3a      	adds	r2, r7, #4
 8000a10:	5cd3      	ldrb	r3, [r2, r3]
 8000a12:	021b      	lsls	r3, r3, #8
 8000a14:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8000a18:	0052      	lsls	r2, r2, #1
 8000a1a:	3201      	adds	r2, #1
 8000a1c:	1d39      	adds	r1, r7, #4
 8000a1e:	5c8a      	ldrb	r2, [r1, r2]
 8000a20:	4413      	add	r3, r2
 8000a22:	461a      	mov	r2, r3
 8000a24:	f8d7 1104 	ldr.w	r1, [r7, #260]	; 0x104
 8000a28:	4809      	ldr	r0, [pc, #36]	; (8000a50 <rda5807_read_status_ex+0x7c>)
 8000a2a:	f000 f8e9 	bl	8000c00 <dbg>
	for (int i = 0; i < 16; i++) {
 8000a2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8000a32:	3301      	adds	r3, #1
 8000a34:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8000a38:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8000a3c:	2b0f      	cmp	r3, #15
 8000a3e:	dde3      	ble.n	8000a08 <rda5807_read_status_ex+0x34>
	}

}
 8000a40:	bf00      	nop
 8000a42:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	2000014c 	.word	0x2000014c
 8000a50:	0800408c 	.word	0x0800408c

08000a54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	b085      	sub	sp, #20
 8000a58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000a5a:	4b15      	ldr	r3, [pc, #84]	; (8000ab0 <HAL_MspInit+0x5c>)
 8000a5c:	699b      	ldr	r3, [r3, #24]
 8000a5e:	4a14      	ldr	r2, [pc, #80]	; (8000ab0 <HAL_MspInit+0x5c>)
 8000a60:	f043 0301 	orr.w	r3, r3, #1
 8000a64:	6193      	str	r3, [r2, #24]
 8000a66:	4b12      	ldr	r3, [pc, #72]	; (8000ab0 <HAL_MspInit+0x5c>)
 8000a68:	699b      	ldr	r3, [r3, #24]
 8000a6a:	f003 0301 	and.w	r3, r3, #1
 8000a6e:	60bb      	str	r3, [r7, #8]
 8000a70:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a72:	4b0f      	ldr	r3, [pc, #60]	; (8000ab0 <HAL_MspInit+0x5c>)
 8000a74:	69db      	ldr	r3, [r3, #28]
 8000a76:	4a0e      	ldr	r2, [pc, #56]	; (8000ab0 <HAL_MspInit+0x5c>)
 8000a78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a7c:	61d3      	str	r3, [r2, #28]
 8000a7e:	4b0c      	ldr	r3, [pc, #48]	; (8000ab0 <HAL_MspInit+0x5c>)
 8000a80:	69db      	ldr	r3, [r3, #28]
 8000a82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a86:	607b      	str	r3, [r7, #4]
 8000a88:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000a8a:	4b0a      	ldr	r3, [pc, #40]	; (8000ab4 <HAL_MspInit+0x60>)
 8000a8c:	685b      	ldr	r3, [r3, #4]
 8000a8e:	60fb      	str	r3, [r7, #12]
 8000a90:	68fb      	ldr	r3, [r7, #12]
 8000a92:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000a96:	60fb      	str	r3, [r7, #12]
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000a9e:	60fb      	str	r3, [r7, #12]
 8000aa0:	4a04      	ldr	r2, [pc, #16]	; (8000ab4 <HAL_MspInit+0x60>)
 8000aa2:	68fb      	ldr	r3, [r7, #12]
 8000aa4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aa6:	bf00      	nop
 8000aa8:	3714      	adds	r7, #20
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bc80      	pop	{r7}
 8000aae:	4770      	bx	lr
 8000ab0:	40021000 	.word	0x40021000
 8000ab4:	40010000 	.word	0x40010000

08000ab8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000abc:	bf00      	nop
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bc80      	pop	{r7}
 8000ac2:	4770      	bx	lr

08000ac4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ac8:	e7fe      	b.n	8000ac8 <HardFault_Handler+0x4>

08000aca <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000aca:	b480      	push	{r7}
 8000acc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ace:	e7fe      	b.n	8000ace <MemManage_Handler+0x4>

08000ad0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ad4:	e7fe      	b.n	8000ad4 <BusFault_Handler+0x4>

08000ad6 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ad6:	b480      	push	{r7}
 8000ad8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ada:	e7fe      	b.n	8000ada <UsageFault_Handler+0x4>

08000adc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ae0:	bf00      	nop
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bc80      	pop	{r7}
 8000ae6:	4770      	bx	lr

08000ae8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000aec:	bf00      	nop
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bc80      	pop	{r7}
 8000af2:	4770      	bx	lr

08000af4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000af8:	bf00      	nop
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bc80      	pop	{r7}
 8000afe:	4770      	bx	lr

08000b00 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b04:	f000 f984 	bl	8000e10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b08:	bf00      	nop
 8000b0a:	bd80      	pop	{r7, pc}

08000b0c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b086      	sub	sp, #24
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b14:	4a14      	ldr	r2, [pc, #80]	; (8000b68 <_sbrk+0x5c>)
 8000b16:	4b15      	ldr	r3, [pc, #84]	; (8000b6c <_sbrk+0x60>)
 8000b18:	1ad3      	subs	r3, r2, r3
 8000b1a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b1c:	697b      	ldr	r3, [r7, #20]
 8000b1e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b20:	4b13      	ldr	r3, [pc, #76]	; (8000b70 <_sbrk+0x64>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d102      	bne.n	8000b2e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b28:	4b11      	ldr	r3, [pc, #68]	; (8000b70 <_sbrk+0x64>)
 8000b2a:	4a12      	ldr	r2, [pc, #72]	; (8000b74 <_sbrk+0x68>)
 8000b2c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b2e:	4b10      	ldr	r3, [pc, #64]	; (8000b70 <_sbrk+0x64>)
 8000b30:	681a      	ldr	r2, [r3, #0]
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	4413      	add	r3, r2
 8000b36:	693a      	ldr	r2, [r7, #16]
 8000b38:	429a      	cmp	r2, r3
 8000b3a:	d207      	bcs.n	8000b4c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b3c:	f002 fe04 	bl	8003748 <__errno>
 8000b40:	4602      	mov	r2, r0
 8000b42:	230c      	movs	r3, #12
 8000b44:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000b46:	f04f 33ff 	mov.w	r3, #4294967295
 8000b4a:	e009      	b.n	8000b60 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b4c:	4b08      	ldr	r3, [pc, #32]	; (8000b70 <_sbrk+0x64>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b52:	4b07      	ldr	r3, [pc, #28]	; (8000b70 <_sbrk+0x64>)
 8000b54:	681a      	ldr	r2, [r3, #0]
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	4413      	add	r3, r2
 8000b5a:	4a05      	ldr	r2, [pc, #20]	; (8000b70 <_sbrk+0x64>)
 8000b5c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b5e:	68fb      	ldr	r3, [r7, #12]
}
 8000b60:	4618      	mov	r0, r3
 8000b62:	3718      	adds	r7, #24
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	20005000 	.word	0x20005000
 8000b6c:	00000400 	.word	0x00000400
 8000b70:	2000008c 	.word	0x2000008c
 8000b74:	20000250 	.word	0x20000250

08000b78 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b7c:	bf00      	nop
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bc80      	pop	{r7}
 8000b82:	4770      	bx	lr

08000b84 <uart_dbg_init>:
#include "main.h"


UART_HandleTypeDef dbg_uart_handler;

void uart_dbg_init(UART_HandleTypeDef* uart_handler){
 8000b84:	b5b0      	push	{r4, r5, r7, lr}
 8000b86:	b082      	sub	sp, #8
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
	dbg_uart_handler = *uart_handler;
 8000b8c:	4a0a      	ldr	r2, [pc, #40]	; (8000bb8 <uart_dbg_init+0x34>)
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	4614      	mov	r4, r2
 8000b92:	461d      	mov	r5, r3
 8000b94:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b9c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b9e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ba0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000ba4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	clear_console();
 8000ba8:	f000 f83c 	bl	8000c24 <clear_console>
	hide_cursor_console();
 8000bac:	f000 f844 	bl	8000c38 <hide_cursor_console>
}
 8000bb0:	bf00      	nop
 8000bb2:	3708      	adds	r7, #8
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bdb0      	pop	{r4, r5, r7, pc}
 8000bb8:	200001c4 	.word	0x200001c4

08000bbc <vprint>:


void vprint(const char *fmt, va_list argp)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b09c      	sub	sp, #112	; 0x70
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
 8000bc4:	6039      	str	r1, [r7, #0]
    char string[100];
    if(0 < vsprintf(string,fmt,argp)) // build string
 8000bc6:	f107 030c 	add.w	r3, r7, #12
 8000bca:	683a      	ldr	r2, [r7, #0]
 8000bcc:	6879      	ldr	r1, [r7, #4]
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f002 fe0e 	bl	80037f0 <vsiprintf>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	dd0c      	ble.n	8000bf4 <vprint+0x38>
    {
        HAL_UART_Transmit(&dbg_uart_handler, (uint8_t*)string, strlen(string),10); // send message via UART
 8000bda:	f107 030c 	add.w	r3, r7, #12
 8000bde:	4618      	mov	r0, r3
 8000be0:	f7ff fab4 	bl	800014c <strlen>
 8000be4:	4603      	mov	r3, r0
 8000be6:	b29a      	uxth	r2, r3
 8000be8:	f107 010c 	add.w	r1, r7, #12
 8000bec:	230a      	movs	r3, #10
 8000bee:	4803      	ldr	r0, [pc, #12]	; (8000bfc <vprint+0x40>)
 8000bf0:	f002 fc3f 	bl	8003472 <HAL_UART_Transmit>
    }
}
 8000bf4:	bf00      	nop
 8000bf6:	3770      	adds	r7, #112	; 0x70
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	200001c4 	.word	0x200001c4

08000c00 <dbg>:

void dbg(const char *fmt, ...) // custom printf() function
{
 8000c00:	b40f      	push	{r0, r1, r2, r3}
 8000c02:	b580      	push	{r7, lr}
 8000c04:	b082      	sub	sp, #8
 8000c06:	af00      	add	r7, sp, #0
    va_list argp;
    va_start(argp, fmt);
 8000c08:	f107 0314 	add.w	r3, r7, #20
 8000c0c:	607b      	str	r3, [r7, #4]
    vprint(fmt, argp);
 8000c0e:	6879      	ldr	r1, [r7, #4]
 8000c10:	6938      	ldr	r0, [r7, #16]
 8000c12:	f7ff ffd3 	bl	8000bbc <vprint>
    va_end(argp);
}
 8000c16:	bf00      	nop
 8000c18:	3708      	adds	r7, #8
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000c20:	b004      	add	sp, #16
 8000c22:	4770      	bx	lr

08000c24 <clear_console>:

void clear_console(void){
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
  dbg("\033[2J\033[H");// clear console window
 8000c28:	4802      	ldr	r0, [pc, #8]	; (8000c34 <clear_console+0x10>)
 8000c2a:	f7ff ffe9 	bl	8000c00 <dbg>
}
 8000c2e:	bf00      	nop
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	0800409c 	.word	0x0800409c

08000c38 <hide_cursor_console>:

void home_console(void){
  dbg("\033[H");// clear console window
}

void hide_cursor_console(void){
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
	dbg("\e[?25l");
 8000c3c:	4802      	ldr	r0, [pc, #8]	; (8000c48 <hide_cursor_console+0x10>)
 8000c3e:	f7ff ffdf 	bl	8000c00 <dbg>
}
 8000c42:	bf00      	nop
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	080040a8 	.word	0x080040a8

08000c4c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8000c50:	4b11      	ldr	r3, [pc, #68]	; (8000c98 <MX_USART1_UART_Init+0x4c>)
 8000c52:	4a12      	ldr	r2, [pc, #72]	; (8000c9c <MX_USART1_UART_Init+0x50>)
 8000c54:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000c56:	4b10      	ldr	r3, [pc, #64]	; (8000c98 <MX_USART1_UART_Init+0x4c>)
 8000c58:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c5c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c5e:	4b0e      	ldr	r3, [pc, #56]	; (8000c98 <MX_USART1_UART_Init+0x4c>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c64:	4b0c      	ldr	r3, [pc, #48]	; (8000c98 <MX_USART1_UART_Init+0x4c>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000c6a:	4b0b      	ldr	r3, [pc, #44]	; (8000c98 <MX_USART1_UART_Init+0x4c>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c70:	4b09      	ldr	r3, [pc, #36]	; (8000c98 <MX_USART1_UART_Init+0x4c>)
 8000c72:	220c      	movs	r2, #12
 8000c74:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c76:	4b08      	ldr	r3, [pc, #32]	; (8000c98 <MX_USART1_UART_Init+0x4c>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c7c:	4b06      	ldr	r3, [pc, #24]	; (8000c98 <MX_USART1_UART_Init+0x4c>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c82:	4805      	ldr	r0, [pc, #20]	; (8000c98 <MX_USART1_UART_Init+0x4c>)
 8000c84:	f002 fba8 	bl	80033d8 <HAL_UART_Init>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d001      	beq.n	8000c92 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000c8e:	f7ff fdaa 	bl	80007e6 <Error_Handler>
  }

}
 8000c92:	bf00      	nop
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	20000204 	.word	0x20000204
 8000c9c:	40013800 	.word	0x40013800

08000ca0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b088      	sub	sp, #32
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca8:	f107 0310 	add.w	r3, r7, #16
 8000cac:	2200      	movs	r2, #0
 8000cae:	601a      	str	r2, [r3, #0]
 8000cb0:	605a      	str	r2, [r3, #4]
 8000cb2:	609a      	str	r2, [r3, #8]
 8000cb4:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	4a1c      	ldr	r2, [pc, #112]	; (8000d2c <HAL_UART_MspInit+0x8c>)
 8000cbc:	4293      	cmp	r3, r2
 8000cbe:	d131      	bne.n	8000d24 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000cc0:	4b1b      	ldr	r3, [pc, #108]	; (8000d30 <HAL_UART_MspInit+0x90>)
 8000cc2:	699b      	ldr	r3, [r3, #24]
 8000cc4:	4a1a      	ldr	r2, [pc, #104]	; (8000d30 <HAL_UART_MspInit+0x90>)
 8000cc6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cca:	6193      	str	r3, [r2, #24]
 8000ccc:	4b18      	ldr	r3, [pc, #96]	; (8000d30 <HAL_UART_MspInit+0x90>)
 8000cce:	699b      	ldr	r3, [r3, #24]
 8000cd0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cd4:	60fb      	str	r3, [r7, #12]
 8000cd6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cd8:	4b15      	ldr	r3, [pc, #84]	; (8000d30 <HAL_UART_MspInit+0x90>)
 8000cda:	699b      	ldr	r3, [r3, #24]
 8000cdc:	4a14      	ldr	r2, [pc, #80]	; (8000d30 <HAL_UART_MspInit+0x90>)
 8000cde:	f043 0304 	orr.w	r3, r3, #4
 8000ce2:	6193      	str	r3, [r2, #24]
 8000ce4:	4b12      	ldr	r3, [pc, #72]	; (8000d30 <HAL_UART_MspInit+0x90>)
 8000ce6:	699b      	ldr	r3, [r3, #24]
 8000ce8:	f003 0304 	and.w	r3, r3, #4
 8000cec:	60bb      	str	r3, [r7, #8]
 8000cee:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000cf0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000cf4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf6:	2302      	movs	r3, #2
 8000cf8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cfa:	2303      	movs	r3, #3
 8000cfc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cfe:	f107 0310 	add.w	r3, r7, #16
 8000d02:	4619      	mov	r1, r3
 8000d04:	480b      	ldr	r0, [pc, #44]	; (8000d34 <HAL_UART_MspInit+0x94>)
 8000d06:	f000 f9a5 	bl	8001054 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000d0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d0e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d10:	2300      	movs	r3, #0
 8000d12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d14:	2300      	movs	r3, #0
 8000d16:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d18:	f107 0310 	add.w	r3, r7, #16
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	4805      	ldr	r0, [pc, #20]	; (8000d34 <HAL_UART_MspInit+0x94>)
 8000d20:	f000 f998 	bl	8001054 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000d24:	bf00      	nop
 8000d26:	3720      	adds	r7, #32
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	40013800 	.word	0x40013800
 8000d30:	40021000 	.word	0x40021000
 8000d34:	40010800 	.word	0x40010800

08000d38 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000d38:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000d3a:	e003      	b.n	8000d44 <LoopCopyDataInit>

08000d3c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000d3c:	4b0b      	ldr	r3, [pc, #44]	; (8000d6c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000d3e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000d40:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000d42:	3104      	adds	r1, #4

08000d44 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000d44:	480a      	ldr	r0, [pc, #40]	; (8000d70 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000d46:	4b0b      	ldr	r3, [pc, #44]	; (8000d74 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000d48:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000d4a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000d4c:	d3f6      	bcc.n	8000d3c <CopyDataInit>
  ldr r2, =_sbss
 8000d4e:	4a0a      	ldr	r2, [pc, #40]	; (8000d78 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000d50:	e002      	b.n	8000d58 <LoopFillZerobss>

08000d52 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000d52:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000d54:	f842 3b04 	str.w	r3, [r2], #4

08000d58 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000d58:	4b08      	ldr	r3, [pc, #32]	; (8000d7c <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000d5a:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000d5c:	d3f9      	bcc.n	8000d52 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000d5e:	f7ff ff0b 	bl	8000b78 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d62:	f002 fcf7 	bl	8003754 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d66:	f7ff fcab 	bl	80006c0 <main>
  bx lr
 8000d6a:	4770      	bx	lr
  ldr r3, =_sidata
 8000d6c:	08004120 	.word	0x08004120
  ldr r0, =_sdata
 8000d70:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000d74:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 8000d78:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 8000d7c:	2000024c 	.word	0x2000024c

08000d80 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d80:	e7fe      	b.n	8000d80 <ADC1_2_IRQHandler>
	...

08000d84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d88:	4b08      	ldr	r3, [pc, #32]	; (8000dac <HAL_Init+0x28>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4a07      	ldr	r2, [pc, #28]	; (8000dac <HAL_Init+0x28>)
 8000d8e:	f043 0310 	orr.w	r3, r3, #16
 8000d92:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d94:	2003      	movs	r0, #3
 8000d96:	f000 f929 	bl	8000fec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d9a:	2000      	movs	r0, #0
 8000d9c:	f000 f808 	bl	8000db0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000da0:	f7ff fe58 	bl	8000a54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000da4:	2300      	movs	r3, #0
}
 8000da6:	4618      	mov	r0, r3
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	40022000 	.word	0x40022000

08000db0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b082      	sub	sp, #8
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000db8:	4b12      	ldr	r3, [pc, #72]	; (8000e04 <HAL_InitTick+0x54>)
 8000dba:	681a      	ldr	r2, [r3, #0]
 8000dbc:	4b12      	ldr	r3, [pc, #72]	; (8000e08 <HAL_InitTick+0x58>)
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dc6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dca:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f000 f933 	bl	800103a <HAL_SYSTICK_Config>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d001      	beq.n	8000dde <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000dda:	2301      	movs	r3, #1
 8000ddc:	e00e      	b.n	8000dfc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	2b0f      	cmp	r3, #15
 8000de2:	d80a      	bhi.n	8000dfa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000de4:	2200      	movs	r2, #0
 8000de6:	6879      	ldr	r1, [r7, #4]
 8000de8:	f04f 30ff 	mov.w	r0, #4294967295
 8000dec:	f000 f909 	bl	8001002 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000df0:	4a06      	ldr	r2, [pc, #24]	; (8000e0c <HAL_InitTick+0x5c>)
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000df6:	2300      	movs	r3, #0
 8000df8:	e000      	b.n	8000dfc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000dfa:	2301      	movs	r3, #1
}
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	3708      	adds	r7, #8
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	20000000 	.word	0x20000000
 8000e08:	20000008 	.word	0x20000008
 8000e0c:	20000004 	.word	0x20000004

08000e10 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e14:	4b05      	ldr	r3, [pc, #20]	; (8000e2c <HAL_IncTick+0x1c>)
 8000e16:	781b      	ldrb	r3, [r3, #0]
 8000e18:	461a      	mov	r2, r3
 8000e1a:	4b05      	ldr	r3, [pc, #20]	; (8000e30 <HAL_IncTick+0x20>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	4413      	add	r3, r2
 8000e20:	4a03      	ldr	r2, [pc, #12]	; (8000e30 <HAL_IncTick+0x20>)
 8000e22:	6013      	str	r3, [r2, #0]
}
 8000e24:	bf00      	nop
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bc80      	pop	{r7}
 8000e2a:	4770      	bx	lr
 8000e2c:	20000008 	.word	0x20000008
 8000e30:	20000244 	.word	0x20000244

08000e34 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
  return uwTick;
 8000e38:	4b02      	ldr	r3, [pc, #8]	; (8000e44 <HAL_GetTick+0x10>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
}
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bc80      	pop	{r7}
 8000e42:	4770      	bx	lr
 8000e44:	20000244 	.word	0x20000244

08000e48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b084      	sub	sp, #16
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e50:	f7ff fff0 	bl	8000e34 <HAL_GetTick>
 8000e54:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e60:	d005      	beq.n	8000e6e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e62:	4b09      	ldr	r3, [pc, #36]	; (8000e88 <HAL_Delay+0x40>)
 8000e64:	781b      	ldrb	r3, [r3, #0]
 8000e66:	461a      	mov	r2, r3
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	4413      	add	r3, r2
 8000e6c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e6e:	bf00      	nop
 8000e70:	f7ff ffe0 	bl	8000e34 <HAL_GetTick>
 8000e74:	4602      	mov	r2, r0
 8000e76:	68bb      	ldr	r3, [r7, #8]
 8000e78:	1ad3      	subs	r3, r2, r3
 8000e7a:	68fa      	ldr	r2, [r7, #12]
 8000e7c:	429a      	cmp	r2, r3
 8000e7e:	d8f7      	bhi.n	8000e70 <HAL_Delay+0x28>
  {
  }
}
 8000e80:	bf00      	nop
 8000e82:	3710      	adds	r7, #16
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	20000008 	.word	0x20000008

08000e8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	b085      	sub	sp, #20
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	f003 0307 	and.w	r3, r3, #7
 8000e9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e9c:	4b0c      	ldr	r3, [pc, #48]	; (8000ed0 <__NVIC_SetPriorityGrouping+0x44>)
 8000e9e:	68db      	ldr	r3, [r3, #12]
 8000ea0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ea2:	68ba      	ldr	r2, [r7, #8]
 8000ea4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ea8:	4013      	ands	r3, r2
 8000eaa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000eb0:	68bb      	ldr	r3, [r7, #8]
 8000eb2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000eb4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000eb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ebc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ebe:	4a04      	ldr	r2, [pc, #16]	; (8000ed0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ec0:	68bb      	ldr	r3, [r7, #8]
 8000ec2:	60d3      	str	r3, [r2, #12]
}
 8000ec4:	bf00      	nop
 8000ec6:	3714      	adds	r7, #20
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bc80      	pop	{r7}
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop
 8000ed0:	e000ed00 	.word	0xe000ed00

08000ed4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ed8:	4b04      	ldr	r3, [pc, #16]	; (8000eec <__NVIC_GetPriorityGrouping+0x18>)
 8000eda:	68db      	ldr	r3, [r3, #12]
 8000edc:	0a1b      	lsrs	r3, r3, #8
 8000ede:	f003 0307 	and.w	r3, r3, #7
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bc80      	pop	{r7}
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop
 8000eec:	e000ed00 	.word	0xe000ed00

08000ef0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b083      	sub	sp, #12
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	6039      	str	r1, [r7, #0]
 8000efa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000efc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	db0a      	blt.n	8000f1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	b2da      	uxtb	r2, r3
 8000f08:	490c      	ldr	r1, [pc, #48]	; (8000f3c <__NVIC_SetPriority+0x4c>)
 8000f0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f0e:	0112      	lsls	r2, r2, #4
 8000f10:	b2d2      	uxtb	r2, r2
 8000f12:	440b      	add	r3, r1
 8000f14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f18:	e00a      	b.n	8000f30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	b2da      	uxtb	r2, r3
 8000f1e:	4908      	ldr	r1, [pc, #32]	; (8000f40 <__NVIC_SetPriority+0x50>)
 8000f20:	79fb      	ldrb	r3, [r7, #7]
 8000f22:	f003 030f 	and.w	r3, r3, #15
 8000f26:	3b04      	subs	r3, #4
 8000f28:	0112      	lsls	r2, r2, #4
 8000f2a:	b2d2      	uxtb	r2, r2
 8000f2c:	440b      	add	r3, r1
 8000f2e:	761a      	strb	r2, [r3, #24]
}
 8000f30:	bf00      	nop
 8000f32:	370c      	adds	r7, #12
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bc80      	pop	{r7}
 8000f38:	4770      	bx	lr
 8000f3a:	bf00      	nop
 8000f3c:	e000e100 	.word	0xe000e100
 8000f40:	e000ed00 	.word	0xe000ed00

08000f44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b089      	sub	sp, #36	; 0x24
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	60f8      	str	r0, [r7, #12]
 8000f4c:	60b9      	str	r1, [r7, #8]
 8000f4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	f003 0307 	and.w	r3, r3, #7
 8000f56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f58:	69fb      	ldr	r3, [r7, #28]
 8000f5a:	f1c3 0307 	rsb	r3, r3, #7
 8000f5e:	2b04      	cmp	r3, #4
 8000f60:	bf28      	it	cs
 8000f62:	2304      	movcs	r3, #4
 8000f64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f66:	69fb      	ldr	r3, [r7, #28]
 8000f68:	3304      	adds	r3, #4
 8000f6a:	2b06      	cmp	r3, #6
 8000f6c:	d902      	bls.n	8000f74 <NVIC_EncodePriority+0x30>
 8000f6e:	69fb      	ldr	r3, [r7, #28]
 8000f70:	3b03      	subs	r3, #3
 8000f72:	e000      	b.n	8000f76 <NVIC_EncodePriority+0x32>
 8000f74:	2300      	movs	r3, #0
 8000f76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f78:	f04f 32ff 	mov.w	r2, #4294967295
 8000f7c:	69bb      	ldr	r3, [r7, #24]
 8000f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f82:	43da      	mvns	r2, r3
 8000f84:	68bb      	ldr	r3, [r7, #8]
 8000f86:	401a      	ands	r2, r3
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f8c:	f04f 31ff 	mov.w	r1, #4294967295
 8000f90:	697b      	ldr	r3, [r7, #20]
 8000f92:	fa01 f303 	lsl.w	r3, r1, r3
 8000f96:	43d9      	mvns	r1, r3
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f9c:	4313      	orrs	r3, r2
         );
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	3724      	adds	r7, #36	; 0x24
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bc80      	pop	{r7}
 8000fa6:	4770      	bx	lr

08000fa8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	3b01      	subs	r3, #1
 8000fb4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fb8:	d301      	bcc.n	8000fbe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fba:	2301      	movs	r3, #1
 8000fbc:	e00f      	b.n	8000fde <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fbe:	4a0a      	ldr	r2, [pc, #40]	; (8000fe8 <SysTick_Config+0x40>)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	3b01      	subs	r3, #1
 8000fc4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fc6:	210f      	movs	r1, #15
 8000fc8:	f04f 30ff 	mov.w	r0, #4294967295
 8000fcc:	f7ff ff90 	bl	8000ef0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fd0:	4b05      	ldr	r3, [pc, #20]	; (8000fe8 <SysTick_Config+0x40>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fd6:	4b04      	ldr	r3, [pc, #16]	; (8000fe8 <SysTick_Config+0x40>)
 8000fd8:	2207      	movs	r2, #7
 8000fda:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fdc:	2300      	movs	r3, #0
}
 8000fde:	4618      	mov	r0, r3
 8000fe0:	3708      	adds	r7, #8
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	e000e010 	.word	0xe000e010

08000fec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b082      	sub	sp, #8
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ff4:	6878      	ldr	r0, [r7, #4]
 8000ff6:	f7ff ff49 	bl	8000e8c <__NVIC_SetPriorityGrouping>
}
 8000ffa:	bf00      	nop
 8000ffc:	3708      	adds	r7, #8
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}

08001002 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001002:	b580      	push	{r7, lr}
 8001004:	b086      	sub	sp, #24
 8001006:	af00      	add	r7, sp, #0
 8001008:	4603      	mov	r3, r0
 800100a:	60b9      	str	r1, [r7, #8]
 800100c:	607a      	str	r2, [r7, #4]
 800100e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001010:	2300      	movs	r3, #0
 8001012:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001014:	f7ff ff5e 	bl	8000ed4 <__NVIC_GetPriorityGrouping>
 8001018:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800101a:	687a      	ldr	r2, [r7, #4]
 800101c:	68b9      	ldr	r1, [r7, #8]
 800101e:	6978      	ldr	r0, [r7, #20]
 8001020:	f7ff ff90 	bl	8000f44 <NVIC_EncodePriority>
 8001024:	4602      	mov	r2, r0
 8001026:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800102a:	4611      	mov	r1, r2
 800102c:	4618      	mov	r0, r3
 800102e:	f7ff ff5f 	bl	8000ef0 <__NVIC_SetPriority>
}
 8001032:	bf00      	nop
 8001034:	3718      	adds	r7, #24
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}

0800103a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800103a:	b580      	push	{r7, lr}
 800103c:	b082      	sub	sp, #8
 800103e:	af00      	add	r7, sp, #0
 8001040:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001042:	6878      	ldr	r0, [r7, #4]
 8001044:	f7ff ffb0 	bl	8000fa8 <SysTick_Config>
 8001048:	4603      	mov	r3, r0
}
 800104a:	4618      	mov	r0, r3
 800104c:	3708      	adds	r7, #8
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
	...

08001054 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001054:	b480      	push	{r7}
 8001056:	b08b      	sub	sp, #44	; 0x2c
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
 800105c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800105e:	2300      	movs	r3, #0
 8001060:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001062:	2300      	movs	r3, #0
 8001064:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001066:	e127      	b.n	80012b8 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001068:	2201      	movs	r2, #1
 800106a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800106c:	fa02 f303 	lsl.w	r3, r2, r3
 8001070:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	69fa      	ldr	r2, [r7, #28]
 8001078:	4013      	ands	r3, r2
 800107a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800107c:	69ba      	ldr	r2, [r7, #24]
 800107e:	69fb      	ldr	r3, [r7, #28]
 8001080:	429a      	cmp	r2, r3
 8001082:	f040 8116 	bne.w	80012b2 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	2b12      	cmp	r3, #18
 800108c:	d034      	beq.n	80010f8 <HAL_GPIO_Init+0xa4>
 800108e:	2b12      	cmp	r3, #18
 8001090:	d80d      	bhi.n	80010ae <HAL_GPIO_Init+0x5a>
 8001092:	2b02      	cmp	r3, #2
 8001094:	d02b      	beq.n	80010ee <HAL_GPIO_Init+0x9a>
 8001096:	2b02      	cmp	r3, #2
 8001098:	d804      	bhi.n	80010a4 <HAL_GPIO_Init+0x50>
 800109a:	2b00      	cmp	r3, #0
 800109c:	d031      	beq.n	8001102 <HAL_GPIO_Init+0xae>
 800109e:	2b01      	cmp	r3, #1
 80010a0:	d01c      	beq.n	80010dc <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80010a2:	e048      	b.n	8001136 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80010a4:	2b03      	cmp	r3, #3
 80010a6:	d043      	beq.n	8001130 <HAL_GPIO_Init+0xdc>
 80010a8:	2b11      	cmp	r3, #17
 80010aa:	d01b      	beq.n	80010e4 <HAL_GPIO_Init+0x90>
          break;
 80010ac:	e043      	b.n	8001136 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80010ae:	4a89      	ldr	r2, [pc, #548]	; (80012d4 <HAL_GPIO_Init+0x280>)
 80010b0:	4293      	cmp	r3, r2
 80010b2:	d026      	beq.n	8001102 <HAL_GPIO_Init+0xae>
 80010b4:	4a87      	ldr	r2, [pc, #540]	; (80012d4 <HAL_GPIO_Init+0x280>)
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d806      	bhi.n	80010c8 <HAL_GPIO_Init+0x74>
 80010ba:	4a87      	ldr	r2, [pc, #540]	; (80012d8 <HAL_GPIO_Init+0x284>)
 80010bc:	4293      	cmp	r3, r2
 80010be:	d020      	beq.n	8001102 <HAL_GPIO_Init+0xae>
 80010c0:	4a86      	ldr	r2, [pc, #536]	; (80012dc <HAL_GPIO_Init+0x288>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d01d      	beq.n	8001102 <HAL_GPIO_Init+0xae>
          break;
 80010c6:	e036      	b.n	8001136 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80010c8:	4a85      	ldr	r2, [pc, #532]	; (80012e0 <HAL_GPIO_Init+0x28c>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d019      	beq.n	8001102 <HAL_GPIO_Init+0xae>
 80010ce:	4a85      	ldr	r2, [pc, #532]	; (80012e4 <HAL_GPIO_Init+0x290>)
 80010d0:	4293      	cmp	r3, r2
 80010d2:	d016      	beq.n	8001102 <HAL_GPIO_Init+0xae>
 80010d4:	4a84      	ldr	r2, [pc, #528]	; (80012e8 <HAL_GPIO_Init+0x294>)
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d013      	beq.n	8001102 <HAL_GPIO_Init+0xae>
          break;
 80010da:	e02c      	b.n	8001136 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	68db      	ldr	r3, [r3, #12]
 80010e0:	623b      	str	r3, [r7, #32]
          break;
 80010e2:	e028      	b.n	8001136 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	68db      	ldr	r3, [r3, #12]
 80010e8:	3304      	adds	r3, #4
 80010ea:	623b      	str	r3, [r7, #32]
          break;
 80010ec:	e023      	b.n	8001136 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	68db      	ldr	r3, [r3, #12]
 80010f2:	3308      	adds	r3, #8
 80010f4:	623b      	str	r3, [r7, #32]
          break;
 80010f6:	e01e      	b.n	8001136 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	68db      	ldr	r3, [r3, #12]
 80010fc:	330c      	adds	r3, #12
 80010fe:	623b      	str	r3, [r7, #32]
          break;
 8001100:	e019      	b.n	8001136 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	689b      	ldr	r3, [r3, #8]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d102      	bne.n	8001110 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800110a:	2304      	movs	r3, #4
 800110c:	623b      	str	r3, [r7, #32]
          break;
 800110e:	e012      	b.n	8001136 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	689b      	ldr	r3, [r3, #8]
 8001114:	2b01      	cmp	r3, #1
 8001116:	d105      	bne.n	8001124 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001118:	2308      	movs	r3, #8
 800111a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	69fa      	ldr	r2, [r7, #28]
 8001120:	611a      	str	r2, [r3, #16]
          break;
 8001122:	e008      	b.n	8001136 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001124:	2308      	movs	r3, #8
 8001126:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	69fa      	ldr	r2, [r7, #28]
 800112c:	615a      	str	r2, [r3, #20]
          break;
 800112e:	e002      	b.n	8001136 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001130:	2300      	movs	r3, #0
 8001132:	623b      	str	r3, [r7, #32]
          break;
 8001134:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001136:	69bb      	ldr	r3, [r7, #24]
 8001138:	2bff      	cmp	r3, #255	; 0xff
 800113a:	d801      	bhi.n	8001140 <HAL_GPIO_Init+0xec>
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	e001      	b.n	8001144 <HAL_GPIO_Init+0xf0>
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	3304      	adds	r3, #4
 8001144:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001146:	69bb      	ldr	r3, [r7, #24]
 8001148:	2bff      	cmp	r3, #255	; 0xff
 800114a:	d802      	bhi.n	8001152 <HAL_GPIO_Init+0xfe>
 800114c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800114e:	009b      	lsls	r3, r3, #2
 8001150:	e002      	b.n	8001158 <HAL_GPIO_Init+0x104>
 8001152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001154:	3b08      	subs	r3, #8
 8001156:	009b      	lsls	r3, r3, #2
 8001158:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800115a:	697b      	ldr	r3, [r7, #20]
 800115c:	681a      	ldr	r2, [r3, #0]
 800115e:	210f      	movs	r1, #15
 8001160:	693b      	ldr	r3, [r7, #16]
 8001162:	fa01 f303 	lsl.w	r3, r1, r3
 8001166:	43db      	mvns	r3, r3
 8001168:	401a      	ands	r2, r3
 800116a:	6a39      	ldr	r1, [r7, #32]
 800116c:	693b      	ldr	r3, [r7, #16]
 800116e:	fa01 f303 	lsl.w	r3, r1, r3
 8001172:	431a      	orrs	r2, r3
 8001174:	697b      	ldr	r3, [r7, #20]
 8001176:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001180:	2b00      	cmp	r3, #0
 8001182:	f000 8096 	beq.w	80012b2 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001186:	4b59      	ldr	r3, [pc, #356]	; (80012ec <HAL_GPIO_Init+0x298>)
 8001188:	699b      	ldr	r3, [r3, #24]
 800118a:	4a58      	ldr	r2, [pc, #352]	; (80012ec <HAL_GPIO_Init+0x298>)
 800118c:	f043 0301 	orr.w	r3, r3, #1
 8001190:	6193      	str	r3, [r2, #24]
 8001192:	4b56      	ldr	r3, [pc, #344]	; (80012ec <HAL_GPIO_Init+0x298>)
 8001194:	699b      	ldr	r3, [r3, #24]
 8001196:	f003 0301 	and.w	r3, r3, #1
 800119a:	60bb      	str	r3, [r7, #8]
 800119c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800119e:	4a54      	ldr	r2, [pc, #336]	; (80012f0 <HAL_GPIO_Init+0x29c>)
 80011a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011a2:	089b      	lsrs	r3, r3, #2
 80011a4:	3302      	adds	r3, #2
 80011a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011aa:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80011ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ae:	f003 0303 	and.w	r3, r3, #3
 80011b2:	009b      	lsls	r3, r3, #2
 80011b4:	220f      	movs	r2, #15
 80011b6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ba:	43db      	mvns	r3, r3
 80011bc:	68fa      	ldr	r2, [r7, #12]
 80011be:	4013      	ands	r3, r2
 80011c0:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	4a4b      	ldr	r2, [pc, #300]	; (80012f4 <HAL_GPIO_Init+0x2a0>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d013      	beq.n	80011f2 <HAL_GPIO_Init+0x19e>
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	4a4a      	ldr	r2, [pc, #296]	; (80012f8 <HAL_GPIO_Init+0x2a4>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d00d      	beq.n	80011ee <HAL_GPIO_Init+0x19a>
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	4a49      	ldr	r2, [pc, #292]	; (80012fc <HAL_GPIO_Init+0x2a8>)
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d007      	beq.n	80011ea <HAL_GPIO_Init+0x196>
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	4a48      	ldr	r2, [pc, #288]	; (8001300 <HAL_GPIO_Init+0x2ac>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d101      	bne.n	80011e6 <HAL_GPIO_Init+0x192>
 80011e2:	2303      	movs	r3, #3
 80011e4:	e006      	b.n	80011f4 <HAL_GPIO_Init+0x1a0>
 80011e6:	2304      	movs	r3, #4
 80011e8:	e004      	b.n	80011f4 <HAL_GPIO_Init+0x1a0>
 80011ea:	2302      	movs	r3, #2
 80011ec:	e002      	b.n	80011f4 <HAL_GPIO_Init+0x1a0>
 80011ee:	2301      	movs	r3, #1
 80011f0:	e000      	b.n	80011f4 <HAL_GPIO_Init+0x1a0>
 80011f2:	2300      	movs	r3, #0
 80011f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80011f6:	f002 0203 	and.w	r2, r2, #3
 80011fa:	0092      	lsls	r2, r2, #2
 80011fc:	4093      	lsls	r3, r2
 80011fe:	68fa      	ldr	r2, [r7, #12]
 8001200:	4313      	orrs	r3, r2
 8001202:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001204:	493a      	ldr	r1, [pc, #232]	; (80012f0 <HAL_GPIO_Init+0x29c>)
 8001206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001208:	089b      	lsrs	r3, r3, #2
 800120a:	3302      	adds	r3, #2
 800120c:	68fa      	ldr	r2, [r7, #12]
 800120e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800121a:	2b00      	cmp	r3, #0
 800121c:	d006      	beq.n	800122c <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800121e:	4b39      	ldr	r3, [pc, #228]	; (8001304 <HAL_GPIO_Init+0x2b0>)
 8001220:	681a      	ldr	r2, [r3, #0]
 8001222:	4938      	ldr	r1, [pc, #224]	; (8001304 <HAL_GPIO_Init+0x2b0>)
 8001224:	69bb      	ldr	r3, [r7, #24]
 8001226:	4313      	orrs	r3, r2
 8001228:	600b      	str	r3, [r1, #0]
 800122a:	e006      	b.n	800123a <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800122c:	4b35      	ldr	r3, [pc, #212]	; (8001304 <HAL_GPIO_Init+0x2b0>)
 800122e:	681a      	ldr	r2, [r3, #0]
 8001230:	69bb      	ldr	r3, [r7, #24]
 8001232:	43db      	mvns	r3, r3
 8001234:	4933      	ldr	r1, [pc, #204]	; (8001304 <HAL_GPIO_Init+0x2b0>)
 8001236:	4013      	ands	r3, r2
 8001238:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	685b      	ldr	r3, [r3, #4]
 800123e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001242:	2b00      	cmp	r3, #0
 8001244:	d006      	beq.n	8001254 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001246:	4b2f      	ldr	r3, [pc, #188]	; (8001304 <HAL_GPIO_Init+0x2b0>)
 8001248:	685a      	ldr	r2, [r3, #4]
 800124a:	492e      	ldr	r1, [pc, #184]	; (8001304 <HAL_GPIO_Init+0x2b0>)
 800124c:	69bb      	ldr	r3, [r7, #24]
 800124e:	4313      	orrs	r3, r2
 8001250:	604b      	str	r3, [r1, #4]
 8001252:	e006      	b.n	8001262 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001254:	4b2b      	ldr	r3, [pc, #172]	; (8001304 <HAL_GPIO_Init+0x2b0>)
 8001256:	685a      	ldr	r2, [r3, #4]
 8001258:	69bb      	ldr	r3, [r7, #24]
 800125a:	43db      	mvns	r3, r3
 800125c:	4929      	ldr	r1, [pc, #164]	; (8001304 <HAL_GPIO_Init+0x2b0>)
 800125e:	4013      	ands	r3, r2
 8001260:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800126a:	2b00      	cmp	r3, #0
 800126c:	d006      	beq.n	800127c <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800126e:	4b25      	ldr	r3, [pc, #148]	; (8001304 <HAL_GPIO_Init+0x2b0>)
 8001270:	689a      	ldr	r2, [r3, #8]
 8001272:	4924      	ldr	r1, [pc, #144]	; (8001304 <HAL_GPIO_Init+0x2b0>)
 8001274:	69bb      	ldr	r3, [r7, #24]
 8001276:	4313      	orrs	r3, r2
 8001278:	608b      	str	r3, [r1, #8]
 800127a:	e006      	b.n	800128a <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800127c:	4b21      	ldr	r3, [pc, #132]	; (8001304 <HAL_GPIO_Init+0x2b0>)
 800127e:	689a      	ldr	r2, [r3, #8]
 8001280:	69bb      	ldr	r3, [r7, #24]
 8001282:	43db      	mvns	r3, r3
 8001284:	491f      	ldr	r1, [pc, #124]	; (8001304 <HAL_GPIO_Init+0x2b0>)
 8001286:	4013      	ands	r3, r2
 8001288:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001292:	2b00      	cmp	r3, #0
 8001294:	d006      	beq.n	80012a4 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001296:	4b1b      	ldr	r3, [pc, #108]	; (8001304 <HAL_GPIO_Init+0x2b0>)
 8001298:	68da      	ldr	r2, [r3, #12]
 800129a:	491a      	ldr	r1, [pc, #104]	; (8001304 <HAL_GPIO_Init+0x2b0>)
 800129c:	69bb      	ldr	r3, [r7, #24]
 800129e:	4313      	orrs	r3, r2
 80012a0:	60cb      	str	r3, [r1, #12]
 80012a2:	e006      	b.n	80012b2 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80012a4:	4b17      	ldr	r3, [pc, #92]	; (8001304 <HAL_GPIO_Init+0x2b0>)
 80012a6:	68da      	ldr	r2, [r3, #12]
 80012a8:	69bb      	ldr	r3, [r7, #24]
 80012aa:	43db      	mvns	r3, r3
 80012ac:	4915      	ldr	r1, [pc, #84]	; (8001304 <HAL_GPIO_Init+0x2b0>)
 80012ae:	4013      	ands	r3, r2
 80012b0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80012b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012b4:	3301      	adds	r3, #1
 80012b6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	681a      	ldr	r2, [r3, #0]
 80012bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012be:	fa22 f303 	lsr.w	r3, r2, r3
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	f47f aed0 	bne.w	8001068 <HAL_GPIO_Init+0x14>
  }
}
 80012c8:	bf00      	nop
 80012ca:	372c      	adds	r7, #44	; 0x2c
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bc80      	pop	{r7}
 80012d0:	4770      	bx	lr
 80012d2:	bf00      	nop
 80012d4:	10210000 	.word	0x10210000
 80012d8:	10110000 	.word	0x10110000
 80012dc:	10120000 	.word	0x10120000
 80012e0:	10310000 	.word	0x10310000
 80012e4:	10320000 	.word	0x10320000
 80012e8:	10220000 	.word	0x10220000
 80012ec:	40021000 	.word	0x40021000
 80012f0:	40010000 	.word	0x40010000
 80012f4:	40010800 	.word	0x40010800
 80012f8:	40010c00 	.word	0x40010c00
 80012fc:	40011000 	.word	0x40011000
 8001300:	40011400 	.word	0x40011400
 8001304:	40010400 	.word	0x40010400

08001308 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001308:	b480      	push	{r7}
 800130a:	b083      	sub	sp, #12
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
 8001310:	460b      	mov	r3, r1
 8001312:	807b      	strh	r3, [r7, #2]
 8001314:	4613      	mov	r3, r2
 8001316:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001318:	787b      	ldrb	r3, [r7, #1]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d003      	beq.n	8001326 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800131e:	887a      	ldrh	r2, [r7, #2]
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001324:	e003      	b.n	800132e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001326:	887b      	ldrh	r3, [r7, #2]
 8001328:	041a      	lsls	r2, r3, #16
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	611a      	str	r2, [r3, #16]
}
 800132e:	bf00      	nop
 8001330:	370c      	adds	r7, #12
 8001332:	46bd      	mov	sp, r7
 8001334:	bc80      	pop	{r7}
 8001336:	4770      	bx	lr

08001338 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b084      	sub	sp, #16
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d101      	bne.n	800134a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001346:	2301      	movs	r3, #1
 8001348:	e11f      	b.n	800158a <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001350:	b2db      	uxtb	r3, r3
 8001352:	2b00      	cmp	r3, #0
 8001354:	d106      	bne.n	8001364 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	2200      	movs	r2, #0
 800135a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800135e:	6878      	ldr	r0, [r7, #4]
 8001360:	f7fe ffa2 	bl	80002a8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2224      	movs	r2, #36	; 0x24
 8001368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	681a      	ldr	r2, [r3, #0]
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f022 0201 	bic.w	r2, r2, #1
 800137a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	681a      	ldr	r2, [r3, #0]
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800138a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	681a      	ldr	r2, [r3, #0]
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800139a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800139c:	f001 ffd6 	bl	800334c <HAL_RCC_GetPCLK1Freq>
 80013a0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	4a7b      	ldr	r2, [pc, #492]	; (8001594 <HAL_I2C_Init+0x25c>)
 80013a8:	4293      	cmp	r3, r2
 80013aa:	d807      	bhi.n	80013bc <HAL_I2C_Init+0x84>
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	4a7a      	ldr	r2, [pc, #488]	; (8001598 <HAL_I2C_Init+0x260>)
 80013b0:	4293      	cmp	r3, r2
 80013b2:	bf94      	ite	ls
 80013b4:	2301      	movls	r3, #1
 80013b6:	2300      	movhi	r3, #0
 80013b8:	b2db      	uxtb	r3, r3
 80013ba:	e006      	b.n	80013ca <HAL_I2C_Init+0x92>
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	4a77      	ldr	r2, [pc, #476]	; (800159c <HAL_I2C_Init+0x264>)
 80013c0:	4293      	cmp	r3, r2
 80013c2:	bf94      	ite	ls
 80013c4:	2301      	movls	r3, #1
 80013c6:	2300      	movhi	r3, #0
 80013c8:	b2db      	uxtb	r3, r3
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d001      	beq.n	80013d2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80013ce:	2301      	movs	r3, #1
 80013d0:	e0db      	b.n	800158a <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	4a72      	ldr	r2, [pc, #456]	; (80015a0 <HAL_I2C_Init+0x268>)
 80013d6:	fba2 2303 	umull	r2, r3, r2, r3
 80013da:	0c9b      	lsrs	r3, r3, #18
 80013dc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	68ba      	ldr	r2, [r7, #8]
 80013ee:	430a      	orrs	r2, r1
 80013f0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	6a1b      	ldr	r3, [r3, #32]
 80013f8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	4a64      	ldr	r2, [pc, #400]	; (8001594 <HAL_I2C_Init+0x25c>)
 8001402:	4293      	cmp	r3, r2
 8001404:	d802      	bhi.n	800140c <HAL_I2C_Init+0xd4>
 8001406:	68bb      	ldr	r3, [r7, #8]
 8001408:	3301      	adds	r3, #1
 800140a:	e009      	b.n	8001420 <HAL_I2C_Init+0xe8>
 800140c:	68bb      	ldr	r3, [r7, #8]
 800140e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001412:	fb02 f303 	mul.w	r3, r2, r3
 8001416:	4a63      	ldr	r2, [pc, #396]	; (80015a4 <HAL_I2C_Init+0x26c>)
 8001418:	fba2 2303 	umull	r2, r3, r2, r3
 800141c:	099b      	lsrs	r3, r3, #6
 800141e:	3301      	adds	r3, #1
 8001420:	687a      	ldr	r2, [r7, #4]
 8001422:	6812      	ldr	r2, [r2, #0]
 8001424:	430b      	orrs	r3, r1
 8001426:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	69db      	ldr	r3, [r3, #28]
 800142e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001432:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	4956      	ldr	r1, [pc, #344]	; (8001594 <HAL_I2C_Init+0x25c>)
 800143c:	428b      	cmp	r3, r1
 800143e:	d80d      	bhi.n	800145c <HAL_I2C_Init+0x124>
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	1e59      	subs	r1, r3, #1
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	005b      	lsls	r3, r3, #1
 800144a:	fbb1 f3f3 	udiv	r3, r1, r3
 800144e:	3301      	adds	r3, #1
 8001450:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001454:	2b04      	cmp	r3, #4
 8001456:	bf38      	it	cc
 8001458:	2304      	movcc	r3, #4
 800145a:	e04f      	b.n	80014fc <HAL_I2C_Init+0x1c4>
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	689b      	ldr	r3, [r3, #8]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d111      	bne.n	8001488 <HAL_I2C_Init+0x150>
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	1e58      	subs	r0, r3, #1
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6859      	ldr	r1, [r3, #4]
 800146c:	460b      	mov	r3, r1
 800146e:	005b      	lsls	r3, r3, #1
 8001470:	440b      	add	r3, r1
 8001472:	fbb0 f3f3 	udiv	r3, r0, r3
 8001476:	3301      	adds	r3, #1
 8001478:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800147c:	2b00      	cmp	r3, #0
 800147e:	bf0c      	ite	eq
 8001480:	2301      	moveq	r3, #1
 8001482:	2300      	movne	r3, #0
 8001484:	b2db      	uxtb	r3, r3
 8001486:	e012      	b.n	80014ae <HAL_I2C_Init+0x176>
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	1e58      	subs	r0, r3, #1
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6859      	ldr	r1, [r3, #4]
 8001490:	460b      	mov	r3, r1
 8001492:	009b      	lsls	r3, r3, #2
 8001494:	440b      	add	r3, r1
 8001496:	0099      	lsls	r1, r3, #2
 8001498:	440b      	add	r3, r1
 800149a:	fbb0 f3f3 	udiv	r3, r0, r3
 800149e:	3301      	adds	r3, #1
 80014a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	bf0c      	ite	eq
 80014a8:	2301      	moveq	r3, #1
 80014aa:	2300      	movne	r3, #0
 80014ac:	b2db      	uxtb	r3, r3
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d001      	beq.n	80014b6 <HAL_I2C_Init+0x17e>
 80014b2:	2301      	movs	r3, #1
 80014b4:	e022      	b.n	80014fc <HAL_I2C_Init+0x1c4>
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	689b      	ldr	r3, [r3, #8]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d10e      	bne.n	80014dc <HAL_I2C_Init+0x1a4>
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	1e58      	subs	r0, r3, #1
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	6859      	ldr	r1, [r3, #4]
 80014c6:	460b      	mov	r3, r1
 80014c8:	005b      	lsls	r3, r3, #1
 80014ca:	440b      	add	r3, r1
 80014cc:	fbb0 f3f3 	udiv	r3, r0, r3
 80014d0:	3301      	adds	r3, #1
 80014d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80014da:	e00f      	b.n	80014fc <HAL_I2C_Init+0x1c4>
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	1e58      	subs	r0, r3, #1
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	6859      	ldr	r1, [r3, #4]
 80014e4:	460b      	mov	r3, r1
 80014e6:	009b      	lsls	r3, r3, #2
 80014e8:	440b      	add	r3, r1
 80014ea:	0099      	lsls	r1, r3, #2
 80014ec:	440b      	add	r3, r1
 80014ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80014f2:	3301      	adds	r3, #1
 80014f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014f8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80014fc:	6879      	ldr	r1, [r7, #4]
 80014fe:	6809      	ldr	r1, [r1, #0]
 8001500:	4313      	orrs	r3, r2
 8001502:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	69da      	ldr	r2, [r3, #28]
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	6a1b      	ldr	r3, [r3, #32]
 8001516:	431a      	orrs	r2, r3
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	430a      	orrs	r2, r1
 800151e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	689b      	ldr	r3, [r3, #8]
 8001526:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800152a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800152e:	687a      	ldr	r2, [r7, #4]
 8001530:	6911      	ldr	r1, [r2, #16]
 8001532:	687a      	ldr	r2, [r7, #4]
 8001534:	68d2      	ldr	r2, [r2, #12]
 8001536:	4311      	orrs	r1, r2
 8001538:	687a      	ldr	r2, [r7, #4]
 800153a:	6812      	ldr	r2, [r2, #0]
 800153c:	430b      	orrs	r3, r1
 800153e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	68db      	ldr	r3, [r3, #12]
 8001546:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	695a      	ldr	r2, [r3, #20]
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	699b      	ldr	r3, [r3, #24]
 8001552:	431a      	orrs	r2, r3
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	430a      	orrs	r2, r1
 800155a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	681a      	ldr	r2, [r3, #0]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f042 0201 	orr.w	r2, r2, #1
 800156a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2200      	movs	r2, #0
 8001570:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	2220      	movs	r2, #32
 8001576:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2200      	movs	r2, #0
 800157e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2200      	movs	r2, #0
 8001584:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001588:	2300      	movs	r3, #0
}
 800158a:	4618      	mov	r0, r3
 800158c:	3710      	adds	r7, #16
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	000186a0 	.word	0x000186a0
 8001598:	001e847f 	.word	0x001e847f
 800159c:	003d08ff 	.word	0x003d08ff
 80015a0:	431bde83 	.word	0x431bde83
 80015a4:	10624dd3 	.word	0x10624dd3

080015a8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b088      	sub	sp, #32
 80015ac:	af02      	add	r7, sp, #8
 80015ae:	60f8      	str	r0, [r7, #12]
 80015b0:	607a      	str	r2, [r7, #4]
 80015b2:	461a      	mov	r2, r3
 80015b4:	460b      	mov	r3, r1
 80015b6:	817b      	strh	r3, [r7, #10]
 80015b8:	4613      	mov	r3, r2
 80015ba:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80015bc:	f7ff fc3a 	bl	8000e34 <HAL_GetTick>
 80015c0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80015c8:	b2db      	uxtb	r3, r3
 80015ca:	2b20      	cmp	r3, #32
 80015cc:	f040 80e0 	bne.w	8001790 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80015d0:	697b      	ldr	r3, [r7, #20]
 80015d2:	9300      	str	r3, [sp, #0]
 80015d4:	2319      	movs	r3, #25
 80015d6:	2201      	movs	r2, #1
 80015d8:	4970      	ldr	r1, [pc, #448]	; (800179c <HAL_I2C_Master_Transmit+0x1f4>)
 80015da:	68f8      	ldr	r0, [r7, #12]
 80015dc:	f001 f904 	bl	80027e8 <I2C_WaitOnFlagUntilTimeout>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d001      	beq.n	80015ea <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80015e6:	2302      	movs	r3, #2
 80015e8:	e0d3      	b.n	8001792 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80015f0:	2b01      	cmp	r3, #1
 80015f2:	d101      	bne.n	80015f8 <HAL_I2C_Master_Transmit+0x50>
 80015f4:	2302      	movs	r3, #2
 80015f6:	e0cc      	b.n	8001792 <HAL_I2C_Master_Transmit+0x1ea>
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	2201      	movs	r2, #1
 80015fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f003 0301 	and.w	r3, r3, #1
 800160a:	2b01      	cmp	r3, #1
 800160c:	d007      	beq.n	800161e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	681a      	ldr	r2, [r3, #0]
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f042 0201 	orr.w	r2, r2, #1
 800161c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	681a      	ldr	r2, [r3, #0]
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800162c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	2221      	movs	r2, #33	; 0x21
 8001632:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	2210      	movs	r2, #16
 800163a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	2200      	movs	r2, #0
 8001642:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	687a      	ldr	r2, [r7, #4]
 8001648:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	893a      	ldrh	r2, [r7, #8]
 800164e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001654:	b29a      	uxth	r2, r3
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	4a50      	ldr	r2, [pc, #320]	; (80017a0 <HAL_I2C_Master_Transmit+0x1f8>)
 800165e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001660:	8979      	ldrh	r1, [r7, #10]
 8001662:	697b      	ldr	r3, [r7, #20]
 8001664:	6a3a      	ldr	r2, [r7, #32]
 8001666:	68f8      	ldr	r0, [r7, #12]
 8001668:	f000 fe86 	bl	8002378 <I2C_MasterRequestWrite>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d001      	beq.n	8001676 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001672:	2301      	movs	r3, #1
 8001674:	e08d      	b.n	8001792 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001676:	2300      	movs	r3, #0
 8001678:	613b      	str	r3, [r7, #16]
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	695b      	ldr	r3, [r3, #20]
 8001680:	613b      	str	r3, [r7, #16]
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	699b      	ldr	r3, [r3, #24]
 8001688:	613b      	str	r3, [r7, #16]
 800168a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800168c:	e066      	b.n	800175c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800168e:	697a      	ldr	r2, [r7, #20]
 8001690:	6a39      	ldr	r1, [r7, #32]
 8001692:	68f8      	ldr	r0, [r7, #12]
 8001694:	f001 f97e 	bl	8002994 <I2C_WaitOnTXEFlagUntilTimeout>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d00d      	beq.n	80016ba <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a2:	2b04      	cmp	r3, #4
 80016a4:	d107      	bne.n	80016b6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	681a      	ldr	r2, [r3, #0]
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80016b4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80016b6:	2301      	movs	r3, #1
 80016b8:	e06b      	b.n	8001792 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016be:	781a      	ldrb	r2, [r3, #0]
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ca:	1c5a      	adds	r2, r3, #1
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016d4:	b29b      	uxth	r3, r3
 80016d6:	3b01      	subs	r3, #1
 80016d8:	b29a      	uxth	r2, r3
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016e2:	3b01      	subs	r3, #1
 80016e4:	b29a      	uxth	r2, r3
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	695b      	ldr	r3, [r3, #20]
 80016f0:	f003 0304 	and.w	r3, r3, #4
 80016f4:	2b04      	cmp	r3, #4
 80016f6:	d11b      	bne.n	8001730 <HAL_I2C_Master_Transmit+0x188>
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d017      	beq.n	8001730 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001704:	781a      	ldrb	r2, [r3, #0]
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001710:	1c5a      	adds	r2, r3, #1
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800171a:	b29b      	uxth	r3, r3
 800171c:	3b01      	subs	r3, #1
 800171e:	b29a      	uxth	r2, r3
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001728:	3b01      	subs	r3, #1
 800172a:	b29a      	uxth	r2, r3
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001730:	697a      	ldr	r2, [r7, #20]
 8001732:	6a39      	ldr	r1, [r7, #32]
 8001734:	68f8      	ldr	r0, [r7, #12]
 8001736:	f001 f96e 	bl	8002a16 <I2C_WaitOnBTFFlagUntilTimeout>
 800173a:	4603      	mov	r3, r0
 800173c:	2b00      	cmp	r3, #0
 800173e:	d00d      	beq.n	800175c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001744:	2b04      	cmp	r3, #4
 8001746:	d107      	bne.n	8001758 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	681a      	ldr	r2, [r3, #0]
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001756:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001758:	2301      	movs	r3, #1
 800175a:	e01a      	b.n	8001792 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001760:	2b00      	cmp	r3, #0
 8001762:	d194      	bne.n	800168e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	681a      	ldr	r2, [r3, #0]
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001772:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	2220      	movs	r2, #32
 8001778:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	2200      	movs	r2, #0
 8001780:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	2200      	movs	r2, #0
 8001788:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800178c:	2300      	movs	r3, #0
 800178e:	e000      	b.n	8001792 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001790:	2302      	movs	r3, #2
  }
}
 8001792:	4618      	mov	r0, r3
 8001794:	3718      	adds	r7, #24
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	00100002 	.word	0x00100002
 80017a0:	ffff0000 	.word	0xffff0000

080017a4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b08c      	sub	sp, #48	; 0x30
 80017a8:	af02      	add	r7, sp, #8
 80017aa:	60f8      	str	r0, [r7, #12]
 80017ac:	607a      	str	r2, [r7, #4]
 80017ae:	461a      	mov	r2, r3
 80017b0:	460b      	mov	r3, r1
 80017b2:	817b      	strh	r3, [r7, #10]
 80017b4:	4613      	mov	r3, r2
 80017b6:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 80017b8:	2300      	movs	r3, #0
 80017ba:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80017bc:	f7ff fb3a 	bl	8000e34 <HAL_GetTick>
 80017c0:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80017c8:	b2db      	uxtb	r3, r3
 80017ca:	2b20      	cmp	r3, #32
 80017cc:	f040 8238 	bne.w	8001c40 <HAL_I2C_Master_Receive+0x49c>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80017d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d2:	9300      	str	r3, [sp, #0]
 80017d4:	2319      	movs	r3, #25
 80017d6:	2201      	movs	r2, #1
 80017d8:	497e      	ldr	r1, [pc, #504]	; (80019d4 <HAL_I2C_Master_Receive+0x230>)
 80017da:	68f8      	ldr	r0, [r7, #12]
 80017dc:	f001 f804 	bl	80027e8 <I2C_WaitOnFlagUntilTimeout>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d001      	beq.n	80017ea <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 80017e6:	2302      	movs	r3, #2
 80017e8:	e22b      	b.n	8001c42 <HAL_I2C_Master_Receive+0x49e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80017f0:	2b01      	cmp	r3, #1
 80017f2:	d101      	bne.n	80017f8 <HAL_I2C_Master_Receive+0x54>
 80017f4:	2302      	movs	r3, #2
 80017f6:	e224      	b.n	8001c42 <HAL_I2C_Master_Receive+0x49e>
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	2201      	movs	r2, #1
 80017fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f003 0301 	and.w	r3, r3, #1
 800180a:	2b01      	cmp	r3, #1
 800180c:	d007      	beq.n	800181e <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	681a      	ldr	r2, [r3, #0]
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f042 0201 	orr.w	r2, r2, #1
 800181c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	681a      	ldr	r2, [r3, #0]
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800182c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	2222      	movs	r2, #34	; 0x22
 8001832:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	2210      	movs	r2, #16
 800183a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	2200      	movs	r2, #0
 8001842:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	687a      	ldr	r2, [r7, #4]
 8001848:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	893a      	ldrh	r2, [r7, #8]
 800184e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001854:	b29a      	uxth	r2, r3
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	4a5e      	ldr	r2, [pc, #376]	; (80019d8 <HAL_I2C_Master_Receive+0x234>)
 800185e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001860:	8979      	ldrh	r1, [r7, #10]
 8001862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001864:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001866:	68f8      	ldr	r0, [r7, #12]
 8001868:	f000 fe08 	bl	800247c <I2C_MasterRequestRead>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	d001      	beq.n	8001876 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8001872:	2301      	movs	r3, #1
 8001874:	e1e5      	b.n	8001c42 <HAL_I2C_Master_Receive+0x49e>
    }

    if (hi2c->XferSize == 0U)
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800187a:	2b00      	cmp	r3, #0
 800187c:	d113      	bne.n	80018a6 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800187e:	2300      	movs	r3, #0
 8001880:	61fb      	str	r3, [r7, #28]
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	695b      	ldr	r3, [r3, #20]
 8001888:	61fb      	str	r3, [r7, #28]
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	699b      	ldr	r3, [r3, #24]
 8001890:	61fb      	str	r3, [r7, #28]
 8001892:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	681a      	ldr	r2, [r3, #0]
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80018a2:	601a      	str	r2, [r3, #0]
 80018a4:	e1b9      	b.n	8001c1a <HAL_I2C_Master_Receive+0x476>
    }
    else if (hi2c->XferSize == 1U)
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018aa:	2b01      	cmp	r3, #1
 80018ac:	d11d      	bne.n	80018ea <HAL_I2C_Master_Receive+0x146>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	681a      	ldr	r2, [r3, #0]
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80018bc:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018be:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80018c0:	2300      	movs	r3, #0
 80018c2:	61bb      	str	r3, [r7, #24]
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	695b      	ldr	r3, [r3, #20]
 80018ca:	61bb      	str	r3, [r7, #24]
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	699b      	ldr	r3, [r3, #24]
 80018d2:	61bb      	str	r3, [r7, #24]
 80018d4:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	681a      	ldr	r2, [r3, #0]
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80018e4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80018e6:	b662      	cpsie	i
 80018e8:	e197      	b.n	8001c1a <HAL_I2C_Master_Receive+0x476>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018ee:	2b02      	cmp	r3, #2
 80018f0:	d11d      	bne.n	800192e <HAL_I2C_Master_Receive+0x18a>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	681a      	ldr	r2, [r3, #0]
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001900:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001902:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001904:	2300      	movs	r3, #0
 8001906:	617b      	str	r3, [r7, #20]
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	695b      	ldr	r3, [r3, #20]
 800190e:	617b      	str	r3, [r7, #20]
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	699b      	ldr	r3, [r3, #24]
 8001916:	617b      	str	r3, [r7, #20]
 8001918:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	681a      	ldr	r2, [r3, #0]
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001928:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800192a:	b662      	cpsie	i
 800192c:	e175      	b.n	8001c1a <HAL_I2C_Master_Receive+0x476>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	681a      	ldr	r2, [r3, #0]
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800193c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800193e:	2300      	movs	r3, #0
 8001940:	613b      	str	r3, [r7, #16]
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	695b      	ldr	r3, [r3, #20]
 8001948:	613b      	str	r3, [r7, #16]
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	699b      	ldr	r3, [r3, #24]
 8001950:	613b      	str	r3, [r7, #16]
 8001952:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8001954:	e161      	b.n	8001c1a <HAL_I2C_Master_Receive+0x476>
    {
      if (hi2c->XferSize <= 3U)
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800195a:	2b03      	cmp	r3, #3
 800195c:	f200 811a 	bhi.w	8001b94 <HAL_I2C_Master_Receive+0x3f0>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001964:	2b01      	cmp	r3, #1
 8001966:	d123      	bne.n	80019b0 <HAL_I2C_Master_Receive+0x20c>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001968:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800196a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800196c:	68f8      	ldr	r0, [r7, #12]
 800196e:	f001 f893 	bl	8002a98 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001972:	4603      	mov	r3, r0
 8001974:	2b00      	cmp	r3, #0
 8001976:	d001      	beq.n	800197c <HAL_I2C_Master_Receive+0x1d8>
          {
            return HAL_ERROR;
 8001978:	2301      	movs	r3, #1
 800197a:	e162      	b.n	8001c42 <HAL_I2C_Master_Receive+0x49e>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	691a      	ldr	r2, [r3, #16]
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001986:	b2d2      	uxtb	r2, r2
 8001988:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800198e:	1c5a      	adds	r2, r3, #1
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001998:	3b01      	subs	r3, #1
 800199a:	b29a      	uxth	r2, r3
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019a4:	b29b      	uxth	r3, r3
 80019a6:	3b01      	subs	r3, #1
 80019a8:	b29a      	uxth	r2, r3
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	855a      	strh	r2, [r3, #42]	; 0x2a
 80019ae:	e134      	b.n	8001c1a <HAL_I2C_Master_Receive+0x476>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019b4:	2b02      	cmp	r3, #2
 80019b6:	d150      	bne.n	8001a5a <HAL_I2C_Master_Receive+0x2b6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80019b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ba:	9300      	str	r3, [sp, #0]
 80019bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019be:	2200      	movs	r2, #0
 80019c0:	4906      	ldr	r1, [pc, #24]	; (80019dc <HAL_I2C_Master_Receive+0x238>)
 80019c2:	68f8      	ldr	r0, [r7, #12]
 80019c4:	f000 ff10 	bl	80027e8 <I2C_WaitOnFlagUntilTimeout>
 80019c8:	4603      	mov	r3, r0
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d008      	beq.n	80019e0 <HAL_I2C_Master_Receive+0x23c>
          {
            return HAL_ERROR;
 80019ce:	2301      	movs	r3, #1
 80019d0:	e137      	b.n	8001c42 <HAL_I2C_Master_Receive+0x49e>
 80019d2:	bf00      	nop
 80019d4:	00100002 	.word	0x00100002
 80019d8:	ffff0000 	.word	0xffff0000
 80019dc:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80019e0:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	681a      	ldr	r2, [r3, #0]
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80019f0:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	691a      	ldr	r2, [r3, #16]
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019fc:	b2d2      	uxtb	r2, r2
 80019fe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a04:	1c5a      	adds	r2, r3, #1
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a0e:	3b01      	subs	r3, #1
 8001a10:	b29a      	uxth	r2, r3
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a1a:	b29b      	uxth	r3, r3
 8001a1c:	3b01      	subs	r3, #1
 8001a1e:	b29a      	uxth	r2, r3
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001a24:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	691a      	ldr	r2, [r3, #16]
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a30:	b2d2      	uxtb	r2, r2
 8001a32:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a38:	1c5a      	adds	r2, r3, #1
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a42:	3b01      	subs	r3, #1
 8001a44:	b29a      	uxth	r2, r3
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a4e:	b29b      	uxth	r3, r3
 8001a50:	3b01      	subs	r3, #1
 8001a52:	b29a      	uxth	r2, r3
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001a58:	e0df      	b.n	8001c1a <HAL_I2C_Master_Receive+0x476>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a5c:	9300      	str	r3, [sp, #0]
 8001a5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a60:	2200      	movs	r2, #0
 8001a62:	497a      	ldr	r1, [pc, #488]	; (8001c4c <HAL_I2C_Master_Receive+0x4a8>)
 8001a64:	68f8      	ldr	r0, [r7, #12]
 8001a66:	f000 febf 	bl	80027e8 <I2C_WaitOnFlagUntilTimeout>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d001      	beq.n	8001a74 <HAL_I2C_Master_Receive+0x2d0>
          {
            return HAL_ERROR;
 8001a70:	2301      	movs	r3, #1
 8001a72:	e0e6      	b.n	8001c42 <HAL_I2C_Master_Receive+0x49e>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	681a      	ldr	r2, [r3, #0]
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001a82:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001a84:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	691a      	ldr	r2, [r3, #16]
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a90:	b2d2      	uxtb	r2, r2
 8001a92:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a98:	1c5a      	adds	r2, r3, #1
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001aa2:	3b01      	subs	r3, #1
 8001aa4:	b29a      	uxth	r2, r3
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001aae:	b29b      	uxth	r3, r3
 8001ab0:	3b01      	subs	r3, #1
 8001ab2:	b29a      	uxth	r2, r3
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8001ab8:	4b65      	ldr	r3, [pc, #404]	; (8001c50 <HAL_I2C_Master_Receive+0x4ac>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	08db      	lsrs	r3, r3, #3
 8001abe:	4a65      	ldr	r2, [pc, #404]	; (8001c54 <HAL_I2C_Master_Receive+0x4b0>)
 8001ac0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ac4:	0a1a      	lsrs	r2, r3, #8
 8001ac6:	4613      	mov	r3, r2
 8001ac8:	009b      	lsls	r3, r3, #2
 8001aca:	4413      	add	r3, r2
 8001acc:	00da      	lsls	r2, r3, #3
 8001ace:	1ad3      	subs	r3, r2, r3
 8001ad0:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8001ad2:	6a3b      	ldr	r3, [r7, #32]
 8001ad4:	3b01      	subs	r3, #1
 8001ad6:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8001ad8:	6a3b      	ldr	r3, [r7, #32]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d117      	bne.n	8001b0e <HAL_I2C_Master_Receive+0x36a>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	2220      	movs	r2, #32
 8001ae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	2200      	movs	r2, #0
 8001af0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af8:	f043 0220 	orr.w	r2, r3, #32
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8001b00:	b662      	cpsie	i

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	2200      	movs	r2, #0
 8001b06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	e099      	b.n	8001c42 <HAL_I2C_Master_Receive+0x49e>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	695b      	ldr	r3, [r3, #20]
 8001b14:	f003 0304 	and.w	r3, r3, #4
 8001b18:	2b04      	cmp	r3, #4
 8001b1a:	d1da      	bne.n	8001ad2 <HAL_I2C_Master_Receive+0x32e>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	681a      	ldr	r2, [r3, #0]
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b2a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	691a      	ldr	r2, [r3, #16]
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b36:	b2d2      	uxtb	r2, r2
 8001b38:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b3e:	1c5a      	adds	r2, r3, #1
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b48:	3b01      	subs	r3, #1
 8001b4a:	b29a      	uxth	r2, r3
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b54:	b29b      	uxth	r3, r3
 8001b56:	3b01      	subs	r3, #1
 8001b58:	b29a      	uxth	r2, r3
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001b5e:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	691a      	ldr	r2, [r3, #16]
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b6a:	b2d2      	uxtb	r2, r2
 8001b6c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b72:	1c5a      	adds	r2, r3, #1
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b7c:	3b01      	subs	r3, #1
 8001b7e:	b29a      	uxth	r2, r3
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b88:	b29b      	uxth	r3, r3
 8001b8a:	3b01      	subs	r3, #1
 8001b8c:	b29a      	uxth	r2, r3
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001b92:	e042      	b.n	8001c1a <HAL_I2C_Master_Receive+0x476>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b96:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001b98:	68f8      	ldr	r0, [r7, #12]
 8001b9a:	f000 ff7d 	bl	8002a98 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d001      	beq.n	8001ba8 <HAL_I2C_Master_Receive+0x404>
        {
          return HAL_ERROR;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	e04c      	b.n	8001c42 <HAL_I2C_Master_Receive+0x49e>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	691a      	ldr	r2, [r3, #16]
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bb2:	b2d2      	uxtb	r2, r2
 8001bb4:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bba:	1c5a      	adds	r2, r3, #1
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bc4:	3b01      	subs	r3, #1
 8001bc6:	b29a      	uxth	r2, r3
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bd0:	b29b      	uxth	r3, r3
 8001bd2:	3b01      	subs	r3, #1
 8001bd4:	b29a      	uxth	r2, r3
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	695b      	ldr	r3, [r3, #20]
 8001be0:	f003 0304 	and.w	r3, r3, #4
 8001be4:	2b04      	cmp	r3, #4
 8001be6:	d118      	bne.n	8001c1a <HAL_I2C_Master_Receive+0x476>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	691a      	ldr	r2, [r3, #16]
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bf2:	b2d2      	uxtb	r2, r2
 8001bf4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bfa:	1c5a      	adds	r2, r3, #1
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c04:	3b01      	subs	r3, #1
 8001c06:	b29a      	uxth	r2, r3
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c10:	b29b      	uxth	r3, r3
 8001c12:	3b01      	subs	r3, #1
 8001c14:	b29a      	uxth	r2, r3
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	f47f ae99 	bne.w	8001956 <HAL_I2C_Master_Receive+0x1b2>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	2220      	movs	r2, #32
 8001c28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	2200      	movs	r2, #0
 8001c30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	2200      	movs	r2, #0
 8001c38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	e000      	b.n	8001c42 <HAL_I2C_Master_Receive+0x49e>
  }
  else
  {
    return HAL_BUSY;
 8001c40:	2302      	movs	r3, #2
  }
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	3728      	adds	r7, #40	; 0x28
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	00010004 	.word	0x00010004
 8001c50:	20000000 	.word	0x20000000
 8001c54:	14f8b589 	.word	0x14f8b589

08001c58 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b08c      	sub	sp, #48	; 0x30
 8001c5c:	af02      	add	r7, sp, #8
 8001c5e:	60f8      	str	r0, [r7, #12]
 8001c60:	4608      	mov	r0, r1
 8001c62:	4611      	mov	r1, r2
 8001c64:	461a      	mov	r2, r3
 8001c66:	4603      	mov	r3, r0
 8001c68:	817b      	strh	r3, [r7, #10]
 8001c6a:	460b      	mov	r3, r1
 8001c6c:	813b      	strh	r3, [r7, #8]
 8001c6e:	4613      	mov	r3, r2
 8001c70:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8001c72:	2300      	movs	r3, #0
 8001c74:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001c76:	f7ff f8dd 	bl	8000e34 <HAL_GetTick>
 8001c7a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c82:	b2db      	uxtb	r3, r3
 8001c84:	2b20      	cmp	r3, #32
 8001c86:	f040 823d 	bne.w	8002104 <HAL_I2C_Mem_Read+0x4ac>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c8c:	9300      	str	r3, [sp, #0]
 8001c8e:	2319      	movs	r3, #25
 8001c90:	2201      	movs	r2, #1
 8001c92:	4981      	ldr	r1, [pc, #516]	; (8001e98 <HAL_I2C_Mem_Read+0x240>)
 8001c94:	68f8      	ldr	r0, [r7, #12]
 8001c96:	f000 fda7 	bl	80027e8 <I2C_WaitOnFlagUntilTimeout>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d001      	beq.n	8001ca4 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8001ca0:	2302      	movs	r3, #2
 8001ca2:	e230      	b.n	8002106 <HAL_I2C_Mem_Read+0x4ae>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001caa:	2b01      	cmp	r3, #1
 8001cac:	d101      	bne.n	8001cb2 <HAL_I2C_Mem_Read+0x5a>
 8001cae:	2302      	movs	r3, #2
 8001cb0:	e229      	b.n	8002106 <HAL_I2C_Mem_Read+0x4ae>
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f003 0301 	and.w	r3, r3, #1
 8001cc4:	2b01      	cmp	r3, #1
 8001cc6:	d007      	beq.n	8001cd8 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	681a      	ldr	r2, [r3, #0]
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f042 0201 	orr.w	r2, r2, #1
 8001cd6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	681a      	ldr	r2, [r3, #0]
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ce6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	2222      	movs	r2, #34	; 0x22
 8001cec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	2240      	movs	r2, #64	; 0x40
 8001cf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001d02:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001d08:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d0e:	b29a      	uxth	r2, r3
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	4a61      	ldr	r2, [pc, #388]	; (8001e9c <HAL_I2C_Mem_Read+0x244>)
 8001d18:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001d1a:	88f8      	ldrh	r0, [r7, #6]
 8001d1c:	893a      	ldrh	r2, [r7, #8]
 8001d1e:	8979      	ldrh	r1, [r7, #10]
 8001d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d22:	9301      	str	r3, [sp, #4]
 8001d24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d26:	9300      	str	r3, [sp, #0]
 8001d28:	4603      	mov	r3, r0
 8001d2a:	68f8      	ldr	r0, [r7, #12]
 8001d2c:	f000 fc74 	bl	8002618 <I2C_RequestMemoryRead>
 8001d30:	4603      	mov	r3, r0
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d001      	beq.n	8001d3a <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8001d36:	2301      	movs	r3, #1
 8001d38:	e1e5      	b.n	8002106 <HAL_I2C_Mem_Read+0x4ae>
    }

    if (hi2c->XferSize == 0U)
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d113      	bne.n	8001d6a <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d42:	2300      	movs	r3, #0
 8001d44:	61fb      	str	r3, [r7, #28]
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	695b      	ldr	r3, [r3, #20]
 8001d4c:	61fb      	str	r3, [r7, #28]
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	699b      	ldr	r3, [r3, #24]
 8001d54:	61fb      	str	r3, [r7, #28]
 8001d56:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	681a      	ldr	r2, [r3, #0]
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d66:	601a      	str	r2, [r3, #0]
 8001d68:	e1b9      	b.n	80020de <HAL_I2C_Mem_Read+0x486>
    }
    else if (hi2c->XferSize == 1U)
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d6e:	2b01      	cmp	r3, #1
 8001d70:	d11d      	bne.n	8001dae <HAL_I2C_Mem_Read+0x156>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	681a      	ldr	r2, [r3, #0]
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d80:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001d82:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d84:	2300      	movs	r3, #0
 8001d86:	61bb      	str	r3, [r7, #24]
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	695b      	ldr	r3, [r3, #20]
 8001d8e:	61bb      	str	r3, [r7, #24]
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	699b      	ldr	r3, [r3, #24]
 8001d96:	61bb      	str	r3, [r7, #24]
 8001d98:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	681a      	ldr	r2, [r3, #0]
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001da8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001daa:	b662      	cpsie	i
 8001dac:	e197      	b.n	80020de <HAL_I2C_Mem_Read+0x486>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001db2:	2b02      	cmp	r3, #2
 8001db4:	d11d      	bne.n	8001df2 <HAL_I2C_Mem_Read+0x19a>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	681a      	ldr	r2, [r3, #0]
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001dc4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001dc6:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001dc8:	2300      	movs	r3, #0
 8001dca:	617b      	str	r3, [r7, #20]
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	695b      	ldr	r3, [r3, #20]
 8001dd2:	617b      	str	r3, [r7, #20]
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	699b      	ldr	r3, [r3, #24]
 8001dda:	617b      	str	r3, [r7, #20]
 8001ddc:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	681a      	ldr	r2, [r3, #0]
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001dec:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001dee:	b662      	cpsie	i
 8001df0:	e175      	b.n	80020de <HAL_I2C_Mem_Read+0x486>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001e00:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e02:	2300      	movs	r3, #0
 8001e04:	613b      	str	r3, [r7, #16]
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	695b      	ldr	r3, [r3, #20]
 8001e0c:	613b      	str	r3, [r7, #16]
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	699b      	ldr	r3, [r3, #24]
 8001e14:	613b      	str	r3, [r7, #16]
 8001e16:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8001e18:	e161      	b.n	80020de <HAL_I2C_Mem_Read+0x486>
    {
      if (hi2c->XferSize <= 3U)
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e1e:	2b03      	cmp	r3, #3
 8001e20:	f200 811a 	bhi.w	8002058 <HAL_I2C_Mem_Read+0x400>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e28:	2b01      	cmp	r3, #1
 8001e2a:	d123      	bne.n	8001e74 <HAL_I2C_Mem_Read+0x21c>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e2e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001e30:	68f8      	ldr	r0, [r7, #12]
 8001e32:	f000 fe31 	bl	8002a98 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001e36:	4603      	mov	r3, r0
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d001      	beq.n	8001e40 <HAL_I2C_Mem_Read+0x1e8>
          {
            return HAL_ERROR;
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	e162      	b.n	8002106 <HAL_I2C_Mem_Read+0x4ae>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	691a      	ldr	r2, [r3, #16]
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e4a:	b2d2      	uxtb	r2, r2
 8001e4c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e52:	1c5a      	adds	r2, r3, #1
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e5c:	3b01      	subs	r3, #1
 8001e5e:	b29a      	uxth	r2, r3
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e68:	b29b      	uxth	r3, r3
 8001e6a:	3b01      	subs	r3, #1
 8001e6c:	b29a      	uxth	r2, r3
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001e72:	e134      	b.n	80020de <HAL_I2C_Mem_Read+0x486>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e78:	2b02      	cmp	r3, #2
 8001e7a:	d150      	bne.n	8001f1e <HAL_I2C_Mem_Read+0x2c6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e7e:	9300      	str	r3, [sp, #0]
 8001e80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e82:	2200      	movs	r2, #0
 8001e84:	4906      	ldr	r1, [pc, #24]	; (8001ea0 <HAL_I2C_Mem_Read+0x248>)
 8001e86:	68f8      	ldr	r0, [r7, #12]
 8001e88:	f000 fcae 	bl	80027e8 <I2C_WaitOnFlagUntilTimeout>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d008      	beq.n	8001ea4 <HAL_I2C_Mem_Read+0x24c>
          {
            return HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
 8001e94:	e137      	b.n	8002106 <HAL_I2C_Mem_Read+0x4ae>
 8001e96:	bf00      	nop
 8001e98:	00100002 	.word	0x00100002
 8001e9c:	ffff0000 	.word	0xffff0000
 8001ea0:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8001ea4:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	681a      	ldr	r2, [r3, #0]
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001eb4:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	691a      	ldr	r2, [r3, #16]
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ec0:	b2d2      	uxtb	r2, r2
 8001ec2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ec8:	1c5a      	adds	r2, r3, #1
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ed2:	3b01      	subs	r3, #1
 8001ed4:	b29a      	uxth	r2, r3
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ede:	b29b      	uxth	r3, r3
 8001ee0:	3b01      	subs	r3, #1
 8001ee2:	b29a      	uxth	r2, r3
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001ee8:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	691a      	ldr	r2, [r3, #16]
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef4:	b2d2      	uxtb	r2, r2
 8001ef6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001efc:	1c5a      	adds	r2, r3, #1
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f06:	3b01      	subs	r3, #1
 8001f08:	b29a      	uxth	r2, r3
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f12:	b29b      	uxth	r3, r3
 8001f14:	3b01      	subs	r3, #1
 8001f16:	b29a      	uxth	r2, r3
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001f1c:	e0df      	b.n	80020de <HAL_I2C_Mem_Read+0x486>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f20:	9300      	str	r3, [sp, #0]
 8001f22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f24:	2200      	movs	r2, #0
 8001f26:	497a      	ldr	r1, [pc, #488]	; (8002110 <HAL_I2C_Mem_Read+0x4b8>)
 8001f28:	68f8      	ldr	r0, [r7, #12]
 8001f2a:	f000 fc5d 	bl	80027e8 <I2C_WaitOnFlagUntilTimeout>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d001      	beq.n	8001f38 <HAL_I2C_Mem_Read+0x2e0>
          {
            return HAL_ERROR;
 8001f34:	2301      	movs	r3, #1
 8001f36:	e0e6      	b.n	8002106 <HAL_I2C_Mem_Read+0x4ae>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	681a      	ldr	r2, [r3, #0]
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f46:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001f48:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	691a      	ldr	r2, [r3, #16]
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f54:	b2d2      	uxtb	r2, r2
 8001f56:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f5c:	1c5a      	adds	r2, r3, #1
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f66:	3b01      	subs	r3, #1
 8001f68:	b29a      	uxth	r2, r3
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f72:	b29b      	uxth	r3, r3
 8001f74:	3b01      	subs	r3, #1
 8001f76:	b29a      	uxth	r2, r3
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8001f7c:	4b65      	ldr	r3, [pc, #404]	; (8002114 <HAL_I2C_Mem_Read+0x4bc>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	08db      	lsrs	r3, r3, #3
 8001f82:	4a65      	ldr	r2, [pc, #404]	; (8002118 <HAL_I2C_Mem_Read+0x4c0>)
 8001f84:	fba2 2303 	umull	r2, r3, r2, r3
 8001f88:	0a1a      	lsrs	r2, r3, #8
 8001f8a:	4613      	mov	r3, r2
 8001f8c:	009b      	lsls	r3, r3, #2
 8001f8e:	4413      	add	r3, r2
 8001f90:	00da      	lsls	r2, r3, #3
 8001f92:	1ad3      	subs	r3, r2, r3
 8001f94:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8001f96:	6a3b      	ldr	r3, [r7, #32]
 8001f98:	3b01      	subs	r3, #1
 8001f9a:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8001f9c:	6a3b      	ldr	r3, [r7, #32]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d117      	bne.n	8001fd2 <HAL_I2C_Mem_Read+0x37a>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	2220      	movs	r2, #32
 8001fac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fbc:	f043 0220 	orr.w	r2, r3, #32
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8001fc4:	b662      	cpsie	i

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	2200      	movs	r2, #0
 8001fca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e099      	b.n	8002106 <HAL_I2C_Mem_Read+0x4ae>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	695b      	ldr	r3, [r3, #20]
 8001fd8:	f003 0304 	and.w	r3, r3, #4
 8001fdc:	2b04      	cmp	r3, #4
 8001fde:	d1da      	bne.n	8001f96 <HAL_I2C_Mem_Read+0x33e>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	681a      	ldr	r2, [r3, #0]
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	691a      	ldr	r2, [r3, #16]
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ffa:	b2d2      	uxtb	r2, r2
 8001ffc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002002:	1c5a      	adds	r2, r3, #1
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800200c:	3b01      	subs	r3, #1
 800200e:	b29a      	uxth	r2, r3
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002018:	b29b      	uxth	r3, r3
 800201a:	3b01      	subs	r3, #1
 800201c:	b29a      	uxth	r2, r3
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002022:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	691a      	ldr	r2, [r3, #16]
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800202e:	b2d2      	uxtb	r2, r2
 8002030:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002036:	1c5a      	adds	r2, r3, #1
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002040:	3b01      	subs	r3, #1
 8002042:	b29a      	uxth	r2, r3
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800204c:	b29b      	uxth	r3, r3
 800204e:	3b01      	subs	r3, #1
 8002050:	b29a      	uxth	r2, r3
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002056:	e042      	b.n	80020de <HAL_I2C_Mem_Read+0x486>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002058:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800205a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800205c:	68f8      	ldr	r0, [r7, #12]
 800205e:	f000 fd1b 	bl	8002a98 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002062:	4603      	mov	r3, r0
 8002064:	2b00      	cmp	r3, #0
 8002066:	d001      	beq.n	800206c <HAL_I2C_Mem_Read+0x414>
        {
          return HAL_ERROR;
 8002068:	2301      	movs	r3, #1
 800206a:	e04c      	b.n	8002106 <HAL_I2C_Mem_Read+0x4ae>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	691a      	ldr	r2, [r3, #16]
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002076:	b2d2      	uxtb	r2, r2
 8002078:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800207e:	1c5a      	adds	r2, r3, #1
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002088:	3b01      	subs	r3, #1
 800208a:	b29a      	uxth	r2, r3
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002094:	b29b      	uxth	r3, r3
 8002096:	3b01      	subs	r3, #1
 8002098:	b29a      	uxth	r2, r3
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	695b      	ldr	r3, [r3, #20]
 80020a4:	f003 0304 	and.w	r3, r3, #4
 80020a8:	2b04      	cmp	r3, #4
 80020aa:	d118      	bne.n	80020de <HAL_I2C_Mem_Read+0x486>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	691a      	ldr	r2, [r3, #16]
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020b6:	b2d2      	uxtb	r2, r2
 80020b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020be:	1c5a      	adds	r2, r3, #1
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020c8:	3b01      	subs	r3, #1
 80020ca:	b29a      	uxth	r2, r3
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020d4:	b29b      	uxth	r3, r3
 80020d6:	3b01      	subs	r3, #1
 80020d8:	b29a      	uxth	r2, r3
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	f47f ae99 	bne.w	8001e1a <HAL_I2C_Mem_Read+0x1c2>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	2220      	movs	r2, #32
 80020ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	2200      	movs	r2, #0
 80020f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	2200      	movs	r2, #0
 80020fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002100:	2300      	movs	r3, #0
 8002102:	e000      	b.n	8002106 <HAL_I2C_Mem_Read+0x4ae>
  }
  else
  {
    return HAL_BUSY;
 8002104:	2302      	movs	r3, #2
  }
}
 8002106:	4618      	mov	r0, r3
 8002108:	3728      	adds	r7, #40	; 0x28
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	00010004 	.word	0x00010004
 8002114:	20000000 	.word	0x20000000
 8002118:	14f8b589 	.word	0x14f8b589

0800211c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b08a      	sub	sp, #40	; 0x28
 8002120:	af02      	add	r7, sp, #8
 8002122:	60f8      	str	r0, [r7, #12]
 8002124:	607a      	str	r2, [r7, #4]
 8002126:	603b      	str	r3, [r7, #0]
 8002128:	460b      	mov	r3, r1
 800212a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800212c:	f7fe fe82 	bl	8000e34 <HAL_GetTick>
 8002130:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8002132:	2301      	movs	r3, #1
 8002134:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800213c:	b2db      	uxtb	r3, r3
 800213e:	2b20      	cmp	r3, #32
 8002140:	f040 8111 	bne.w	8002366 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002144:	69fb      	ldr	r3, [r7, #28]
 8002146:	9300      	str	r3, [sp, #0]
 8002148:	2319      	movs	r3, #25
 800214a:	2201      	movs	r2, #1
 800214c:	4988      	ldr	r1, [pc, #544]	; (8002370 <HAL_I2C_IsDeviceReady+0x254>)
 800214e:	68f8      	ldr	r0, [r7, #12]
 8002150:	f000 fb4a 	bl	80027e8 <I2C_WaitOnFlagUntilTimeout>
 8002154:	4603      	mov	r3, r0
 8002156:	2b00      	cmp	r3, #0
 8002158:	d001      	beq.n	800215e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800215a:	2302      	movs	r3, #2
 800215c:	e104      	b.n	8002368 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002164:	2b01      	cmp	r3, #1
 8002166:	d101      	bne.n	800216c <HAL_I2C_IsDeviceReady+0x50>
 8002168:	2302      	movs	r3, #2
 800216a:	e0fd      	b.n	8002368 <HAL_I2C_IsDeviceReady+0x24c>
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	2201      	movs	r2, #1
 8002170:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f003 0301 	and.w	r3, r3, #1
 800217e:	2b01      	cmp	r3, #1
 8002180:	d007      	beq.n	8002192 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	681a      	ldr	r2, [r3, #0]
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f042 0201 	orr.w	r2, r2, #1
 8002190:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	681a      	ldr	r2, [r3, #0]
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80021a0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	2224      	movs	r2, #36	; 0x24
 80021a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	2200      	movs	r2, #0
 80021ae:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	4a70      	ldr	r2, [pc, #448]	; (8002374 <HAL_I2C_IsDeviceReady+0x258>)
 80021b4:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	681a      	ldr	r2, [r3, #0]
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80021c4:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80021c6:	69fb      	ldr	r3, [r7, #28]
 80021c8:	9300      	str	r3, [sp, #0]
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	2200      	movs	r2, #0
 80021ce:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80021d2:	68f8      	ldr	r0, [r7, #12]
 80021d4:	f000 fb08 	bl	80027e8 <I2C_WaitOnFlagUntilTimeout>
 80021d8:	4603      	mov	r3, r0
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d00d      	beq.n	80021fa <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80021ec:	d103      	bne.n	80021f6 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80021f4:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80021f6:	2303      	movs	r3, #3
 80021f8:	e0b6      	b.n	8002368 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80021fa:	897b      	ldrh	r3, [r7, #10]
 80021fc:	b2db      	uxtb	r3, r3
 80021fe:	461a      	mov	r2, r3
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002208:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800220a:	f7fe fe13 	bl	8000e34 <HAL_GetTick>
 800220e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	695b      	ldr	r3, [r3, #20]
 8002216:	f003 0302 	and.w	r3, r3, #2
 800221a:	2b02      	cmp	r3, #2
 800221c:	bf0c      	ite	eq
 800221e:	2301      	moveq	r3, #1
 8002220:	2300      	movne	r3, #0
 8002222:	b2db      	uxtb	r3, r3
 8002224:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	695b      	ldr	r3, [r3, #20]
 800222c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002230:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002234:	bf0c      	ite	eq
 8002236:	2301      	moveq	r3, #1
 8002238:	2300      	movne	r3, #0
 800223a:	b2db      	uxtb	r3, r3
 800223c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800223e:	e025      	b.n	800228c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002240:	f7fe fdf8 	bl	8000e34 <HAL_GetTick>
 8002244:	4602      	mov	r2, r0
 8002246:	69fb      	ldr	r3, [r7, #28]
 8002248:	1ad3      	subs	r3, r2, r3
 800224a:	683a      	ldr	r2, [r7, #0]
 800224c:	429a      	cmp	r2, r3
 800224e:	d302      	bcc.n	8002256 <HAL_I2C_IsDeviceReady+0x13a>
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d103      	bne.n	800225e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	22a0      	movs	r2, #160	; 0xa0
 800225a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	695b      	ldr	r3, [r3, #20]
 8002264:	f003 0302 	and.w	r3, r3, #2
 8002268:	2b02      	cmp	r3, #2
 800226a:	bf0c      	ite	eq
 800226c:	2301      	moveq	r3, #1
 800226e:	2300      	movne	r3, #0
 8002270:	b2db      	uxtb	r3, r3
 8002272:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	695b      	ldr	r3, [r3, #20]
 800227a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800227e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002282:	bf0c      	ite	eq
 8002284:	2301      	moveq	r3, #1
 8002286:	2300      	movne	r3, #0
 8002288:	b2db      	uxtb	r3, r3
 800228a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002292:	b2db      	uxtb	r3, r3
 8002294:	2ba0      	cmp	r3, #160	; 0xa0
 8002296:	d005      	beq.n	80022a4 <HAL_I2C_IsDeviceReady+0x188>
 8002298:	7dfb      	ldrb	r3, [r7, #23]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d102      	bne.n	80022a4 <HAL_I2C_IsDeviceReady+0x188>
 800229e:	7dbb      	ldrb	r3, [r7, #22]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d0cd      	beq.n	8002240 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	2220      	movs	r2, #32
 80022a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	695b      	ldr	r3, [r3, #20]
 80022b2:	f003 0302 	and.w	r3, r3, #2
 80022b6:	2b02      	cmp	r3, #2
 80022b8:	d129      	bne.n	800230e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	681a      	ldr	r2, [r3, #0]
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022c8:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022ca:	2300      	movs	r3, #0
 80022cc:	613b      	str	r3, [r7, #16]
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	695b      	ldr	r3, [r3, #20]
 80022d4:	613b      	str	r3, [r7, #16]
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	699b      	ldr	r3, [r3, #24]
 80022dc:	613b      	str	r3, [r7, #16]
 80022de:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80022e0:	69fb      	ldr	r3, [r7, #28]
 80022e2:	9300      	str	r3, [sp, #0]
 80022e4:	2319      	movs	r3, #25
 80022e6:	2201      	movs	r2, #1
 80022e8:	4921      	ldr	r1, [pc, #132]	; (8002370 <HAL_I2C_IsDeviceReady+0x254>)
 80022ea:	68f8      	ldr	r0, [r7, #12]
 80022ec:	f000 fa7c 	bl	80027e8 <I2C_WaitOnFlagUntilTimeout>
 80022f0:	4603      	mov	r3, r0
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d001      	beq.n	80022fa <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80022f6:	2301      	movs	r3, #1
 80022f8:	e036      	b.n	8002368 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	2220      	movs	r2, #32
 80022fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	2200      	movs	r2, #0
 8002306:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800230a:	2300      	movs	r3, #0
 800230c:	e02c      	b.n	8002368 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	681a      	ldr	r2, [r3, #0]
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800231c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002326:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002328:	69fb      	ldr	r3, [r7, #28]
 800232a:	9300      	str	r3, [sp, #0]
 800232c:	2319      	movs	r3, #25
 800232e:	2201      	movs	r2, #1
 8002330:	490f      	ldr	r1, [pc, #60]	; (8002370 <HAL_I2C_IsDeviceReady+0x254>)
 8002332:	68f8      	ldr	r0, [r7, #12]
 8002334:	f000 fa58 	bl	80027e8 <I2C_WaitOnFlagUntilTimeout>
 8002338:	4603      	mov	r3, r0
 800233a:	2b00      	cmp	r3, #0
 800233c:	d001      	beq.n	8002342 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800233e:	2301      	movs	r3, #1
 8002340:	e012      	b.n	8002368 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002342:	69bb      	ldr	r3, [r7, #24]
 8002344:	3301      	adds	r3, #1
 8002346:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002348:	69ba      	ldr	r2, [r7, #24]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	429a      	cmp	r2, r3
 800234e:	f4ff af32 	bcc.w	80021b6 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	2220      	movs	r2, #32
 8002356:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	2200      	movs	r2, #0
 800235e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002362:	2301      	movs	r3, #1
 8002364:	e000      	b.n	8002368 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002366:	2302      	movs	r3, #2
  }
}
 8002368:	4618      	mov	r0, r3
 800236a:	3720      	adds	r7, #32
 800236c:	46bd      	mov	sp, r7
 800236e:	bd80      	pop	{r7, pc}
 8002370:	00100002 	.word	0x00100002
 8002374:	ffff0000 	.word	0xffff0000

08002378 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b088      	sub	sp, #32
 800237c:	af02      	add	r7, sp, #8
 800237e:	60f8      	str	r0, [r7, #12]
 8002380:	607a      	str	r2, [r7, #4]
 8002382:	603b      	str	r3, [r7, #0]
 8002384:	460b      	mov	r3, r1
 8002386:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800238c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800238e:	697b      	ldr	r3, [r7, #20]
 8002390:	2b08      	cmp	r3, #8
 8002392:	d006      	beq.n	80023a2 <I2C_MasterRequestWrite+0x2a>
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	2b01      	cmp	r3, #1
 8002398:	d003      	beq.n	80023a2 <I2C_MasterRequestWrite+0x2a>
 800239a:	697b      	ldr	r3, [r7, #20]
 800239c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80023a0:	d108      	bne.n	80023b4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	681a      	ldr	r2, [r3, #0]
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80023b0:	601a      	str	r2, [r3, #0]
 80023b2:	e00b      	b.n	80023cc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b8:	2b12      	cmp	r3, #18
 80023ba:	d107      	bne.n	80023cc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	681a      	ldr	r2, [r3, #0]
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80023ca:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	9300      	str	r3, [sp, #0]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2200      	movs	r2, #0
 80023d4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80023d8:	68f8      	ldr	r0, [r7, #12]
 80023da:	f000 fa05 	bl	80027e8 <I2C_WaitOnFlagUntilTimeout>
 80023de:	4603      	mov	r3, r0
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d00d      	beq.n	8002400 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80023f2:	d103      	bne.n	80023fc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80023fa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80023fc:	2303      	movs	r3, #3
 80023fe:	e035      	b.n	800246c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	691b      	ldr	r3, [r3, #16]
 8002404:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002408:	d108      	bne.n	800241c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800240a:	897b      	ldrh	r3, [r7, #10]
 800240c:	b2db      	uxtb	r3, r3
 800240e:	461a      	mov	r2, r3
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002418:	611a      	str	r2, [r3, #16]
 800241a:	e01b      	b.n	8002454 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800241c:	897b      	ldrh	r3, [r7, #10]
 800241e:	11db      	asrs	r3, r3, #7
 8002420:	b2db      	uxtb	r3, r3
 8002422:	f003 0306 	and.w	r3, r3, #6
 8002426:	b2db      	uxtb	r3, r3
 8002428:	f063 030f 	orn	r3, r3, #15
 800242c:	b2da      	uxtb	r2, r3
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	687a      	ldr	r2, [r7, #4]
 8002438:	490e      	ldr	r1, [pc, #56]	; (8002474 <I2C_MasterRequestWrite+0xfc>)
 800243a:	68f8      	ldr	r0, [r7, #12]
 800243c:	f000 fa2b 	bl	8002896 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002440:	4603      	mov	r3, r0
 8002442:	2b00      	cmp	r3, #0
 8002444:	d001      	beq.n	800244a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	e010      	b.n	800246c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800244a:	897b      	ldrh	r3, [r7, #10]
 800244c:	b2da      	uxtb	r2, r3
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	687a      	ldr	r2, [r7, #4]
 8002458:	4907      	ldr	r1, [pc, #28]	; (8002478 <I2C_MasterRequestWrite+0x100>)
 800245a:	68f8      	ldr	r0, [r7, #12]
 800245c:	f000 fa1b 	bl	8002896 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002460:	4603      	mov	r3, r0
 8002462:	2b00      	cmp	r3, #0
 8002464:	d001      	beq.n	800246a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	e000      	b.n	800246c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800246a:	2300      	movs	r3, #0
}
 800246c:	4618      	mov	r0, r3
 800246e:	3718      	adds	r7, #24
 8002470:	46bd      	mov	sp, r7
 8002472:	bd80      	pop	{r7, pc}
 8002474:	00010008 	.word	0x00010008
 8002478:	00010002 	.word	0x00010002

0800247c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b088      	sub	sp, #32
 8002480:	af02      	add	r7, sp, #8
 8002482:	60f8      	str	r0, [r7, #12]
 8002484:	607a      	str	r2, [r7, #4]
 8002486:	603b      	str	r3, [r7, #0]
 8002488:	460b      	mov	r3, r1
 800248a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002490:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	681a      	ldr	r2, [r3, #0]
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80024a0:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80024a2:	697b      	ldr	r3, [r7, #20]
 80024a4:	2b08      	cmp	r3, #8
 80024a6:	d006      	beq.n	80024b6 <I2C_MasterRequestRead+0x3a>
 80024a8:	697b      	ldr	r3, [r7, #20]
 80024aa:	2b01      	cmp	r3, #1
 80024ac:	d003      	beq.n	80024b6 <I2C_MasterRequestRead+0x3a>
 80024ae:	697b      	ldr	r3, [r7, #20]
 80024b0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80024b4:	d108      	bne.n	80024c8 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	681a      	ldr	r2, [r3, #0]
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80024c4:	601a      	str	r2, [r3, #0]
 80024c6:	e00b      	b.n	80024e0 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024cc:	2b11      	cmp	r3, #17
 80024ce:	d107      	bne.n	80024e0 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	681a      	ldr	r2, [r3, #0]
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80024de:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	9300      	str	r3, [sp, #0]
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2200      	movs	r2, #0
 80024e8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80024ec:	68f8      	ldr	r0, [r7, #12]
 80024ee:	f000 f97b 	bl	80027e8 <I2C_WaitOnFlagUntilTimeout>
 80024f2:	4603      	mov	r3, r0
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d00d      	beq.n	8002514 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002502:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002506:	d103      	bne.n	8002510 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800250e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002510:	2303      	movs	r3, #3
 8002512:	e079      	b.n	8002608 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	691b      	ldr	r3, [r3, #16]
 8002518:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800251c:	d108      	bne.n	8002530 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800251e:	897b      	ldrh	r3, [r7, #10]
 8002520:	b2db      	uxtb	r3, r3
 8002522:	f043 0301 	orr.w	r3, r3, #1
 8002526:	b2da      	uxtb	r2, r3
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	611a      	str	r2, [r3, #16]
 800252e:	e05f      	b.n	80025f0 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002530:	897b      	ldrh	r3, [r7, #10]
 8002532:	11db      	asrs	r3, r3, #7
 8002534:	b2db      	uxtb	r3, r3
 8002536:	f003 0306 	and.w	r3, r3, #6
 800253a:	b2db      	uxtb	r3, r3
 800253c:	f063 030f 	orn	r3, r3, #15
 8002540:	b2da      	uxtb	r2, r3
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	687a      	ldr	r2, [r7, #4]
 800254c:	4930      	ldr	r1, [pc, #192]	; (8002610 <I2C_MasterRequestRead+0x194>)
 800254e:	68f8      	ldr	r0, [r7, #12]
 8002550:	f000 f9a1 	bl	8002896 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002554:	4603      	mov	r3, r0
 8002556:	2b00      	cmp	r3, #0
 8002558:	d001      	beq.n	800255e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800255a:	2301      	movs	r3, #1
 800255c:	e054      	b.n	8002608 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800255e:	897b      	ldrh	r3, [r7, #10]
 8002560:	b2da      	uxtb	r2, r3
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	687a      	ldr	r2, [r7, #4]
 800256c:	4929      	ldr	r1, [pc, #164]	; (8002614 <I2C_MasterRequestRead+0x198>)
 800256e:	68f8      	ldr	r0, [r7, #12]
 8002570:	f000 f991 	bl	8002896 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002574:	4603      	mov	r3, r0
 8002576:	2b00      	cmp	r3, #0
 8002578:	d001      	beq.n	800257e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800257a:	2301      	movs	r3, #1
 800257c:	e044      	b.n	8002608 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800257e:	2300      	movs	r3, #0
 8002580:	613b      	str	r3, [r7, #16]
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	695b      	ldr	r3, [r3, #20]
 8002588:	613b      	str	r3, [r7, #16]
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	699b      	ldr	r3, [r3, #24]
 8002590:	613b      	str	r3, [r7, #16]
 8002592:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	681a      	ldr	r2, [r3, #0]
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80025a2:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	9300      	str	r3, [sp, #0]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2200      	movs	r2, #0
 80025ac:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80025b0:	68f8      	ldr	r0, [r7, #12]
 80025b2:	f000 f919 	bl	80027e8 <I2C_WaitOnFlagUntilTimeout>
 80025b6:	4603      	mov	r3, r0
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d00d      	beq.n	80025d8 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80025ca:	d103      	bne.n	80025d4 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80025d2:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80025d4:	2303      	movs	r3, #3
 80025d6:	e017      	b.n	8002608 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80025d8:	897b      	ldrh	r3, [r7, #10]
 80025da:	11db      	asrs	r3, r3, #7
 80025dc:	b2db      	uxtb	r3, r3
 80025de:	f003 0306 	and.w	r3, r3, #6
 80025e2:	b2db      	uxtb	r3, r3
 80025e4:	f063 030e 	orn	r3, r3, #14
 80025e8:	b2da      	uxtb	r2, r3
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	687a      	ldr	r2, [r7, #4]
 80025f4:	4907      	ldr	r1, [pc, #28]	; (8002614 <I2C_MasterRequestRead+0x198>)
 80025f6:	68f8      	ldr	r0, [r7, #12]
 80025f8:	f000 f94d 	bl	8002896 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80025fc:	4603      	mov	r3, r0
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d001      	beq.n	8002606 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002602:	2301      	movs	r3, #1
 8002604:	e000      	b.n	8002608 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002606:	2300      	movs	r3, #0
}
 8002608:	4618      	mov	r0, r3
 800260a:	3718      	adds	r7, #24
 800260c:	46bd      	mov	sp, r7
 800260e:	bd80      	pop	{r7, pc}
 8002610:	00010008 	.word	0x00010008
 8002614:	00010002 	.word	0x00010002

08002618 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b088      	sub	sp, #32
 800261c:	af02      	add	r7, sp, #8
 800261e:	60f8      	str	r0, [r7, #12]
 8002620:	4608      	mov	r0, r1
 8002622:	4611      	mov	r1, r2
 8002624:	461a      	mov	r2, r3
 8002626:	4603      	mov	r3, r0
 8002628:	817b      	strh	r3, [r7, #10]
 800262a:	460b      	mov	r3, r1
 800262c:	813b      	strh	r3, [r7, #8]
 800262e:	4613      	mov	r3, r2
 8002630:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	681a      	ldr	r2, [r3, #0]
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002640:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	681a      	ldr	r2, [r3, #0]
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002650:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002654:	9300      	str	r3, [sp, #0]
 8002656:	6a3b      	ldr	r3, [r7, #32]
 8002658:	2200      	movs	r2, #0
 800265a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800265e:	68f8      	ldr	r0, [r7, #12]
 8002660:	f000 f8c2 	bl	80027e8 <I2C_WaitOnFlagUntilTimeout>
 8002664:	4603      	mov	r3, r0
 8002666:	2b00      	cmp	r3, #0
 8002668:	d00d      	beq.n	8002686 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002674:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002678:	d103      	bne.n	8002682 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002680:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002682:	2303      	movs	r3, #3
 8002684:	e0aa      	b.n	80027dc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002686:	897b      	ldrh	r3, [r7, #10]
 8002688:	b2db      	uxtb	r3, r3
 800268a:	461a      	mov	r2, r3
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002694:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002698:	6a3a      	ldr	r2, [r7, #32]
 800269a:	4952      	ldr	r1, [pc, #328]	; (80027e4 <I2C_RequestMemoryRead+0x1cc>)
 800269c:	68f8      	ldr	r0, [r7, #12]
 800269e:	f000 f8fa 	bl	8002896 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80026a2:	4603      	mov	r3, r0
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d001      	beq.n	80026ac <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80026a8:	2301      	movs	r3, #1
 80026aa:	e097      	b.n	80027dc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026ac:	2300      	movs	r3, #0
 80026ae:	617b      	str	r3, [r7, #20]
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	695b      	ldr	r3, [r3, #20]
 80026b6:	617b      	str	r3, [r7, #20]
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	699b      	ldr	r3, [r3, #24]
 80026be:	617b      	str	r3, [r7, #20]
 80026c0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80026c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026c4:	6a39      	ldr	r1, [r7, #32]
 80026c6:	68f8      	ldr	r0, [r7, #12]
 80026c8:	f000 f964 	bl	8002994 <I2C_WaitOnTXEFlagUntilTimeout>
 80026cc:	4603      	mov	r3, r0
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d00d      	beq.n	80026ee <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d6:	2b04      	cmp	r3, #4
 80026d8:	d107      	bne.n	80026ea <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	681a      	ldr	r2, [r3, #0]
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026e8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	e076      	b.n	80027dc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80026ee:	88fb      	ldrh	r3, [r7, #6]
 80026f0:	2b01      	cmp	r3, #1
 80026f2:	d105      	bne.n	8002700 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80026f4:	893b      	ldrh	r3, [r7, #8]
 80026f6:	b2da      	uxtb	r2, r3
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	611a      	str	r2, [r3, #16]
 80026fe:	e021      	b.n	8002744 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002700:	893b      	ldrh	r3, [r7, #8]
 8002702:	0a1b      	lsrs	r3, r3, #8
 8002704:	b29b      	uxth	r3, r3
 8002706:	b2da      	uxtb	r2, r3
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800270e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002710:	6a39      	ldr	r1, [r7, #32]
 8002712:	68f8      	ldr	r0, [r7, #12]
 8002714:	f000 f93e 	bl	8002994 <I2C_WaitOnTXEFlagUntilTimeout>
 8002718:	4603      	mov	r3, r0
 800271a:	2b00      	cmp	r3, #0
 800271c:	d00d      	beq.n	800273a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002722:	2b04      	cmp	r3, #4
 8002724:	d107      	bne.n	8002736 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	681a      	ldr	r2, [r3, #0]
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002734:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002736:	2301      	movs	r3, #1
 8002738:	e050      	b.n	80027dc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800273a:	893b      	ldrh	r3, [r7, #8]
 800273c:	b2da      	uxtb	r2, r3
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002744:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002746:	6a39      	ldr	r1, [r7, #32]
 8002748:	68f8      	ldr	r0, [r7, #12]
 800274a:	f000 f923 	bl	8002994 <I2C_WaitOnTXEFlagUntilTimeout>
 800274e:	4603      	mov	r3, r0
 8002750:	2b00      	cmp	r3, #0
 8002752:	d00d      	beq.n	8002770 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002758:	2b04      	cmp	r3, #4
 800275a:	d107      	bne.n	800276c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	681a      	ldr	r2, [r3, #0]
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800276a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800276c:	2301      	movs	r3, #1
 800276e:	e035      	b.n	80027dc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	681a      	ldr	r2, [r3, #0]
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800277e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002782:	9300      	str	r3, [sp, #0]
 8002784:	6a3b      	ldr	r3, [r7, #32]
 8002786:	2200      	movs	r2, #0
 8002788:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800278c:	68f8      	ldr	r0, [r7, #12]
 800278e:	f000 f82b 	bl	80027e8 <I2C_WaitOnFlagUntilTimeout>
 8002792:	4603      	mov	r3, r0
 8002794:	2b00      	cmp	r3, #0
 8002796:	d00d      	beq.n	80027b4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027a6:	d103      	bne.n	80027b0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027ae:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80027b0:	2303      	movs	r3, #3
 80027b2:	e013      	b.n	80027dc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80027b4:	897b      	ldrh	r3, [r7, #10]
 80027b6:	b2db      	uxtb	r3, r3
 80027b8:	f043 0301 	orr.w	r3, r3, #1
 80027bc:	b2da      	uxtb	r2, r3
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80027c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c6:	6a3a      	ldr	r2, [r7, #32]
 80027c8:	4906      	ldr	r1, [pc, #24]	; (80027e4 <I2C_RequestMemoryRead+0x1cc>)
 80027ca:	68f8      	ldr	r0, [r7, #12]
 80027cc:	f000 f863 	bl	8002896 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80027d0:	4603      	mov	r3, r0
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d001      	beq.n	80027da <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80027d6:	2301      	movs	r3, #1
 80027d8:	e000      	b.n	80027dc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80027da:	2300      	movs	r3, #0
}
 80027dc:	4618      	mov	r0, r3
 80027de:	3718      	adds	r7, #24
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bd80      	pop	{r7, pc}
 80027e4:	00010002 	.word	0x00010002

080027e8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b084      	sub	sp, #16
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	60f8      	str	r0, [r7, #12]
 80027f0:	60b9      	str	r1, [r7, #8]
 80027f2:	603b      	str	r3, [r7, #0]
 80027f4:	4613      	mov	r3, r2
 80027f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80027f8:	e025      	b.n	8002846 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002800:	d021      	beq.n	8002846 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002802:	f7fe fb17 	bl	8000e34 <HAL_GetTick>
 8002806:	4602      	mov	r2, r0
 8002808:	69bb      	ldr	r3, [r7, #24]
 800280a:	1ad3      	subs	r3, r2, r3
 800280c:	683a      	ldr	r2, [r7, #0]
 800280e:	429a      	cmp	r2, r3
 8002810:	d302      	bcc.n	8002818 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d116      	bne.n	8002846 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	2200      	movs	r2, #0
 800281c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	2220      	movs	r2, #32
 8002822:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	2200      	movs	r2, #0
 800282a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002832:	f043 0220 	orr.w	r2, r3, #32
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	2200      	movs	r2, #0
 800283e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002842:	2301      	movs	r3, #1
 8002844:	e023      	b.n	800288e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002846:	68bb      	ldr	r3, [r7, #8]
 8002848:	0c1b      	lsrs	r3, r3, #16
 800284a:	b2db      	uxtb	r3, r3
 800284c:	2b01      	cmp	r3, #1
 800284e:	d10d      	bne.n	800286c <I2C_WaitOnFlagUntilTimeout+0x84>
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	695b      	ldr	r3, [r3, #20]
 8002856:	43da      	mvns	r2, r3
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	4013      	ands	r3, r2
 800285c:	b29b      	uxth	r3, r3
 800285e:	2b00      	cmp	r3, #0
 8002860:	bf0c      	ite	eq
 8002862:	2301      	moveq	r3, #1
 8002864:	2300      	movne	r3, #0
 8002866:	b2db      	uxtb	r3, r3
 8002868:	461a      	mov	r2, r3
 800286a:	e00c      	b.n	8002886 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	699b      	ldr	r3, [r3, #24]
 8002872:	43da      	mvns	r2, r3
 8002874:	68bb      	ldr	r3, [r7, #8]
 8002876:	4013      	ands	r3, r2
 8002878:	b29b      	uxth	r3, r3
 800287a:	2b00      	cmp	r3, #0
 800287c:	bf0c      	ite	eq
 800287e:	2301      	moveq	r3, #1
 8002880:	2300      	movne	r3, #0
 8002882:	b2db      	uxtb	r3, r3
 8002884:	461a      	mov	r2, r3
 8002886:	79fb      	ldrb	r3, [r7, #7]
 8002888:	429a      	cmp	r2, r3
 800288a:	d0b6      	beq.n	80027fa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800288c:	2300      	movs	r3, #0
}
 800288e:	4618      	mov	r0, r3
 8002890:	3710      	adds	r7, #16
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}

08002896 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002896:	b580      	push	{r7, lr}
 8002898:	b084      	sub	sp, #16
 800289a:	af00      	add	r7, sp, #0
 800289c:	60f8      	str	r0, [r7, #12]
 800289e:	60b9      	str	r1, [r7, #8]
 80028a0:	607a      	str	r2, [r7, #4]
 80028a2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80028a4:	e051      	b.n	800294a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	695b      	ldr	r3, [r3, #20]
 80028ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028b4:	d123      	bne.n	80028fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	681a      	ldr	r2, [r3, #0]
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028c4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80028ce:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	2200      	movs	r2, #0
 80028d4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	2220      	movs	r2, #32
 80028da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	2200      	movs	r2, #0
 80028e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ea:	f043 0204 	orr.w	r2, r3, #4
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	2200      	movs	r2, #0
 80028f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80028fa:	2301      	movs	r3, #1
 80028fc:	e046      	b.n	800298c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002904:	d021      	beq.n	800294a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002906:	f7fe fa95 	bl	8000e34 <HAL_GetTick>
 800290a:	4602      	mov	r2, r0
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	1ad3      	subs	r3, r2, r3
 8002910:	687a      	ldr	r2, [r7, #4]
 8002912:	429a      	cmp	r2, r3
 8002914:	d302      	bcc.n	800291c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d116      	bne.n	800294a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	2200      	movs	r2, #0
 8002920:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	2220      	movs	r2, #32
 8002926:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	2200      	movs	r2, #0
 800292e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002936:	f043 0220 	orr.w	r2, r3, #32
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	2200      	movs	r2, #0
 8002942:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	e020      	b.n	800298c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800294a:	68bb      	ldr	r3, [r7, #8]
 800294c:	0c1b      	lsrs	r3, r3, #16
 800294e:	b2db      	uxtb	r3, r3
 8002950:	2b01      	cmp	r3, #1
 8002952:	d10c      	bne.n	800296e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	695b      	ldr	r3, [r3, #20]
 800295a:	43da      	mvns	r2, r3
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	4013      	ands	r3, r2
 8002960:	b29b      	uxth	r3, r3
 8002962:	2b00      	cmp	r3, #0
 8002964:	bf14      	ite	ne
 8002966:	2301      	movne	r3, #1
 8002968:	2300      	moveq	r3, #0
 800296a:	b2db      	uxtb	r3, r3
 800296c:	e00b      	b.n	8002986 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	699b      	ldr	r3, [r3, #24]
 8002974:	43da      	mvns	r2, r3
 8002976:	68bb      	ldr	r3, [r7, #8]
 8002978:	4013      	ands	r3, r2
 800297a:	b29b      	uxth	r3, r3
 800297c:	2b00      	cmp	r3, #0
 800297e:	bf14      	ite	ne
 8002980:	2301      	movne	r3, #1
 8002982:	2300      	moveq	r3, #0
 8002984:	b2db      	uxtb	r3, r3
 8002986:	2b00      	cmp	r3, #0
 8002988:	d18d      	bne.n	80028a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800298a:	2300      	movs	r3, #0
}
 800298c:	4618      	mov	r0, r3
 800298e:	3710      	adds	r7, #16
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}

08002994 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b084      	sub	sp, #16
 8002998:	af00      	add	r7, sp, #0
 800299a:	60f8      	str	r0, [r7, #12]
 800299c:	60b9      	str	r1, [r7, #8]
 800299e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80029a0:	e02d      	b.n	80029fe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80029a2:	68f8      	ldr	r0, [r7, #12]
 80029a4:	f000 f8ce 	bl	8002b44 <I2C_IsAcknowledgeFailed>
 80029a8:	4603      	mov	r3, r0
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d001      	beq.n	80029b2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	e02d      	b.n	8002a0e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029b2:	68bb      	ldr	r3, [r7, #8]
 80029b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029b8:	d021      	beq.n	80029fe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029ba:	f7fe fa3b 	bl	8000e34 <HAL_GetTick>
 80029be:	4602      	mov	r2, r0
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	1ad3      	subs	r3, r2, r3
 80029c4:	68ba      	ldr	r2, [r7, #8]
 80029c6:	429a      	cmp	r2, r3
 80029c8:	d302      	bcc.n	80029d0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80029ca:	68bb      	ldr	r3, [r7, #8]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d116      	bne.n	80029fe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	2200      	movs	r2, #0
 80029d4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	2220      	movs	r2, #32
 80029da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	2200      	movs	r2, #0
 80029e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ea:	f043 0220 	orr.w	r2, r3, #32
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	2200      	movs	r2, #0
 80029f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80029fa:	2301      	movs	r3, #1
 80029fc:	e007      	b.n	8002a0e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	695b      	ldr	r3, [r3, #20]
 8002a04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a08:	2b80      	cmp	r3, #128	; 0x80
 8002a0a:	d1ca      	bne.n	80029a2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002a0c:	2300      	movs	r3, #0
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	3710      	adds	r7, #16
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}

08002a16 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a16:	b580      	push	{r7, lr}
 8002a18:	b084      	sub	sp, #16
 8002a1a:	af00      	add	r7, sp, #0
 8002a1c:	60f8      	str	r0, [r7, #12]
 8002a1e:	60b9      	str	r1, [r7, #8]
 8002a20:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002a22:	e02d      	b.n	8002a80 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002a24:	68f8      	ldr	r0, [r7, #12]
 8002a26:	f000 f88d 	bl	8002b44 <I2C_IsAcknowledgeFailed>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d001      	beq.n	8002a34 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002a30:	2301      	movs	r3, #1
 8002a32:	e02d      	b.n	8002a90 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a34:	68bb      	ldr	r3, [r7, #8]
 8002a36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a3a:	d021      	beq.n	8002a80 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a3c:	f7fe f9fa 	bl	8000e34 <HAL_GetTick>
 8002a40:	4602      	mov	r2, r0
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	1ad3      	subs	r3, r2, r3
 8002a46:	68ba      	ldr	r2, [r7, #8]
 8002a48:	429a      	cmp	r2, r3
 8002a4a:	d302      	bcc.n	8002a52 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d116      	bne.n	8002a80 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	2200      	movs	r2, #0
 8002a56:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	2220      	movs	r2, #32
 8002a5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	2200      	movs	r2, #0
 8002a64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a6c:	f043 0220 	orr.w	r2, r3, #32
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	2200      	movs	r2, #0
 8002a78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	e007      	b.n	8002a90 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	695b      	ldr	r3, [r3, #20]
 8002a86:	f003 0304 	and.w	r3, r3, #4
 8002a8a:	2b04      	cmp	r3, #4
 8002a8c:	d1ca      	bne.n	8002a24 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002a8e:	2300      	movs	r3, #0
}
 8002a90:	4618      	mov	r0, r3
 8002a92:	3710      	adds	r7, #16
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bd80      	pop	{r7, pc}

08002a98 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b084      	sub	sp, #16
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	60f8      	str	r0, [r7, #12]
 8002aa0:	60b9      	str	r1, [r7, #8]
 8002aa2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002aa4:	e042      	b.n	8002b2c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	695b      	ldr	r3, [r3, #20]
 8002aac:	f003 0310 	and.w	r3, r3, #16
 8002ab0:	2b10      	cmp	r3, #16
 8002ab2:	d119      	bne.n	8002ae8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f06f 0210 	mvn.w	r2, #16
 8002abc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	2220      	movs	r2, #32
 8002ac8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	2200      	movs	r2, #0
 8002ae0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	e029      	b.n	8002b3c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ae8:	f7fe f9a4 	bl	8000e34 <HAL_GetTick>
 8002aec:	4602      	mov	r2, r0
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	1ad3      	subs	r3, r2, r3
 8002af2:	68ba      	ldr	r2, [r7, #8]
 8002af4:	429a      	cmp	r2, r3
 8002af6:	d302      	bcc.n	8002afe <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002af8:	68bb      	ldr	r3, [r7, #8]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d116      	bne.n	8002b2c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	2200      	movs	r2, #0
 8002b02:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	2220      	movs	r2, #32
 8002b08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	2200      	movs	r2, #0
 8002b10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b18:	f043 0220 	orr.w	r2, r3, #32
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	2200      	movs	r2, #0
 8002b24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	e007      	b.n	8002b3c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	695b      	ldr	r3, [r3, #20]
 8002b32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b36:	2b40      	cmp	r3, #64	; 0x40
 8002b38:	d1b5      	bne.n	8002aa6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002b3a:	2300      	movs	r3, #0
}
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	3710      	adds	r7, #16
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bd80      	pop	{r7, pc}

08002b44 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b083      	sub	sp, #12
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	695b      	ldr	r3, [r3, #20]
 8002b52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b5a:	d11b      	bne.n	8002b94 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002b64:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2220      	movs	r2, #32
 8002b70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2200      	movs	r2, #0
 8002b78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b80:	f043 0204 	orr.w	r2, r3, #4
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002b90:	2301      	movs	r3, #1
 8002b92:	e000      	b.n	8002b96 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002b94:	2300      	movs	r3, #0
}
 8002b96:	4618      	mov	r0, r3
 8002b98:	370c      	adds	r7, #12
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bc80      	pop	{r7}
 8002b9e:	4770      	bx	lr

08002ba0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b086      	sub	sp, #24
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d101      	bne.n	8002bb2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	e26c      	b.n	800308c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f003 0301 	and.w	r3, r3, #1
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	f000 8087 	beq.w	8002cce <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002bc0:	4b92      	ldr	r3, [pc, #584]	; (8002e0c <HAL_RCC_OscConfig+0x26c>)
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	f003 030c 	and.w	r3, r3, #12
 8002bc8:	2b04      	cmp	r3, #4
 8002bca:	d00c      	beq.n	8002be6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002bcc:	4b8f      	ldr	r3, [pc, #572]	; (8002e0c <HAL_RCC_OscConfig+0x26c>)
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	f003 030c 	and.w	r3, r3, #12
 8002bd4:	2b08      	cmp	r3, #8
 8002bd6:	d112      	bne.n	8002bfe <HAL_RCC_OscConfig+0x5e>
 8002bd8:	4b8c      	ldr	r3, [pc, #560]	; (8002e0c <HAL_RCC_OscConfig+0x26c>)
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002be0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002be4:	d10b      	bne.n	8002bfe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002be6:	4b89      	ldr	r3, [pc, #548]	; (8002e0c <HAL_RCC_OscConfig+0x26c>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d06c      	beq.n	8002ccc <HAL_RCC_OscConfig+0x12c>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d168      	bne.n	8002ccc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e246      	b.n	800308c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c06:	d106      	bne.n	8002c16 <HAL_RCC_OscConfig+0x76>
 8002c08:	4b80      	ldr	r3, [pc, #512]	; (8002e0c <HAL_RCC_OscConfig+0x26c>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a7f      	ldr	r2, [pc, #508]	; (8002e0c <HAL_RCC_OscConfig+0x26c>)
 8002c0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c12:	6013      	str	r3, [r2, #0]
 8002c14:	e02e      	b.n	8002c74 <HAL_RCC_OscConfig+0xd4>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d10c      	bne.n	8002c38 <HAL_RCC_OscConfig+0x98>
 8002c1e:	4b7b      	ldr	r3, [pc, #492]	; (8002e0c <HAL_RCC_OscConfig+0x26c>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a7a      	ldr	r2, [pc, #488]	; (8002e0c <HAL_RCC_OscConfig+0x26c>)
 8002c24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c28:	6013      	str	r3, [r2, #0]
 8002c2a:	4b78      	ldr	r3, [pc, #480]	; (8002e0c <HAL_RCC_OscConfig+0x26c>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a77      	ldr	r2, [pc, #476]	; (8002e0c <HAL_RCC_OscConfig+0x26c>)
 8002c30:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c34:	6013      	str	r3, [r2, #0]
 8002c36:	e01d      	b.n	8002c74 <HAL_RCC_OscConfig+0xd4>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c40:	d10c      	bne.n	8002c5c <HAL_RCC_OscConfig+0xbc>
 8002c42:	4b72      	ldr	r3, [pc, #456]	; (8002e0c <HAL_RCC_OscConfig+0x26c>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a71      	ldr	r2, [pc, #452]	; (8002e0c <HAL_RCC_OscConfig+0x26c>)
 8002c48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c4c:	6013      	str	r3, [r2, #0]
 8002c4e:	4b6f      	ldr	r3, [pc, #444]	; (8002e0c <HAL_RCC_OscConfig+0x26c>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a6e      	ldr	r2, [pc, #440]	; (8002e0c <HAL_RCC_OscConfig+0x26c>)
 8002c54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c58:	6013      	str	r3, [r2, #0]
 8002c5a:	e00b      	b.n	8002c74 <HAL_RCC_OscConfig+0xd4>
 8002c5c:	4b6b      	ldr	r3, [pc, #428]	; (8002e0c <HAL_RCC_OscConfig+0x26c>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a6a      	ldr	r2, [pc, #424]	; (8002e0c <HAL_RCC_OscConfig+0x26c>)
 8002c62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c66:	6013      	str	r3, [r2, #0]
 8002c68:	4b68      	ldr	r3, [pc, #416]	; (8002e0c <HAL_RCC_OscConfig+0x26c>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a67      	ldr	r2, [pc, #412]	; (8002e0c <HAL_RCC_OscConfig+0x26c>)
 8002c6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c72:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d013      	beq.n	8002ca4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c7c:	f7fe f8da 	bl	8000e34 <HAL_GetTick>
 8002c80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c82:	e008      	b.n	8002c96 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c84:	f7fe f8d6 	bl	8000e34 <HAL_GetTick>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	1ad3      	subs	r3, r2, r3
 8002c8e:	2b64      	cmp	r3, #100	; 0x64
 8002c90:	d901      	bls.n	8002c96 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002c92:	2303      	movs	r3, #3
 8002c94:	e1fa      	b.n	800308c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c96:	4b5d      	ldr	r3, [pc, #372]	; (8002e0c <HAL_RCC_OscConfig+0x26c>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d0f0      	beq.n	8002c84 <HAL_RCC_OscConfig+0xe4>
 8002ca2:	e014      	b.n	8002cce <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ca4:	f7fe f8c6 	bl	8000e34 <HAL_GetTick>
 8002ca8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002caa:	e008      	b.n	8002cbe <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cac:	f7fe f8c2 	bl	8000e34 <HAL_GetTick>
 8002cb0:	4602      	mov	r2, r0
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	1ad3      	subs	r3, r2, r3
 8002cb6:	2b64      	cmp	r3, #100	; 0x64
 8002cb8:	d901      	bls.n	8002cbe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002cba:	2303      	movs	r3, #3
 8002cbc:	e1e6      	b.n	800308c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cbe:	4b53      	ldr	r3, [pc, #332]	; (8002e0c <HAL_RCC_OscConfig+0x26c>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d1f0      	bne.n	8002cac <HAL_RCC_OscConfig+0x10c>
 8002cca:	e000      	b.n	8002cce <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ccc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f003 0302 	and.w	r3, r3, #2
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d063      	beq.n	8002da2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002cda:	4b4c      	ldr	r3, [pc, #304]	; (8002e0c <HAL_RCC_OscConfig+0x26c>)
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	f003 030c 	and.w	r3, r3, #12
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d00b      	beq.n	8002cfe <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002ce6:	4b49      	ldr	r3, [pc, #292]	; (8002e0c <HAL_RCC_OscConfig+0x26c>)
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	f003 030c 	and.w	r3, r3, #12
 8002cee:	2b08      	cmp	r3, #8
 8002cf0:	d11c      	bne.n	8002d2c <HAL_RCC_OscConfig+0x18c>
 8002cf2:	4b46      	ldr	r3, [pc, #280]	; (8002e0c <HAL_RCC_OscConfig+0x26c>)
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d116      	bne.n	8002d2c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cfe:	4b43      	ldr	r3, [pc, #268]	; (8002e0c <HAL_RCC_OscConfig+0x26c>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f003 0302 	and.w	r3, r3, #2
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d005      	beq.n	8002d16 <HAL_RCC_OscConfig+0x176>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	691b      	ldr	r3, [r3, #16]
 8002d0e:	2b01      	cmp	r3, #1
 8002d10:	d001      	beq.n	8002d16 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	e1ba      	b.n	800308c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d16:	4b3d      	ldr	r3, [pc, #244]	; (8002e0c <HAL_RCC_OscConfig+0x26c>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	695b      	ldr	r3, [r3, #20]
 8002d22:	00db      	lsls	r3, r3, #3
 8002d24:	4939      	ldr	r1, [pc, #228]	; (8002e0c <HAL_RCC_OscConfig+0x26c>)
 8002d26:	4313      	orrs	r3, r2
 8002d28:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d2a:	e03a      	b.n	8002da2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	691b      	ldr	r3, [r3, #16]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d020      	beq.n	8002d76 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d34:	4b36      	ldr	r3, [pc, #216]	; (8002e10 <HAL_RCC_OscConfig+0x270>)
 8002d36:	2201      	movs	r2, #1
 8002d38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d3a:	f7fe f87b 	bl	8000e34 <HAL_GetTick>
 8002d3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d40:	e008      	b.n	8002d54 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d42:	f7fe f877 	bl	8000e34 <HAL_GetTick>
 8002d46:	4602      	mov	r2, r0
 8002d48:	693b      	ldr	r3, [r7, #16]
 8002d4a:	1ad3      	subs	r3, r2, r3
 8002d4c:	2b02      	cmp	r3, #2
 8002d4e:	d901      	bls.n	8002d54 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002d50:	2303      	movs	r3, #3
 8002d52:	e19b      	b.n	800308c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d54:	4b2d      	ldr	r3, [pc, #180]	; (8002e0c <HAL_RCC_OscConfig+0x26c>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f003 0302 	and.w	r3, r3, #2
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d0f0      	beq.n	8002d42 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d60:	4b2a      	ldr	r3, [pc, #168]	; (8002e0c <HAL_RCC_OscConfig+0x26c>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	695b      	ldr	r3, [r3, #20]
 8002d6c:	00db      	lsls	r3, r3, #3
 8002d6e:	4927      	ldr	r1, [pc, #156]	; (8002e0c <HAL_RCC_OscConfig+0x26c>)
 8002d70:	4313      	orrs	r3, r2
 8002d72:	600b      	str	r3, [r1, #0]
 8002d74:	e015      	b.n	8002da2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d76:	4b26      	ldr	r3, [pc, #152]	; (8002e10 <HAL_RCC_OscConfig+0x270>)
 8002d78:	2200      	movs	r2, #0
 8002d7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d7c:	f7fe f85a 	bl	8000e34 <HAL_GetTick>
 8002d80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d82:	e008      	b.n	8002d96 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d84:	f7fe f856 	bl	8000e34 <HAL_GetTick>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	1ad3      	subs	r3, r2, r3
 8002d8e:	2b02      	cmp	r3, #2
 8002d90:	d901      	bls.n	8002d96 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002d92:	2303      	movs	r3, #3
 8002d94:	e17a      	b.n	800308c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d96:	4b1d      	ldr	r3, [pc, #116]	; (8002e0c <HAL_RCC_OscConfig+0x26c>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f003 0302 	and.w	r3, r3, #2
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d1f0      	bne.n	8002d84 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f003 0308 	and.w	r3, r3, #8
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d03a      	beq.n	8002e24 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	699b      	ldr	r3, [r3, #24]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d019      	beq.n	8002dea <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002db6:	4b17      	ldr	r3, [pc, #92]	; (8002e14 <HAL_RCC_OscConfig+0x274>)
 8002db8:	2201      	movs	r2, #1
 8002dba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dbc:	f7fe f83a 	bl	8000e34 <HAL_GetTick>
 8002dc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dc2:	e008      	b.n	8002dd6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002dc4:	f7fe f836 	bl	8000e34 <HAL_GetTick>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	1ad3      	subs	r3, r2, r3
 8002dce:	2b02      	cmp	r3, #2
 8002dd0:	d901      	bls.n	8002dd6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002dd2:	2303      	movs	r3, #3
 8002dd4:	e15a      	b.n	800308c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dd6:	4b0d      	ldr	r3, [pc, #52]	; (8002e0c <HAL_RCC_OscConfig+0x26c>)
 8002dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dda:	f003 0302 	and.w	r3, r3, #2
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d0f0      	beq.n	8002dc4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002de2:	2001      	movs	r0, #1
 8002de4:	f000 fada 	bl	800339c <RCC_Delay>
 8002de8:	e01c      	b.n	8002e24 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002dea:	4b0a      	ldr	r3, [pc, #40]	; (8002e14 <HAL_RCC_OscConfig+0x274>)
 8002dec:	2200      	movs	r2, #0
 8002dee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002df0:	f7fe f820 	bl	8000e34 <HAL_GetTick>
 8002df4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002df6:	e00f      	b.n	8002e18 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002df8:	f7fe f81c 	bl	8000e34 <HAL_GetTick>
 8002dfc:	4602      	mov	r2, r0
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	1ad3      	subs	r3, r2, r3
 8002e02:	2b02      	cmp	r3, #2
 8002e04:	d908      	bls.n	8002e18 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002e06:	2303      	movs	r3, #3
 8002e08:	e140      	b.n	800308c <HAL_RCC_OscConfig+0x4ec>
 8002e0a:	bf00      	nop
 8002e0c:	40021000 	.word	0x40021000
 8002e10:	42420000 	.word	0x42420000
 8002e14:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e18:	4b9e      	ldr	r3, [pc, #632]	; (8003094 <HAL_RCC_OscConfig+0x4f4>)
 8002e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e1c:	f003 0302 	and.w	r3, r3, #2
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d1e9      	bne.n	8002df8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f003 0304 	and.w	r3, r3, #4
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	f000 80a6 	beq.w	8002f7e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e32:	2300      	movs	r3, #0
 8002e34:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e36:	4b97      	ldr	r3, [pc, #604]	; (8003094 <HAL_RCC_OscConfig+0x4f4>)
 8002e38:	69db      	ldr	r3, [r3, #28]
 8002e3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d10d      	bne.n	8002e5e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e42:	4b94      	ldr	r3, [pc, #592]	; (8003094 <HAL_RCC_OscConfig+0x4f4>)
 8002e44:	69db      	ldr	r3, [r3, #28]
 8002e46:	4a93      	ldr	r2, [pc, #588]	; (8003094 <HAL_RCC_OscConfig+0x4f4>)
 8002e48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e4c:	61d3      	str	r3, [r2, #28]
 8002e4e:	4b91      	ldr	r3, [pc, #580]	; (8003094 <HAL_RCC_OscConfig+0x4f4>)
 8002e50:	69db      	ldr	r3, [r3, #28]
 8002e52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e56:	60bb      	str	r3, [r7, #8]
 8002e58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e5e:	4b8e      	ldr	r3, [pc, #568]	; (8003098 <HAL_RCC_OscConfig+0x4f8>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d118      	bne.n	8002e9c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e6a:	4b8b      	ldr	r3, [pc, #556]	; (8003098 <HAL_RCC_OscConfig+0x4f8>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a8a      	ldr	r2, [pc, #552]	; (8003098 <HAL_RCC_OscConfig+0x4f8>)
 8002e70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e76:	f7fd ffdd 	bl	8000e34 <HAL_GetTick>
 8002e7a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e7c:	e008      	b.n	8002e90 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e7e:	f7fd ffd9 	bl	8000e34 <HAL_GetTick>
 8002e82:	4602      	mov	r2, r0
 8002e84:	693b      	ldr	r3, [r7, #16]
 8002e86:	1ad3      	subs	r3, r2, r3
 8002e88:	2b64      	cmp	r3, #100	; 0x64
 8002e8a:	d901      	bls.n	8002e90 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002e8c:	2303      	movs	r3, #3
 8002e8e:	e0fd      	b.n	800308c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e90:	4b81      	ldr	r3, [pc, #516]	; (8003098 <HAL_RCC_OscConfig+0x4f8>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d0f0      	beq.n	8002e7e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	68db      	ldr	r3, [r3, #12]
 8002ea0:	2b01      	cmp	r3, #1
 8002ea2:	d106      	bne.n	8002eb2 <HAL_RCC_OscConfig+0x312>
 8002ea4:	4b7b      	ldr	r3, [pc, #492]	; (8003094 <HAL_RCC_OscConfig+0x4f4>)
 8002ea6:	6a1b      	ldr	r3, [r3, #32]
 8002ea8:	4a7a      	ldr	r2, [pc, #488]	; (8003094 <HAL_RCC_OscConfig+0x4f4>)
 8002eaa:	f043 0301 	orr.w	r3, r3, #1
 8002eae:	6213      	str	r3, [r2, #32]
 8002eb0:	e02d      	b.n	8002f0e <HAL_RCC_OscConfig+0x36e>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	68db      	ldr	r3, [r3, #12]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d10c      	bne.n	8002ed4 <HAL_RCC_OscConfig+0x334>
 8002eba:	4b76      	ldr	r3, [pc, #472]	; (8003094 <HAL_RCC_OscConfig+0x4f4>)
 8002ebc:	6a1b      	ldr	r3, [r3, #32]
 8002ebe:	4a75      	ldr	r2, [pc, #468]	; (8003094 <HAL_RCC_OscConfig+0x4f4>)
 8002ec0:	f023 0301 	bic.w	r3, r3, #1
 8002ec4:	6213      	str	r3, [r2, #32]
 8002ec6:	4b73      	ldr	r3, [pc, #460]	; (8003094 <HAL_RCC_OscConfig+0x4f4>)
 8002ec8:	6a1b      	ldr	r3, [r3, #32]
 8002eca:	4a72      	ldr	r2, [pc, #456]	; (8003094 <HAL_RCC_OscConfig+0x4f4>)
 8002ecc:	f023 0304 	bic.w	r3, r3, #4
 8002ed0:	6213      	str	r3, [r2, #32]
 8002ed2:	e01c      	b.n	8002f0e <HAL_RCC_OscConfig+0x36e>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	68db      	ldr	r3, [r3, #12]
 8002ed8:	2b05      	cmp	r3, #5
 8002eda:	d10c      	bne.n	8002ef6 <HAL_RCC_OscConfig+0x356>
 8002edc:	4b6d      	ldr	r3, [pc, #436]	; (8003094 <HAL_RCC_OscConfig+0x4f4>)
 8002ede:	6a1b      	ldr	r3, [r3, #32]
 8002ee0:	4a6c      	ldr	r2, [pc, #432]	; (8003094 <HAL_RCC_OscConfig+0x4f4>)
 8002ee2:	f043 0304 	orr.w	r3, r3, #4
 8002ee6:	6213      	str	r3, [r2, #32]
 8002ee8:	4b6a      	ldr	r3, [pc, #424]	; (8003094 <HAL_RCC_OscConfig+0x4f4>)
 8002eea:	6a1b      	ldr	r3, [r3, #32]
 8002eec:	4a69      	ldr	r2, [pc, #420]	; (8003094 <HAL_RCC_OscConfig+0x4f4>)
 8002eee:	f043 0301 	orr.w	r3, r3, #1
 8002ef2:	6213      	str	r3, [r2, #32]
 8002ef4:	e00b      	b.n	8002f0e <HAL_RCC_OscConfig+0x36e>
 8002ef6:	4b67      	ldr	r3, [pc, #412]	; (8003094 <HAL_RCC_OscConfig+0x4f4>)
 8002ef8:	6a1b      	ldr	r3, [r3, #32]
 8002efa:	4a66      	ldr	r2, [pc, #408]	; (8003094 <HAL_RCC_OscConfig+0x4f4>)
 8002efc:	f023 0301 	bic.w	r3, r3, #1
 8002f00:	6213      	str	r3, [r2, #32]
 8002f02:	4b64      	ldr	r3, [pc, #400]	; (8003094 <HAL_RCC_OscConfig+0x4f4>)
 8002f04:	6a1b      	ldr	r3, [r3, #32]
 8002f06:	4a63      	ldr	r2, [pc, #396]	; (8003094 <HAL_RCC_OscConfig+0x4f4>)
 8002f08:	f023 0304 	bic.w	r3, r3, #4
 8002f0c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	68db      	ldr	r3, [r3, #12]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d015      	beq.n	8002f42 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f16:	f7fd ff8d 	bl	8000e34 <HAL_GetTick>
 8002f1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f1c:	e00a      	b.n	8002f34 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f1e:	f7fd ff89 	bl	8000e34 <HAL_GetTick>
 8002f22:	4602      	mov	r2, r0
 8002f24:	693b      	ldr	r3, [r7, #16]
 8002f26:	1ad3      	subs	r3, r2, r3
 8002f28:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d901      	bls.n	8002f34 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002f30:	2303      	movs	r3, #3
 8002f32:	e0ab      	b.n	800308c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f34:	4b57      	ldr	r3, [pc, #348]	; (8003094 <HAL_RCC_OscConfig+0x4f4>)
 8002f36:	6a1b      	ldr	r3, [r3, #32]
 8002f38:	f003 0302 	and.w	r3, r3, #2
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d0ee      	beq.n	8002f1e <HAL_RCC_OscConfig+0x37e>
 8002f40:	e014      	b.n	8002f6c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f42:	f7fd ff77 	bl	8000e34 <HAL_GetTick>
 8002f46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f48:	e00a      	b.n	8002f60 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f4a:	f7fd ff73 	bl	8000e34 <HAL_GetTick>
 8002f4e:	4602      	mov	r2, r0
 8002f50:	693b      	ldr	r3, [r7, #16]
 8002f52:	1ad3      	subs	r3, r2, r3
 8002f54:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d901      	bls.n	8002f60 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002f5c:	2303      	movs	r3, #3
 8002f5e:	e095      	b.n	800308c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f60:	4b4c      	ldr	r3, [pc, #304]	; (8003094 <HAL_RCC_OscConfig+0x4f4>)
 8002f62:	6a1b      	ldr	r3, [r3, #32]
 8002f64:	f003 0302 	and.w	r3, r3, #2
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d1ee      	bne.n	8002f4a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002f6c:	7dfb      	ldrb	r3, [r7, #23]
 8002f6e:	2b01      	cmp	r3, #1
 8002f70:	d105      	bne.n	8002f7e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f72:	4b48      	ldr	r3, [pc, #288]	; (8003094 <HAL_RCC_OscConfig+0x4f4>)
 8002f74:	69db      	ldr	r3, [r3, #28]
 8002f76:	4a47      	ldr	r2, [pc, #284]	; (8003094 <HAL_RCC_OscConfig+0x4f4>)
 8002f78:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f7c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	69db      	ldr	r3, [r3, #28]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	f000 8081 	beq.w	800308a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f88:	4b42      	ldr	r3, [pc, #264]	; (8003094 <HAL_RCC_OscConfig+0x4f4>)
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	f003 030c 	and.w	r3, r3, #12
 8002f90:	2b08      	cmp	r3, #8
 8002f92:	d061      	beq.n	8003058 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	69db      	ldr	r3, [r3, #28]
 8002f98:	2b02      	cmp	r3, #2
 8002f9a:	d146      	bne.n	800302a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f9c:	4b3f      	ldr	r3, [pc, #252]	; (800309c <HAL_RCC_OscConfig+0x4fc>)
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fa2:	f7fd ff47 	bl	8000e34 <HAL_GetTick>
 8002fa6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fa8:	e008      	b.n	8002fbc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002faa:	f7fd ff43 	bl	8000e34 <HAL_GetTick>
 8002fae:	4602      	mov	r2, r0
 8002fb0:	693b      	ldr	r3, [r7, #16]
 8002fb2:	1ad3      	subs	r3, r2, r3
 8002fb4:	2b02      	cmp	r3, #2
 8002fb6:	d901      	bls.n	8002fbc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002fb8:	2303      	movs	r3, #3
 8002fba:	e067      	b.n	800308c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fbc:	4b35      	ldr	r3, [pc, #212]	; (8003094 <HAL_RCC_OscConfig+0x4f4>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d1f0      	bne.n	8002faa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6a1b      	ldr	r3, [r3, #32]
 8002fcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fd0:	d108      	bne.n	8002fe4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002fd2:	4b30      	ldr	r3, [pc, #192]	; (8003094 <HAL_RCC_OscConfig+0x4f4>)
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	689b      	ldr	r3, [r3, #8]
 8002fde:	492d      	ldr	r1, [pc, #180]	; (8003094 <HAL_RCC_OscConfig+0x4f4>)
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002fe4:	4b2b      	ldr	r3, [pc, #172]	; (8003094 <HAL_RCC_OscConfig+0x4f4>)
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6a19      	ldr	r1, [r3, #32]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff4:	430b      	orrs	r3, r1
 8002ff6:	4927      	ldr	r1, [pc, #156]	; (8003094 <HAL_RCC_OscConfig+0x4f4>)
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ffc:	4b27      	ldr	r3, [pc, #156]	; (800309c <HAL_RCC_OscConfig+0x4fc>)
 8002ffe:	2201      	movs	r2, #1
 8003000:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003002:	f7fd ff17 	bl	8000e34 <HAL_GetTick>
 8003006:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003008:	e008      	b.n	800301c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800300a:	f7fd ff13 	bl	8000e34 <HAL_GetTick>
 800300e:	4602      	mov	r2, r0
 8003010:	693b      	ldr	r3, [r7, #16]
 8003012:	1ad3      	subs	r3, r2, r3
 8003014:	2b02      	cmp	r3, #2
 8003016:	d901      	bls.n	800301c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003018:	2303      	movs	r3, #3
 800301a:	e037      	b.n	800308c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800301c:	4b1d      	ldr	r3, [pc, #116]	; (8003094 <HAL_RCC_OscConfig+0x4f4>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003024:	2b00      	cmp	r3, #0
 8003026:	d0f0      	beq.n	800300a <HAL_RCC_OscConfig+0x46a>
 8003028:	e02f      	b.n	800308a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800302a:	4b1c      	ldr	r3, [pc, #112]	; (800309c <HAL_RCC_OscConfig+0x4fc>)
 800302c:	2200      	movs	r2, #0
 800302e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003030:	f7fd ff00 	bl	8000e34 <HAL_GetTick>
 8003034:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003036:	e008      	b.n	800304a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003038:	f7fd fefc 	bl	8000e34 <HAL_GetTick>
 800303c:	4602      	mov	r2, r0
 800303e:	693b      	ldr	r3, [r7, #16]
 8003040:	1ad3      	subs	r3, r2, r3
 8003042:	2b02      	cmp	r3, #2
 8003044:	d901      	bls.n	800304a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003046:	2303      	movs	r3, #3
 8003048:	e020      	b.n	800308c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800304a:	4b12      	ldr	r3, [pc, #72]	; (8003094 <HAL_RCC_OscConfig+0x4f4>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003052:	2b00      	cmp	r3, #0
 8003054:	d1f0      	bne.n	8003038 <HAL_RCC_OscConfig+0x498>
 8003056:	e018      	b.n	800308a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	69db      	ldr	r3, [r3, #28]
 800305c:	2b01      	cmp	r3, #1
 800305e:	d101      	bne.n	8003064 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003060:	2301      	movs	r3, #1
 8003062:	e013      	b.n	800308c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003064:	4b0b      	ldr	r3, [pc, #44]	; (8003094 <HAL_RCC_OscConfig+0x4f4>)
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6a1b      	ldr	r3, [r3, #32]
 8003074:	429a      	cmp	r2, r3
 8003076:	d106      	bne.n	8003086 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003082:	429a      	cmp	r2, r3
 8003084:	d001      	beq.n	800308a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	e000      	b.n	800308c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800308a:	2300      	movs	r3, #0
}
 800308c:	4618      	mov	r0, r3
 800308e:	3718      	adds	r7, #24
 8003090:	46bd      	mov	sp, r7
 8003092:	bd80      	pop	{r7, pc}
 8003094:	40021000 	.word	0x40021000
 8003098:	40007000 	.word	0x40007000
 800309c:	42420060 	.word	0x42420060

080030a0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b084      	sub	sp, #16
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
 80030a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d101      	bne.n	80030b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030b0:	2301      	movs	r3, #1
 80030b2:	e0d0      	b.n	8003256 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80030b4:	4b6a      	ldr	r3, [pc, #424]	; (8003260 <HAL_RCC_ClockConfig+0x1c0>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f003 0307 	and.w	r3, r3, #7
 80030bc:	683a      	ldr	r2, [r7, #0]
 80030be:	429a      	cmp	r2, r3
 80030c0:	d910      	bls.n	80030e4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030c2:	4b67      	ldr	r3, [pc, #412]	; (8003260 <HAL_RCC_ClockConfig+0x1c0>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f023 0207 	bic.w	r2, r3, #7
 80030ca:	4965      	ldr	r1, [pc, #404]	; (8003260 <HAL_RCC_ClockConfig+0x1c0>)
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	4313      	orrs	r3, r2
 80030d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030d2:	4b63      	ldr	r3, [pc, #396]	; (8003260 <HAL_RCC_ClockConfig+0x1c0>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f003 0307 	and.w	r3, r3, #7
 80030da:	683a      	ldr	r2, [r7, #0]
 80030dc:	429a      	cmp	r2, r3
 80030de:	d001      	beq.n	80030e4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80030e0:	2301      	movs	r3, #1
 80030e2:	e0b8      	b.n	8003256 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f003 0302 	and.w	r3, r3, #2
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d020      	beq.n	8003132 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f003 0304 	and.w	r3, r3, #4
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d005      	beq.n	8003108 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80030fc:	4b59      	ldr	r3, [pc, #356]	; (8003264 <HAL_RCC_ClockConfig+0x1c4>)
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	4a58      	ldr	r2, [pc, #352]	; (8003264 <HAL_RCC_ClockConfig+0x1c4>)
 8003102:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003106:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f003 0308 	and.w	r3, r3, #8
 8003110:	2b00      	cmp	r3, #0
 8003112:	d005      	beq.n	8003120 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003114:	4b53      	ldr	r3, [pc, #332]	; (8003264 <HAL_RCC_ClockConfig+0x1c4>)
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	4a52      	ldr	r2, [pc, #328]	; (8003264 <HAL_RCC_ClockConfig+0x1c4>)
 800311a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800311e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003120:	4b50      	ldr	r3, [pc, #320]	; (8003264 <HAL_RCC_ClockConfig+0x1c4>)
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	689b      	ldr	r3, [r3, #8]
 800312c:	494d      	ldr	r1, [pc, #308]	; (8003264 <HAL_RCC_ClockConfig+0x1c4>)
 800312e:	4313      	orrs	r3, r2
 8003130:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f003 0301 	and.w	r3, r3, #1
 800313a:	2b00      	cmp	r3, #0
 800313c:	d040      	beq.n	80031c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	2b01      	cmp	r3, #1
 8003144:	d107      	bne.n	8003156 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003146:	4b47      	ldr	r3, [pc, #284]	; (8003264 <HAL_RCC_ClockConfig+0x1c4>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800314e:	2b00      	cmp	r3, #0
 8003150:	d115      	bne.n	800317e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	e07f      	b.n	8003256 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	2b02      	cmp	r3, #2
 800315c:	d107      	bne.n	800316e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800315e:	4b41      	ldr	r3, [pc, #260]	; (8003264 <HAL_RCC_ClockConfig+0x1c4>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003166:	2b00      	cmp	r3, #0
 8003168:	d109      	bne.n	800317e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	e073      	b.n	8003256 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800316e:	4b3d      	ldr	r3, [pc, #244]	; (8003264 <HAL_RCC_ClockConfig+0x1c4>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f003 0302 	and.w	r3, r3, #2
 8003176:	2b00      	cmp	r3, #0
 8003178:	d101      	bne.n	800317e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	e06b      	b.n	8003256 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800317e:	4b39      	ldr	r3, [pc, #228]	; (8003264 <HAL_RCC_ClockConfig+0x1c4>)
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	f023 0203 	bic.w	r2, r3, #3
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	4936      	ldr	r1, [pc, #216]	; (8003264 <HAL_RCC_ClockConfig+0x1c4>)
 800318c:	4313      	orrs	r3, r2
 800318e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003190:	f7fd fe50 	bl	8000e34 <HAL_GetTick>
 8003194:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003196:	e00a      	b.n	80031ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003198:	f7fd fe4c 	bl	8000e34 <HAL_GetTick>
 800319c:	4602      	mov	r2, r0
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	1ad3      	subs	r3, r2, r3
 80031a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d901      	bls.n	80031ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80031aa:	2303      	movs	r3, #3
 80031ac:	e053      	b.n	8003256 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031ae:	4b2d      	ldr	r3, [pc, #180]	; (8003264 <HAL_RCC_ClockConfig+0x1c4>)
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	f003 020c 	and.w	r2, r3, #12
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	009b      	lsls	r3, r3, #2
 80031bc:	429a      	cmp	r2, r3
 80031be:	d1eb      	bne.n	8003198 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80031c0:	4b27      	ldr	r3, [pc, #156]	; (8003260 <HAL_RCC_ClockConfig+0x1c0>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f003 0307 	and.w	r3, r3, #7
 80031c8:	683a      	ldr	r2, [r7, #0]
 80031ca:	429a      	cmp	r2, r3
 80031cc:	d210      	bcs.n	80031f0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031ce:	4b24      	ldr	r3, [pc, #144]	; (8003260 <HAL_RCC_ClockConfig+0x1c0>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f023 0207 	bic.w	r2, r3, #7
 80031d6:	4922      	ldr	r1, [pc, #136]	; (8003260 <HAL_RCC_ClockConfig+0x1c0>)
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	4313      	orrs	r3, r2
 80031dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031de:	4b20      	ldr	r3, [pc, #128]	; (8003260 <HAL_RCC_ClockConfig+0x1c0>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f003 0307 	and.w	r3, r3, #7
 80031e6:	683a      	ldr	r2, [r7, #0]
 80031e8:	429a      	cmp	r2, r3
 80031ea:	d001      	beq.n	80031f0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80031ec:	2301      	movs	r3, #1
 80031ee:	e032      	b.n	8003256 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f003 0304 	and.w	r3, r3, #4
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d008      	beq.n	800320e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031fc:	4b19      	ldr	r3, [pc, #100]	; (8003264 <HAL_RCC_ClockConfig+0x1c4>)
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	68db      	ldr	r3, [r3, #12]
 8003208:	4916      	ldr	r1, [pc, #88]	; (8003264 <HAL_RCC_ClockConfig+0x1c4>)
 800320a:	4313      	orrs	r3, r2
 800320c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f003 0308 	and.w	r3, r3, #8
 8003216:	2b00      	cmp	r3, #0
 8003218:	d009      	beq.n	800322e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800321a:	4b12      	ldr	r3, [pc, #72]	; (8003264 <HAL_RCC_ClockConfig+0x1c4>)
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	691b      	ldr	r3, [r3, #16]
 8003226:	00db      	lsls	r3, r3, #3
 8003228:	490e      	ldr	r1, [pc, #56]	; (8003264 <HAL_RCC_ClockConfig+0x1c4>)
 800322a:	4313      	orrs	r3, r2
 800322c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800322e:	f000 f821 	bl	8003274 <HAL_RCC_GetSysClockFreq>
 8003232:	4601      	mov	r1, r0
 8003234:	4b0b      	ldr	r3, [pc, #44]	; (8003264 <HAL_RCC_ClockConfig+0x1c4>)
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	091b      	lsrs	r3, r3, #4
 800323a:	f003 030f 	and.w	r3, r3, #15
 800323e:	4a0a      	ldr	r2, [pc, #40]	; (8003268 <HAL_RCC_ClockConfig+0x1c8>)
 8003240:	5cd3      	ldrb	r3, [r2, r3]
 8003242:	fa21 f303 	lsr.w	r3, r1, r3
 8003246:	4a09      	ldr	r2, [pc, #36]	; (800326c <HAL_RCC_ClockConfig+0x1cc>)
 8003248:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800324a:	4b09      	ldr	r3, [pc, #36]	; (8003270 <HAL_RCC_ClockConfig+0x1d0>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4618      	mov	r0, r3
 8003250:	f7fd fdae 	bl	8000db0 <HAL_InitTick>

  return HAL_OK;
 8003254:	2300      	movs	r3, #0
}
 8003256:	4618      	mov	r0, r3
 8003258:	3710      	adds	r7, #16
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}
 800325e:	bf00      	nop
 8003260:	40022000 	.word	0x40022000
 8003264:	40021000 	.word	0x40021000
 8003268:	080040cc 	.word	0x080040cc
 800326c:	20000000 	.word	0x20000000
 8003270:	20000004 	.word	0x20000004

08003274 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003274:	b490      	push	{r4, r7}
 8003276:	b08a      	sub	sp, #40	; 0x28
 8003278:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800327a:	4b2a      	ldr	r3, [pc, #168]	; (8003324 <HAL_RCC_GetSysClockFreq+0xb0>)
 800327c:	1d3c      	adds	r4, r7, #4
 800327e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003280:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003284:	4b28      	ldr	r3, [pc, #160]	; (8003328 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003286:	881b      	ldrh	r3, [r3, #0]
 8003288:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800328a:	2300      	movs	r3, #0
 800328c:	61fb      	str	r3, [r7, #28]
 800328e:	2300      	movs	r3, #0
 8003290:	61bb      	str	r3, [r7, #24]
 8003292:	2300      	movs	r3, #0
 8003294:	627b      	str	r3, [r7, #36]	; 0x24
 8003296:	2300      	movs	r3, #0
 8003298:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800329a:	2300      	movs	r3, #0
 800329c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800329e:	4b23      	ldr	r3, [pc, #140]	; (800332c <HAL_RCC_GetSysClockFreq+0xb8>)
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80032a4:	69fb      	ldr	r3, [r7, #28]
 80032a6:	f003 030c 	and.w	r3, r3, #12
 80032aa:	2b04      	cmp	r3, #4
 80032ac:	d002      	beq.n	80032b4 <HAL_RCC_GetSysClockFreq+0x40>
 80032ae:	2b08      	cmp	r3, #8
 80032b0:	d003      	beq.n	80032ba <HAL_RCC_GetSysClockFreq+0x46>
 80032b2:	e02d      	b.n	8003310 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80032b4:	4b1e      	ldr	r3, [pc, #120]	; (8003330 <HAL_RCC_GetSysClockFreq+0xbc>)
 80032b6:	623b      	str	r3, [r7, #32]
      break;
 80032b8:	e02d      	b.n	8003316 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80032ba:	69fb      	ldr	r3, [r7, #28]
 80032bc:	0c9b      	lsrs	r3, r3, #18
 80032be:	f003 030f 	and.w	r3, r3, #15
 80032c2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80032c6:	4413      	add	r3, r2
 80032c8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80032cc:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80032ce:	69fb      	ldr	r3, [r7, #28]
 80032d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d013      	beq.n	8003300 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80032d8:	4b14      	ldr	r3, [pc, #80]	; (800332c <HAL_RCC_GetSysClockFreq+0xb8>)
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	0c5b      	lsrs	r3, r3, #17
 80032de:	f003 0301 	and.w	r3, r3, #1
 80032e2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80032e6:	4413      	add	r3, r2
 80032e8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80032ec:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80032ee:	697b      	ldr	r3, [r7, #20]
 80032f0:	4a0f      	ldr	r2, [pc, #60]	; (8003330 <HAL_RCC_GetSysClockFreq+0xbc>)
 80032f2:	fb02 f203 	mul.w	r2, r2, r3
 80032f6:	69bb      	ldr	r3, [r7, #24]
 80032f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80032fc:	627b      	str	r3, [r7, #36]	; 0x24
 80032fe:	e004      	b.n	800330a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003300:	697b      	ldr	r3, [r7, #20]
 8003302:	4a0c      	ldr	r2, [pc, #48]	; (8003334 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003304:	fb02 f303 	mul.w	r3, r2, r3
 8003308:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800330a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800330c:	623b      	str	r3, [r7, #32]
      break;
 800330e:	e002      	b.n	8003316 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003310:	4b07      	ldr	r3, [pc, #28]	; (8003330 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003312:	623b      	str	r3, [r7, #32]
      break;
 8003314:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003316:	6a3b      	ldr	r3, [r7, #32]
}
 8003318:	4618      	mov	r0, r3
 800331a:	3728      	adds	r7, #40	; 0x28
 800331c:	46bd      	mov	sp, r7
 800331e:	bc90      	pop	{r4, r7}
 8003320:	4770      	bx	lr
 8003322:	bf00      	nop
 8003324:	080040b8 	.word	0x080040b8
 8003328:	080040c8 	.word	0x080040c8
 800332c:	40021000 	.word	0x40021000
 8003330:	007a1200 	.word	0x007a1200
 8003334:	003d0900 	.word	0x003d0900

08003338 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003338:	b480      	push	{r7}
 800333a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800333c:	4b02      	ldr	r3, [pc, #8]	; (8003348 <HAL_RCC_GetHCLKFreq+0x10>)
 800333e:	681b      	ldr	r3, [r3, #0]
}
 8003340:	4618      	mov	r0, r3
 8003342:	46bd      	mov	sp, r7
 8003344:	bc80      	pop	{r7}
 8003346:	4770      	bx	lr
 8003348:	20000000 	.word	0x20000000

0800334c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003350:	f7ff fff2 	bl	8003338 <HAL_RCC_GetHCLKFreq>
 8003354:	4601      	mov	r1, r0
 8003356:	4b05      	ldr	r3, [pc, #20]	; (800336c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	0a1b      	lsrs	r3, r3, #8
 800335c:	f003 0307 	and.w	r3, r3, #7
 8003360:	4a03      	ldr	r2, [pc, #12]	; (8003370 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003362:	5cd3      	ldrb	r3, [r2, r3]
 8003364:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003368:	4618      	mov	r0, r3
 800336a:	bd80      	pop	{r7, pc}
 800336c:	40021000 	.word	0x40021000
 8003370:	080040dc 	.word	0x080040dc

08003374 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003378:	f7ff ffde 	bl	8003338 <HAL_RCC_GetHCLKFreq>
 800337c:	4601      	mov	r1, r0
 800337e:	4b05      	ldr	r3, [pc, #20]	; (8003394 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	0adb      	lsrs	r3, r3, #11
 8003384:	f003 0307 	and.w	r3, r3, #7
 8003388:	4a03      	ldr	r2, [pc, #12]	; (8003398 <HAL_RCC_GetPCLK2Freq+0x24>)
 800338a:	5cd3      	ldrb	r3, [r2, r3]
 800338c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003390:	4618      	mov	r0, r3
 8003392:	bd80      	pop	{r7, pc}
 8003394:	40021000 	.word	0x40021000
 8003398:	080040dc 	.word	0x080040dc

0800339c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800339c:	b480      	push	{r7}
 800339e:	b085      	sub	sp, #20
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80033a4:	4b0a      	ldr	r3, [pc, #40]	; (80033d0 <RCC_Delay+0x34>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a0a      	ldr	r2, [pc, #40]	; (80033d4 <RCC_Delay+0x38>)
 80033aa:	fba2 2303 	umull	r2, r3, r2, r3
 80033ae:	0a5b      	lsrs	r3, r3, #9
 80033b0:	687a      	ldr	r2, [r7, #4]
 80033b2:	fb02 f303 	mul.w	r3, r2, r3
 80033b6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80033b8:	bf00      	nop
  }
  while (Delay --);
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	1e5a      	subs	r2, r3, #1
 80033be:	60fa      	str	r2, [r7, #12]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d1f9      	bne.n	80033b8 <RCC_Delay+0x1c>
}
 80033c4:	bf00      	nop
 80033c6:	3714      	adds	r7, #20
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bc80      	pop	{r7}
 80033cc:	4770      	bx	lr
 80033ce:	bf00      	nop
 80033d0:	20000000 	.word	0x20000000
 80033d4:	10624dd3 	.word	0x10624dd3

080033d8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b082      	sub	sp, #8
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d101      	bne.n	80033ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80033e6:	2301      	movs	r3, #1
 80033e8:	e03f      	b.n	800346a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80033f0:	b2db      	uxtb	r3, r3
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d106      	bne.n	8003404 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2200      	movs	r2, #0
 80033fa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80033fe:	6878      	ldr	r0, [r7, #4]
 8003400:	f7fd fc4e 	bl	8000ca0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2224      	movs	r2, #36	; 0x24
 8003408:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	68da      	ldr	r2, [r3, #12]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800341a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800341c:	6878      	ldr	r0, [r7, #4]
 800341e:	f000 f905 	bl	800362c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	691a      	ldr	r2, [r3, #16]
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003430:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	695a      	ldr	r2, [r3, #20]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003440:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	68da      	ldr	r2, [r3, #12]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003450:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2200      	movs	r2, #0
 8003456:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2220      	movs	r2, #32
 800345c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2220      	movs	r2, #32
 8003464:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003468:	2300      	movs	r3, #0
}
 800346a:	4618      	mov	r0, r3
 800346c:	3708      	adds	r7, #8
 800346e:	46bd      	mov	sp, r7
 8003470:	bd80      	pop	{r7, pc}

08003472 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003472:	b580      	push	{r7, lr}
 8003474:	b08a      	sub	sp, #40	; 0x28
 8003476:	af02      	add	r7, sp, #8
 8003478:	60f8      	str	r0, [r7, #12]
 800347a:	60b9      	str	r1, [r7, #8]
 800347c:	603b      	str	r3, [r7, #0]
 800347e:	4613      	mov	r3, r2
 8003480:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003482:	2300      	movs	r3, #0
 8003484:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800348c:	b2db      	uxtb	r3, r3
 800348e:	2b20      	cmp	r3, #32
 8003490:	d17c      	bne.n	800358c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003492:	68bb      	ldr	r3, [r7, #8]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d002      	beq.n	800349e <HAL_UART_Transmit+0x2c>
 8003498:	88fb      	ldrh	r3, [r7, #6]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d101      	bne.n	80034a2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800349e:	2301      	movs	r3, #1
 80034a0:	e075      	b.n	800358e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80034a8:	2b01      	cmp	r3, #1
 80034aa:	d101      	bne.n	80034b0 <HAL_UART_Transmit+0x3e>
 80034ac:	2302      	movs	r3, #2
 80034ae:	e06e      	b.n	800358e <HAL_UART_Transmit+0x11c>
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	2201      	movs	r2, #1
 80034b4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	2200      	movs	r2, #0
 80034bc:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	2221      	movs	r2, #33	; 0x21
 80034c2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80034c6:	f7fd fcb5 	bl	8000e34 <HAL_GetTick>
 80034ca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	88fa      	ldrh	r2, [r7, #6]
 80034d0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	88fa      	ldrh	r2, [r7, #6]
 80034d6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	689b      	ldr	r3, [r3, #8]
 80034dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034e0:	d108      	bne.n	80034f4 <HAL_UART_Transmit+0x82>
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	691b      	ldr	r3, [r3, #16]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d104      	bne.n	80034f4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80034ea:	2300      	movs	r3, #0
 80034ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80034ee:	68bb      	ldr	r3, [r7, #8]
 80034f0:	61bb      	str	r3, [r7, #24]
 80034f2:	e003      	b.n	80034fc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80034f8:	2300      	movs	r3, #0
 80034fa:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	2200      	movs	r2, #0
 8003500:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8003504:	e02a      	b.n	800355c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	9300      	str	r3, [sp, #0]
 800350a:	697b      	ldr	r3, [r7, #20]
 800350c:	2200      	movs	r2, #0
 800350e:	2180      	movs	r1, #128	; 0x80
 8003510:	68f8      	ldr	r0, [r7, #12]
 8003512:	f000 f840 	bl	8003596 <UART_WaitOnFlagUntilTimeout>
 8003516:	4603      	mov	r3, r0
 8003518:	2b00      	cmp	r3, #0
 800351a:	d001      	beq.n	8003520 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800351c:	2303      	movs	r3, #3
 800351e:	e036      	b.n	800358e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003520:	69fb      	ldr	r3, [r7, #28]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d10b      	bne.n	800353e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003526:	69bb      	ldr	r3, [r7, #24]
 8003528:	881b      	ldrh	r3, [r3, #0]
 800352a:	461a      	mov	r2, r3
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003534:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003536:	69bb      	ldr	r3, [r7, #24]
 8003538:	3302      	adds	r3, #2
 800353a:	61bb      	str	r3, [r7, #24]
 800353c:	e007      	b.n	800354e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800353e:	69fb      	ldr	r3, [r7, #28]
 8003540:	781a      	ldrb	r2, [r3, #0]
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003548:	69fb      	ldr	r3, [r7, #28]
 800354a:	3301      	adds	r3, #1
 800354c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003552:	b29b      	uxth	r3, r3
 8003554:	3b01      	subs	r3, #1
 8003556:	b29a      	uxth	r2, r3
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003560:	b29b      	uxth	r3, r3
 8003562:	2b00      	cmp	r3, #0
 8003564:	d1cf      	bne.n	8003506 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	9300      	str	r3, [sp, #0]
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	2200      	movs	r2, #0
 800356e:	2140      	movs	r1, #64	; 0x40
 8003570:	68f8      	ldr	r0, [r7, #12]
 8003572:	f000 f810 	bl	8003596 <UART_WaitOnFlagUntilTimeout>
 8003576:	4603      	mov	r3, r0
 8003578:	2b00      	cmp	r3, #0
 800357a:	d001      	beq.n	8003580 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800357c:	2303      	movs	r3, #3
 800357e:	e006      	b.n	800358e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	2220      	movs	r2, #32
 8003584:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8003588:	2300      	movs	r3, #0
 800358a:	e000      	b.n	800358e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800358c:	2302      	movs	r3, #2
  }
}
 800358e:	4618      	mov	r0, r3
 8003590:	3720      	adds	r7, #32
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}

08003596 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003596:	b580      	push	{r7, lr}
 8003598:	b084      	sub	sp, #16
 800359a:	af00      	add	r7, sp, #0
 800359c:	60f8      	str	r0, [r7, #12]
 800359e:	60b9      	str	r1, [r7, #8]
 80035a0:	603b      	str	r3, [r7, #0]
 80035a2:	4613      	mov	r3, r2
 80035a4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035a6:	e02c      	b.n	8003602 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035a8:	69bb      	ldr	r3, [r7, #24]
 80035aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035ae:	d028      	beq.n	8003602 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80035b0:	69bb      	ldr	r3, [r7, #24]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d007      	beq.n	80035c6 <UART_WaitOnFlagUntilTimeout+0x30>
 80035b6:	f7fd fc3d 	bl	8000e34 <HAL_GetTick>
 80035ba:	4602      	mov	r2, r0
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	1ad3      	subs	r3, r2, r3
 80035c0:	69ba      	ldr	r2, [r7, #24]
 80035c2:	429a      	cmp	r2, r3
 80035c4:	d21d      	bcs.n	8003602 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	68da      	ldr	r2, [r3, #12]
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80035d4:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	695a      	ldr	r2, [r3, #20]
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f022 0201 	bic.w	r2, r2, #1
 80035e4:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	2220      	movs	r2, #32
 80035ea:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2220      	movs	r2, #32
 80035f2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	2200      	movs	r2, #0
 80035fa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80035fe:	2303      	movs	r3, #3
 8003600:	e00f      	b.n	8003622 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	681a      	ldr	r2, [r3, #0]
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	4013      	ands	r3, r2
 800360c:	68ba      	ldr	r2, [r7, #8]
 800360e:	429a      	cmp	r2, r3
 8003610:	bf0c      	ite	eq
 8003612:	2301      	moveq	r3, #1
 8003614:	2300      	movne	r3, #0
 8003616:	b2db      	uxtb	r3, r3
 8003618:	461a      	mov	r2, r3
 800361a:	79fb      	ldrb	r3, [r7, #7]
 800361c:	429a      	cmp	r2, r3
 800361e:	d0c3      	beq.n	80035a8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003620:	2300      	movs	r3, #0
}
 8003622:	4618      	mov	r0, r3
 8003624:	3710      	adds	r7, #16
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}
	...

0800362c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b084      	sub	sp, #16
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	691b      	ldr	r3, [r3, #16]
 800363a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	68da      	ldr	r2, [r3, #12]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	430a      	orrs	r2, r1
 8003648:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	689a      	ldr	r2, [r3, #8]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	691b      	ldr	r3, [r3, #16]
 8003652:	431a      	orrs	r2, r3
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	695b      	ldr	r3, [r3, #20]
 8003658:	4313      	orrs	r3, r2
 800365a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	68db      	ldr	r3, [r3, #12]
 8003662:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003666:	f023 030c 	bic.w	r3, r3, #12
 800366a:	687a      	ldr	r2, [r7, #4]
 800366c:	6812      	ldr	r2, [r2, #0]
 800366e:	68b9      	ldr	r1, [r7, #8]
 8003670:	430b      	orrs	r3, r1
 8003672:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	695b      	ldr	r3, [r3, #20]
 800367a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	699a      	ldr	r2, [r3, #24]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	430a      	orrs	r2, r1
 8003688:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a2c      	ldr	r2, [pc, #176]	; (8003740 <UART_SetConfig+0x114>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d103      	bne.n	800369c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003694:	f7ff fe6e 	bl	8003374 <HAL_RCC_GetPCLK2Freq>
 8003698:	60f8      	str	r0, [r7, #12]
 800369a:	e002      	b.n	80036a2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800369c:	f7ff fe56 	bl	800334c <HAL_RCC_GetPCLK1Freq>
 80036a0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80036a2:	68fa      	ldr	r2, [r7, #12]
 80036a4:	4613      	mov	r3, r2
 80036a6:	009b      	lsls	r3, r3, #2
 80036a8:	4413      	add	r3, r2
 80036aa:	009a      	lsls	r2, r3, #2
 80036ac:	441a      	add	r2, r3
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	009b      	lsls	r3, r3, #2
 80036b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80036b8:	4a22      	ldr	r2, [pc, #136]	; (8003744 <UART_SetConfig+0x118>)
 80036ba:	fba2 2303 	umull	r2, r3, r2, r3
 80036be:	095b      	lsrs	r3, r3, #5
 80036c0:	0119      	lsls	r1, r3, #4
 80036c2:	68fa      	ldr	r2, [r7, #12]
 80036c4:	4613      	mov	r3, r2
 80036c6:	009b      	lsls	r3, r3, #2
 80036c8:	4413      	add	r3, r2
 80036ca:	009a      	lsls	r2, r3, #2
 80036cc:	441a      	add	r2, r3
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	009b      	lsls	r3, r3, #2
 80036d4:	fbb2 f2f3 	udiv	r2, r2, r3
 80036d8:	4b1a      	ldr	r3, [pc, #104]	; (8003744 <UART_SetConfig+0x118>)
 80036da:	fba3 0302 	umull	r0, r3, r3, r2
 80036de:	095b      	lsrs	r3, r3, #5
 80036e0:	2064      	movs	r0, #100	; 0x64
 80036e2:	fb00 f303 	mul.w	r3, r0, r3
 80036e6:	1ad3      	subs	r3, r2, r3
 80036e8:	011b      	lsls	r3, r3, #4
 80036ea:	3332      	adds	r3, #50	; 0x32
 80036ec:	4a15      	ldr	r2, [pc, #84]	; (8003744 <UART_SetConfig+0x118>)
 80036ee:	fba2 2303 	umull	r2, r3, r2, r3
 80036f2:	095b      	lsrs	r3, r3, #5
 80036f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80036f8:	4419      	add	r1, r3
 80036fa:	68fa      	ldr	r2, [r7, #12]
 80036fc:	4613      	mov	r3, r2
 80036fe:	009b      	lsls	r3, r3, #2
 8003700:	4413      	add	r3, r2
 8003702:	009a      	lsls	r2, r3, #2
 8003704:	441a      	add	r2, r3
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	009b      	lsls	r3, r3, #2
 800370c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003710:	4b0c      	ldr	r3, [pc, #48]	; (8003744 <UART_SetConfig+0x118>)
 8003712:	fba3 0302 	umull	r0, r3, r3, r2
 8003716:	095b      	lsrs	r3, r3, #5
 8003718:	2064      	movs	r0, #100	; 0x64
 800371a:	fb00 f303 	mul.w	r3, r0, r3
 800371e:	1ad3      	subs	r3, r2, r3
 8003720:	011b      	lsls	r3, r3, #4
 8003722:	3332      	adds	r3, #50	; 0x32
 8003724:	4a07      	ldr	r2, [pc, #28]	; (8003744 <UART_SetConfig+0x118>)
 8003726:	fba2 2303 	umull	r2, r3, r2, r3
 800372a:	095b      	lsrs	r3, r3, #5
 800372c:	f003 020f 	and.w	r2, r3, #15
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	440a      	add	r2, r1
 8003736:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003738:	bf00      	nop
 800373a:	3710      	adds	r7, #16
 800373c:	46bd      	mov	sp, r7
 800373e:	bd80      	pop	{r7, pc}
 8003740:	40013800 	.word	0x40013800
 8003744:	51eb851f 	.word	0x51eb851f

08003748 <__errno>:
 8003748:	4b01      	ldr	r3, [pc, #4]	; (8003750 <__errno+0x8>)
 800374a:	6818      	ldr	r0, [r3, #0]
 800374c:	4770      	bx	lr
 800374e:	bf00      	nop
 8003750:	2000000c 	.word	0x2000000c

08003754 <__libc_init_array>:
 8003754:	b570      	push	{r4, r5, r6, lr}
 8003756:	2500      	movs	r5, #0
 8003758:	4e0c      	ldr	r6, [pc, #48]	; (800378c <__libc_init_array+0x38>)
 800375a:	4c0d      	ldr	r4, [pc, #52]	; (8003790 <__libc_init_array+0x3c>)
 800375c:	1ba4      	subs	r4, r4, r6
 800375e:	10a4      	asrs	r4, r4, #2
 8003760:	42a5      	cmp	r5, r4
 8003762:	d109      	bne.n	8003778 <__libc_init_array+0x24>
 8003764:	f000 fc36 	bl	8003fd4 <_init>
 8003768:	2500      	movs	r5, #0
 800376a:	4e0a      	ldr	r6, [pc, #40]	; (8003794 <__libc_init_array+0x40>)
 800376c:	4c0a      	ldr	r4, [pc, #40]	; (8003798 <__libc_init_array+0x44>)
 800376e:	1ba4      	subs	r4, r4, r6
 8003770:	10a4      	asrs	r4, r4, #2
 8003772:	42a5      	cmp	r5, r4
 8003774:	d105      	bne.n	8003782 <__libc_init_array+0x2e>
 8003776:	bd70      	pop	{r4, r5, r6, pc}
 8003778:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800377c:	4798      	blx	r3
 800377e:	3501      	adds	r5, #1
 8003780:	e7ee      	b.n	8003760 <__libc_init_array+0xc>
 8003782:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003786:	4798      	blx	r3
 8003788:	3501      	adds	r5, #1
 800378a:	e7f2      	b.n	8003772 <__libc_init_array+0x1e>
 800378c:	08004118 	.word	0x08004118
 8003790:	08004118 	.word	0x08004118
 8003794:	08004118 	.word	0x08004118
 8003798:	0800411c 	.word	0x0800411c

0800379c <memcpy>:
 800379c:	b510      	push	{r4, lr}
 800379e:	1e43      	subs	r3, r0, #1
 80037a0:	440a      	add	r2, r1
 80037a2:	4291      	cmp	r1, r2
 80037a4:	d100      	bne.n	80037a8 <memcpy+0xc>
 80037a6:	bd10      	pop	{r4, pc}
 80037a8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80037ac:	f803 4f01 	strb.w	r4, [r3, #1]!
 80037b0:	e7f7      	b.n	80037a2 <memcpy+0x6>

080037b2 <memset>:
 80037b2:	4603      	mov	r3, r0
 80037b4:	4402      	add	r2, r0
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d100      	bne.n	80037bc <memset+0xa>
 80037ba:	4770      	bx	lr
 80037bc:	f803 1b01 	strb.w	r1, [r3], #1
 80037c0:	e7f9      	b.n	80037b6 <memset+0x4>
	...

080037c4 <_vsiprintf_r>:
 80037c4:	b500      	push	{lr}
 80037c6:	b09b      	sub	sp, #108	; 0x6c
 80037c8:	9100      	str	r1, [sp, #0]
 80037ca:	9104      	str	r1, [sp, #16]
 80037cc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80037d0:	9105      	str	r1, [sp, #20]
 80037d2:	9102      	str	r1, [sp, #8]
 80037d4:	4905      	ldr	r1, [pc, #20]	; (80037ec <_vsiprintf_r+0x28>)
 80037d6:	9103      	str	r1, [sp, #12]
 80037d8:	4669      	mov	r1, sp
 80037da:	f000 f86d 	bl	80038b8 <_svfiprintf_r>
 80037de:	2200      	movs	r2, #0
 80037e0:	9b00      	ldr	r3, [sp, #0]
 80037e2:	701a      	strb	r2, [r3, #0]
 80037e4:	b01b      	add	sp, #108	; 0x6c
 80037e6:	f85d fb04 	ldr.w	pc, [sp], #4
 80037ea:	bf00      	nop
 80037ec:	ffff0208 	.word	0xffff0208

080037f0 <vsiprintf>:
 80037f0:	4613      	mov	r3, r2
 80037f2:	460a      	mov	r2, r1
 80037f4:	4601      	mov	r1, r0
 80037f6:	4802      	ldr	r0, [pc, #8]	; (8003800 <vsiprintf+0x10>)
 80037f8:	6800      	ldr	r0, [r0, #0]
 80037fa:	f7ff bfe3 	b.w	80037c4 <_vsiprintf_r>
 80037fe:	bf00      	nop
 8003800:	2000000c 	.word	0x2000000c

08003804 <__ssputs_r>:
 8003804:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003808:	688e      	ldr	r6, [r1, #8]
 800380a:	4682      	mov	sl, r0
 800380c:	429e      	cmp	r6, r3
 800380e:	460c      	mov	r4, r1
 8003810:	4690      	mov	r8, r2
 8003812:	4699      	mov	r9, r3
 8003814:	d837      	bhi.n	8003886 <__ssputs_r+0x82>
 8003816:	898a      	ldrh	r2, [r1, #12]
 8003818:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800381c:	d031      	beq.n	8003882 <__ssputs_r+0x7e>
 800381e:	2302      	movs	r3, #2
 8003820:	6825      	ldr	r5, [r4, #0]
 8003822:	6909      	ldr	r1, [r1, #16]
 8003824:	1a6f      	subs	r7, r5, r1
 8003826:	6965      	ldr	r5, [r4, #20]
 8003828:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800382c:	fb95 f5f3 	sdiv	r5, r5, r3
 8003830:	f109 0301 	add.w	r3, r9, #1
 8003834:	443b      	add	r3, r7
 8003836:	429d      	cmp	r5, r3
 8003838:	bf38      	it	cc
 800383a:	461d      	movcc	r5, r3
 800383c:	0553      	lsls	r3, r2, #21
 800383e:	d530      	bpl.n	80038a2 <__ssputs_r+0x9e>
 8003840:	4629      	mov	r1, r5
 8003842:	f000 fb2d 	bl	8003ea0 <_malloc_r>
 8003846:	4606      	mov	r6, r0
 8003848:	b950      	cbnz	r0, 8003860 <__ssputs_r+0x5c>
 800384a:	230c      	movs	r3, #12
 800384c:	f04f 30ff 	mov.w	r0, #4294967295
 8003850:	f8ca 3000 	str.w	r3, [sl]
 8003854:	89a3      	ldrh	r3, [r4, #12]
 8003856:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800385a:	81a3      	strh	r3, [r4, #12]
 800385c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003860:	463a      	mov	r2, r7
 8003862:	6921      	ldr	r1, [r4, #16]
 8003864:	f7ff ff9a 	bl	800379c <memcpy>
 8003868:	89a3      	ldrh	r3, [r4, #12]
 800386a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800386e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003872:	81a3      	strh	r3, [r4, #12]
 8003874:	6126      	str	r6, [r4, #16]
 8003876:	443e      	add	r6, r7
 8003878:	6026      	str	r6, [r4, #0]
 800387a:	464e      	mov	r6, r9
 800387c:	6165      	str	r5, [r4, #20]
 800387e:	1bed      	subs	r5, r5, r7
 8003880:	60a5      	str	r5, [r4, #8]
 8003882:	454e      	cmp	r6, r9
 8003884:	d900      	bls.n	8003888 <__ssputs_r+0x84>
 8003886:	464e      	mov	r6, r9
 8003888:	4632      	mov	r2, r6
 800388a:	4641      	mov	r1, r8
 800388c:	6820      	ldr	r0, [r4, #0]
 800388e:	f000 faa1 	bl	8003dd4 <memmove>
 8003892:	68a3      	ldr	r3, [r4, #8]
 8003894:	2000      	movs	r0, #0
 8003896:	1b9b      	subs	r3, r3, r6
 8003898:	60a3      	str	r3, [r4, #8]
 800389a:	6823      	ldr	r3, [r4, #0]
 800389c:	441e      	add	r6, r3
 800389e:	6026      	str	r6, [r4, #0]
 80038a0:	e7dc      	b.n	800385c <__ssputs_r+0x58>
 80038a2:	462a      	mov	r2, r5
 80038a4:	f000 fb56 	bl	8003f54 <_realloc_r>
 80038a8:	4606      	mov	r6, r0
 80038aa:	2800      	cmp	r0, #0
 80038ac:	d1e2      	bne.n	8003874 <__ssputs_r+0x70>
 80038ae:	6921      	ldr	r1, [r4, #16]
 80038b0:	4650      	mov	r0, sl
 80038b2:	f000 faa9 	bl	8003e08 <_free_r>
 80038b6:	e7c8      	b.n	800384a <__ssputs_r+0x46>

080038b8 <_svfiprintf_r>:
 80038b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038bc:	461d      	mov	r5, r3
 80038be:	898b      	ldrh	r3, [r1, #12]
 80038c0:	b09d      	sub	sp, #116	; 0x74
 80038c2:	061f      	lsls	r7, r3, #24
 80038c4:	4680      	mov	r8, r0
 80038c6:	460c      	mov	r4, r1
 80038c8:	4616      	mov	r6, r2
 80038ca:	d50f      	bpl.n	80038ec <_svfiprintf_r+0x34>
 80038cc:	690b      	ldr	r3, [r1, #16]
 80038ce:	b96b      	cbnz	r3, 80038ec <_svfiprintf_r+0x34>
 80038d0:	2140      	movs	r1, #64	; 0x40
 80038d2:	f000 fae5 	bl	8003ea0 <_malloc_r>
 80038d6:	6020      	str	r0, [r4, #0]
 80038d8:	6120      	str	r0, [r4, #16]
 80038da:	b928      	cbnz	r0, 80038e8 <_svfiprintf_r+0x30>
 80038dc:	230c      	movs	r3, #12
 80038de:	f8c8 3000 	str.w	r3, [r8]
 80038e2:	f04f 30ff 	mov.w	r0, #4294967295
 80038e6:	e0c8      	b.n	8003a7a <_svfiprintf_r+0x1c2>
 80038e8:	2340      	movs	r3, #64	; 0x40
 80038ea:	6163      	str	r3, [r4, #20]
 80038ec:	2300      	movs	r3, #0
 80038ee:	9309      	str	r3, [sp, #36]	; 0x24
 80038f0:	2320      	movs	r3, #32
 80038f2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80038f6:	2330      	movs	r3, #48	; 0x30
 80038f8:	f04f 0b01 	mov.w	fp, #1
 80038fc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003900:	9503      	str	r5, [sp, #12]
 8003902:	4637      	mov	r7, r6
 8003904:	463d      	mov	r5, r7
 8003906:	f815 3b01 	ldrb.w	r3, [r5], #1
 800390a:	b10b      	cbz	r3, 8003910 <_svfiprintf_r+0x58>
 800390c:	2b25      	cmp	r3, #37	; 0x25
 800390e:	d13e      	bne.n	800398e <_svfiprintf_r+0xd6>
 8003910:	ebb7 0a06 	subs.w	sl, r7, r6
 8003914:	d00b      	beq.n	800392e <_svfiprintf_r+0x76>
 8003916:	4653      	mov	r3, sl
 8003918:	4632      	mov	r2, r6
 800391a:	4621      	mov	r1, r4
 800391c:	4640      	mov	r0, r8
 800391e:	f7ff ff71 	bl	8003804 <__ssputs_r>
 8003922:	3001      	adds	r0, #1
 8003924:	f000 80a4 	beq.w	8003a70 <_svfiprintf_r+0x1b8>
 8003928:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800392a:	4453      	add	r3, sl
 800392c:	9309      	str	r3, [sp, #36]	; 0x24
 800392e:	783b      	ldrb	r3, [r7, #0]
 8003930:	2b00      	cmp	r3, #0
 8003932:	f000 809d 	beq.w	8003a70 <_svfiprintf_r+0x1b8>
 8003936:	2300      	movs	r3, #0
 8003938:	f04f 32ff 	mov.w	r2, #4294967295
 800393c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003940:	9304      	str	r3, [sp, #16]
 8003942:	9307      	str	r3, [sp, #28]
 8003944:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003948:	931a      	str	r3, [sp, #104]	; 0x68
 800394a:	462f      	mov	r7, r5
 800394c:	2205      	movs	r2, #5
 800394e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8003952:	4850      	ldr	r0, [pc, #320]	; (8003a94 <_svfiprintf_r+0x1dc>)
 8003954:	f000 fa30 	bl	8003db8 <memchr>
 8003958:	9b04      	ldr	r3, [sp, #16]
 800395a:	b9d0      	cbnz	r0, 8003992 <_svfiprintf_r+0xda>
 800395c:	06d9      	lsls	r1, r3, #27
 800395e:	bf44      	itt	mi
 8003960:	2220      	movmi	r2, #32
 8003962:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003966:	071a      	lsls	r2, r3, #28
 8003968:	bf44      	itt	mi
 800396a:	222b      	movmi	r2, #43	; 0x2b
 800396c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003970:	782a      	ldrb	r2, [r5, #0]
 8003972:	2a2a      	cmp	r2, #42	; 0x2a
 8003974:	d015      	beq.n	80039a2 <_svfiprintf_r+0xea>
 8003976:	462f      	mov	r7, r5
 8003978:	2000      	movs	r0, #0
 800397a:	250a      	movs	r5, #10
 800397c:	9a07      	ldr	r2, [sp, #28]
 800397e:	4639      	mov	r1, r7
 8003980:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003984:	3b30      	subs	r3, #48	; 0x30
 8003986:	2b09      	cmp	r3, #9
 8003988:	d94d      	bls.n	8003a26 <_svfiprintf_r+0x16e>
 800398a:	b1b8      	cbz	r0, 80039bc <_svfiprintf_r+0x104>
 800398c:	e00f      	b.n	80039ae <_svfiprintf_r+0xf6>
 800398e:	462f      	mov	r7, r5
 8003990:	e7b8      	b.n	8003904 <_svfiprintf_r+0x4c>
 8003992:	4a40      	ldr	r2, [pc, #256]	; (8003a94 <_svfiprintf_r+0x1dc>)
 8003994:	463d      	mov	r5, r7
 8003996:	1a80      	subs	r0, r0, r2
 8003998:	fa0b f000 	lsl.w	r0, fp, r0
 800399c:	4318      	orrs	r0, r3
 800399e:	9004      	str	r0, [sp, #16]
 80039a0:	e7d3      	b.n	800394a <_svfiprintf_r+0x92>
 80039a2:	9a03      	ldr	r2, [sp, #12]
 80039a4:	1d11      	adds	r1, r2, #4
 80039a6:	6812      	ldr	r2, [r2, #0]
 80039a8:	9103      	str	r1, [sp, #12]
 80039aa:	2a00      	cmp	r2, #0
 80039ac:	db01      	blt.n	80039b2 <_svfiprintf_r+0xfa>
 80039ae:	9207      	str	r2, [sp, #28]
 80039b0:	e004      	b.n	80039bc <_svfiprintf_r+0x104>
 80039b2:	4252      	negs	r2, r2
 80039b4:	f043 0302 	orr.w	r3, r3, #2
 80039b8:	9207      	str	r2, [sp, #28]
 80039ba:	9304      	str	r3, [sp, #16]
 80039bc:	783b      	ldrb	r3, [r7, #0]
 80039be:	2b2e      	cmp	r3, #46	; 0x2e
 80039c0:	d10c      	bne.n	80039dc <_svfiprintf_r+0x124>
 80039c2:	787b      	ldrb	r3, [r7, #1]
 80039c4:	2b2a      	cmp	r3, #42	; 0x2a
 80039c6:	d133      	bne.n	8003a30 <_svfiprintf_r+0x178>
 80039c8:	9b03      	ldr	r3, [sp, #12]
 80039ca:	3702      	adds	r7, #2
 80039cc:	1d1a      	adds	r2, r3, #4
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	9203      	str	r2, [sp, #12]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	bfb8      	it	lt
 80039d6:	f04f 33ff 	movlt.w	r3, #4294967295
 80039da:	9305      	str	r3, [sp, #20]
 80039dc:	4d2e      	ldr	r5, [pc, #184]	; (8003a98 <_svfiprintf_r+0x1e0>)
 80039de:	2203      	movs	r2, #3
 80039e0:	7839      	ldrb	r1, [r7, #0]
 80039e2:	4628      	mov	r0, r5
 80039e4:	f000 f9e8 	bl	8003db8 <memchr>
 80039e8:	b138      	cbz	r0, 80039fa <_svfiprintf_r+0x142>
 80039ea:	2340      	movs	r3, #64	; 0x40
 80039ec:	1b40      	subs	r0, r0, r5
 80039ee:	fa03 f000 	lsl.w	r0, r3, r0
 80039f2:	9b04      	ldr	r3, [sp, #16]
 80039f4:	3701      	adds	r7, #1
 80039f6:	4303      	orrs	r3, r0
 80039f8:	9304      	str	r3, [sp, #16]
 80039fa:	7839      	ldrb	r1, [r7, #0]
 80039fc:	2206      	movs	r2, #6
 80039fe:	4827      	ldr	r0, [pc, #156]	; (8003a9c <_svfiprintf_r+0x1e4>)
 8003a00:	1c7e      	adds	r6, r7, #1
 8003a02:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003a06:	f000 f9d7 	bl	8003db8 <memchr>
 8003a0a:	2800      	cmp	r0, #0
 8003a0c:	d038      	beq.n	8003a80 <_svfiprintf_r+0x1c8>
 8003a0e:	4b24      	ldr	r3, [pc, #144]	; (8003aa0 <_svfiprintf_r+0x1e8>)
 8003a10:	bb13      	cbnz	r3, 8003a58 <_svfiprintf_r+0x1a0>
 8003a12:	9b03      	ldr	r3, [sp, #12]
 8003a14:	3307      	adds	r3, #7
 8003a16:	f023 0307 	bic.w	r3, r3, #7
 8003a1a:	3308      	adds	r3, #8
 8003a1c:	9303      	str	r3, [sp, #12]
 8003a1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003a20:	444b      	add	r3, r9
 8003a22:	9309      	str	r3, [sp, #36]	; 0x24
 8003a24:	e76d      	b.n	8003902 <_svfiprintf_r+0x4a>
 8003a26:	fb05 3202 	mla	r2, r5, r2, r3
 8003a2a:	2001      	movs	r0, #1
 8003a2c:	460f      	mov	r7, r1
 8003a2e:	e7a6      	b.n	800397e <_svfiprintf_r+0xc6>
 8003a30:	2300      	movs	r3, #0
 8003a32:	250a      	movs	r5, #10
 8003a34:	4619      	mov	r1, r3
 8003a36:	3701      	adds	r7, #1
 8003a38:	9305      	str	r3, [sp, #20]
 8003a3a:	4638      	mov	r0, r7
 8003a3c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003a40:	3a30      	subs	r2, #48	; 0x30
 8003a42:	2a09      	cmp	r2, #9
 8003a44:	d903      	bls.n	8003a4e <_svfiprintf_r+0x196>
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d0c8      	beq.n	80039dc <_svfiprintf_r+0x124>
 8003a4a:	9105      	str	r1, [sp, #20]
 8003a4c:	e7c6      	b.n	80039dc <_svfiprintf_r+0x124>
 8003a4e:	fb05 2101 	mla	r1, r5, r1, r2
 8003a52:	2301      	movs	r3, #1
 8003a54:	4607      	mov	r7, r0
 8003a56:	e7f0      	b.n	8003a3a <_svfiprintf_r+0x182>
 8003a58:	ab03      	add	r3, sp, #12
 8003a5a:	9300      	str	r3, [sp, #0]
 8003a5c:	4622      	mov	r2, r4
 8003a5e:	4b11      	ldr	r3, [pc, #68]	; (8003aa4 <_svfiprintf_r+0x1ec>)
 8003a60:	a904      	add	r1, sp, #16
 8003a62:	4640      	mov	r0, r8
 8003a64:	f3af 8000 	nop.w
 8003a68:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003a6c:	4681      	mov	r9, r0
 8003a6e:	d1d6      	bne.n	8003a1e <_svfiprintf_r+0x166>
 8003a70:	89a3      	ldrh	r3, [r4, #12]
 8003a72:	065b      	lsls	r3, r3, #25
 8003a74:	f53f af35 	bmi.w	80038e2 <_svfiprintf_r+0x2a>
 8003a78:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003a7a:	b01d      	add	sp, #116	; 0x74
 8003a7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a80:	ab03      	add	r3, sp, #12
 8003a82:	9300      	str	r3, [sp, #0]
 8003a84:	4622      	mov	r2, r4
 8003a86:	4b07      	ldr	r3, [pc, #28]	; (8003aa4 <_svfiprintf_r+0x1ec>)
 8003a88:	a904      	add	r1, sp, #16
 8003a8a:	4640      	mov	r0, r8
 8003a8c:	f000 f882 	bl	8003b94 <_printf_i>
 8003a90:	e7ea      	b.n	8003a68 <_svfiprintf_r+0x1b0>
 8003a92:	bf00      	nop
 8003a94:	080040e4 	.word	0x080040e4
 8003a98:	080040ea 	.word	0x080040ea
 8003a9c:	080040ee 	.word	0x080040ee
 8003aa0:	00000000 	.word	0x00000000
 8003aa4:	08003805 	.word	0x08003805

08003aa8 <_printf_common>:
 8003aa8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003aac:	4691      	mov	r9, r2
 8003aae:	461f      	mov	r7, r3
 8003ab0:	688a      	ldr	r2, [r1, #8]
 8003ab2:	690b      	ldr	r3, [r1, #16]
 8003ab4:	4606      	mov	r6, r0
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	bfb8      	it	lt
 8003aba:	4613      	movlt	r3, r2
 8003abc:	f8c9 3000 	str.w	r3, [r9]
 8003ac0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003ac4:	460c      	mov	r4, r1
 8003ac6:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003aca:	b112      	cbz	r2, 8003ad2 <_printf_common+0x2a>
 8003acc:	3301      	adds	r3, #1
 8003ace:	f8c9 3000 	str.w	r3, [r9]
 8003ad2:	6823      	ldr	r3, [r4, #0]
 8003ad4:	0699      	lsls	r1, r3, #26
 8003ad6:	bf42      	ittt	mi
 8003ad8:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003adc:	3302      	addmi	r3, #2
 8003ade:	f8c9 3000 	strmi.w	r3, [r9]
 8003ae2:	6825      	ldr	r5, [r4, #0]
 8003ae4:	f015 0506 	ands.w	r5, r5, #6
 8003ae8:	d107      	bne.n	8003afa <_printf_common+0x52>
 8003aea:	f104 0a19 	add.w	sl, r4, #25
 8003aee:	68e3      	ldr	r3, [r4, #12]
 8003af0:	f8d9 2000 	ldr.w	r2, [r9]
 8003af4:	1a9b      	subs	r3, r3, r2
 8003af6:	42ab      	cmp	r3, r5
 8003af8:	dc29      	bgt.n	8003b4e <_printf_common+0xa6>
 8003afa:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003afe:	6822      	ldr	r2, [r4, #0]
 8003b00:	3300      	adds	r3, #0
 8003b02:	bf18      	it	ne
 8003b04:	2301      	movne	r3, #1
 8003b06:	0692      	lsls	r2, r2, #26
 8003b08:	d42e      	bmi.n	8003b68 <_printf_common+0xc0>
 8003b0a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003b0e:	4639      	mov	r1, r7
 8003b10:	4630      	mov	r0, r6
 8003b12:	47c0      	blx	r8
 8003b14:	3001      	adds	r0, #1
 8003b16:	d021      	beq.n	8003b5c <_printf_common+0xb4>
 8003b18:	6823      	ldr	r3, [r4, #0]
 8003b1a:	68e5      	ldr	r5, [r4, #12]
 8003b1c:	f003 0306 	and.w	r3, r3, #6
 8003b20:	2b04      	cmp	r3, #4
 8003b22:	bf18      	it	ne
 8003b24:	2500      	movne	r5, #0
 8003b26:	f8d9 2000 	ldr.w	r2, [r9]
 8003b2a:	f04f 0900 	mov.w	r9, #0
 8003b2e:	bf08      	it	eq
 8003b30:	1aad      	subeq	r5, r5, r2
 8003b32:	68a3      	ldr	r3, [r4, #8]
 8003b34:	6922      	ldr	r2, [r4, #16]
 8003b36:	bf08      	it	eq
 8003b38:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	bfc4      	itt	gt
 8003b40:	1a9b      	subgt	r3, r3, r2
 8003b42:	18ed      	addgt	r5, r5, r3
 8003b44:	341a      	adds	r4, #26
 8003b46:	454d      	cmp	r5, r9
 8003b48:	d11a      	bne.n	8003b80 <_printf_common+0xd8>
 8003b4a:	2000      	movs	r0, #0
 8003b4c:	e008      	b.n	8003b60 <_printf_common+0xb8>
 8003b4e:	2301      	movs	r3, #1
 8003b50:	4652      	mov	r2, sl
 8003b52:	4639      	mov	r1, r7
 8003b54:	4630      	mov	r0, r6
 8003b56:	47c0      	blx	r8
 8003b58:	3001      	adds	r0, #1
 8003b5a:	d103      	bne.n	8003b64 <_printf_common+0xbc>
 8003b5c:	f04f 30ff 	mov.w	r0, #4294967295
 8003b60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b64:	3501      	adds	r5, #1
 8003b66:	e7c2      	b.n	8003aee <_printf_common+0x46>
 8003b68:	2030      	movs	r0, #48	; 0x30
 8003b6a:	18e1      	adds	r1, r4, r3
 8003b6c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003b70:	1c5a      	adds	r2, r3, #1
 8003b72:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003b76:	4422      	add	r2, r4
 8003b78:	3302      	adds	r3, #2
 8003b7a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003b7e:	e7c4      	b.n	8003b0a <_printf_common+0x62>
 8003b80:	2301      	movs	r3, #1
 8003b82:	4622      	mov	r2, r4
 8003b84:	4639      	mov	r1, r7
 8003b86:	4630      	mov	r0, r6
 8003b88:	47c0      	blx	r8
 8003b8a:	3001      	adds	r0, #1
 8003b8c:	d0e6      	beq.n	8003b5c <_printf_common+0xb4>
 8003b8e:	f109 0901 	add.w	r9, r9, #1
 8003b92:	e7d8      	b.n	8003b46 <_printf_common+0x9e>

08003b94 <_printf_i>:
 8003b94:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003b98:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003b9c:	460c      	mov	r4, r1
 8003b9e:	7e09      	ldrb	r1, [r1, #24]
 8003ba0:	b085      	sub	sp, #20
 8003ba2:	296e      	cmp	r1, #110	; 0x6e
 8003ba4:	4617      	mov	r7, r2
 8003ba6:	4606      	mov	r6, r0
 8003ba8:	4698      	mov	r8, r3
 8003baa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003bac:	f000 80b3 	beq.w	8003d16 <_printf_i+0x182>
 8003bb0:	d822      	bhi.n	8003bf8 <_printf_i+0x64>
 8003bb2:	2963      	cmp	r1, #99	; 0x63
 8003bb4:	d036      	beq.n	8003c24 <_printf_i+0x90>
 8003bb6:	d80a      	bhi.n	8003bce <_printf_i+0x3a>
 8003bb8:	2900      	cmp	r1, #0
 8003bba:	f000 80b9 	beq.w	8003d30 <_printf_i+0x19c>
 8003bbe:	2958      	cmp	r1, #88	; 0x58
 8003bc0:	f000 8083 	beq.w	8003cca <_printf_i+0x136>
 8003bc4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003bc8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003bcc:	e032      	b.n	8003c34 <_printf_i+0xa0>
 8003bce:	2964      	cmp	r1, #100	; 0x64
 8003bd0:	d001      	beq.n	8003bd6 <_printf_i+0x42>
 8003bd2:	2969      	cmp	r1, #105	; 0x69
 8003bd4:	d1f6      	bne.n	8003bc4 <_printf_i+0x30>
 8003bd6:	6820      	ldr	r0, [r4, #0]
 8003bd8:	6813      	ldr	r3, [r2, #0]
 8003bda:	0605      	lsls	r5, r0, #24
 8003bdc:	f103 0104 	add.w	r1, r3, #4
 8003be0:	d52a      	bpl.n	8003c38 <_printf_i+0xa4>
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	6011      	str	r1, [r2, #0]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	da03      	bge.n	8003bf2 <_printf_i+0x5e>
 8003bea:	222d      	movs	r2, #45	; 0x2d
 8003bec:	425b      	negs	r3, r3
 8003bee:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003bf2:	486f      	ldr	r0, [pc, #444]	; (8003db0 <_printf_i+0x21c>)
 8003bf4:	220a      	movs	r2, #10
 8003bf6:	e039      	b.n	8003c6c <_printf_i+0xd8>
 8003bf8:	2973      	cmp	r1, #115	; 0x73
 8003bfa:	f000 809d 	beq.w	8003d38 <_printf_i+0x1a4>
 8003bfe:	d808      	bhi.n	8003c12 <_printf_i+0x7e>
 8003c00:	296f      	cmp	r1, #111	; 0x6f
 8003c02:	d020      	beq.n	8003c46 <_printf_i+0xb2>
 8003c04:	2970      	cmp	r1, #112	; 0x70
 8003c06:	d1dd      	bne.n	8003bc4 <_printf_i+0x30>
 8003c08:	6823      	ldr	r3, [r4, #0]
 8003c0a:	f043 0320 	orr.w	r3, r3, #32
 8003c0e:	6023      	str	r3, [r4, #0]
 8003c10:	e003      	b.n	8003c1a <_printf_i+0x86>
 8003c12:	2975      	cmp	r1, #117	; 0x75
 8003c14:	d017      	beq.n	8003c46 <_printf_i+0xb2>
 8003c16:	2978      	cmp	r1, #120	; 0x78
 8003c18:	d1d4      	bne.n	8003bc4 <_printf_i+0x30>
 8003c1a:	2378      	movs	r3, #120	; 0x78
 8003c1c:	4865      	ldr	r0, [pc, #404]	; (8003db4 <_printf_i+0x220>)
 8003c1e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003c22:	e055      	b.n	8003cd0 <_printf_i+0x13c>
 8003c24:	6813      	ldr	r3, [r2, #0]
 8003c26:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003c2a:	1d19      	adds	r1, r3, #4
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	6011      	str	r1, [r2, #0]
 8003c30:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003c34:	2301      	movs	r3, #1
 8003c36:	e08c      	b.n	8003d52 <_printf_i+0x1be>
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003c3e:	6011      	str	r1, [r2, #0]
 8003c40:	bf18      	it	ne
 8003c42:	b21b      	sxthne	r3, r3
 8003c44:	e7cf      	b.n	8003be6 <_printf_i+0x52>
 8003c46:	6813      	ldr	r3, [r2, #0]
 8003c48:	6825      	ldr	r5, [r4, #0]
 8003c4a:	1d18      	adds	r0, r3, #4
 8003c4c:	6010      	str	r0, [r2, #0]
 8003c4e:	0628      	lsls	r0, r5, #24
 8003c50:	d501      	bpl.n	8003c56 <_printf_i+0xc2>
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	e002      	b.n	8003c5c <_printf_i+0xc8>
 8003c56:	0668      	lsls	r0, r5, #25
 8003c58:	d5fb      	bpl.n	8003c52 <_printf_i+0xbe>
 8003c5a:	881b      	ldrh	r3, [r3, #0]
 8003c5c:	296f      	cmp	r1, #111	; 0x6f
 8003c5e:	bf14      	ite	ne
 8003c60:	220a      	movne	r2, #10
 8003c62:	2208      	moveq	r2, #8
 8003c64:	4852      	ldr	r0, [pc, #328]	; (8003db0 <_printf_i+0x21c>)
 8003c66:	2100      	movs	r1, #0
 8003c68:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003c6c:	6865      	ldr	r5, [r4, #4]
 8003c6e:	2d00      	cmp	r5, #0
 8003c70:	60a5      	str	r5, [r4, #8]
 8003c72:	f2c0 8095 	blt.w	8003da0 <_printf_i+0x20c>
 8003c76:	6821      	ldr	r1, [r4, #0]
 8003c78:	f021 0104 	bic.w	r1, r1, #4
 8003c7c:	6021      	str	r1, [r4, #0]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d13d      	bne.n	8003cfe <_printf_i+0x16a>
 8003c82:	2d00      	cmp	r5, #0
 8003c84:	f040 808e 	bne.w	8003da4 <_printf_i+0x210>
 8003c88:	4665      	mov	r5, ip
 8003c8a:	2a08      	cmp	r2, #8
 8003c8c:	d10b      	bne.n	8003ca6 <_printf_i+0x112>
 8003c8e:	6823      	ldr	r3, [r4, #0]
 8003c90:	07db      	lsls	r3, r3, #31
 8003c92:	d508      	bpl.n	8003ca6 <_printf_i+0x112>
 8003c94:	6923      	ldr	r3, [r4, #16]
 8003c96:	6862      	ldr	r2, [r4, #4]
 8003c98:	429a      	cmp	r2, r3
 8003c9a:	bfde      	ittt	le
 8003c9c:	2330      	movle	r3, #48	; 0x30
 8003c9e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003ca2:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003ca6:	ebac 0305 	sub.w	r3, ip, r5
 8003caa:	6123      	str	r3, [r4, #16]
 8003cac:	f8cd 8000 	str.w	r8, [sp]
 8003cb0:	463b      	mov	r3, r7
 8003cb2:	aa03      	add	r2, sp, #12
 8003cb4:	4621      	mov	r1, r4
 8003cb6:	4630      	mov	r0, r6
 8003cb8:	f7ff fef6 	bl	8003aa8 <_printf_common>
 8003cbc:	3001      	adds	r0, #1
 8003cbe:	d14d      	bne.n	8003d5c <_printf_i+0x1c8>
 8003cc0:	f04f 30ff 	mov.w	r0, #4294967295
 8003cc4:	b005      	add	sp, #20
 8003cc6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003cca:	4839      	ldr	r0, [pc, #228]	; (8003db0 <_printf_i+0x21c>)
 8003ccc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003cd0:	6813      	ldr	r3, [r2, #0]
 8003cd2:	6821      	ldr	r1, [r4, #0]
 8003cd4:	1d1d      	adds	r5, r3, #4
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	6015      	str	r5, [r2, #0]
 8003cda:	060a      	lsls	r2, r1, #24
 8003cdc:	d50b      	bpl.n	8003cf6 <_printf_i+0x162>
 8003cde:	07ca      	lsls	r2, r1, #31
 8003ce0:	bf44      	itt	mi
 8003ce2:	f041 0120 	orrmi.w	r1, r1, #32
 8003ce6:	6021      	strmi	r1, [r4, #0]
 8003ce8:	b91b      	cbnz	r3, 8003cf2 <_printf_i+0x15e>
 8003cea:	6822      	ldr	r2, [r4, #0]
 8003cec:	f022 0220 	bic.w	r2, r2, #32
 8003cf0:	6022      	str	r2, [r4, #0]
 8003cf2:	2210      	movs	r2, #16
 8003cf4:	e7b7      	b.n	8003c66 <_printf_i+0xd2>
 8003cf6:	064d      	lsls	r5, r1, #25
 8003cf8:	bf48      	it	mi
 8003cfa:	b29b      	uxthmi	r3, r3
 8003cfc:	e7ef      	b.n	8003cde <_printf_i+0x14a>
 8003cfe:	4665      	mov	r5, ip
 8003d00:	fbb3 f1f2 	udiv	r1, r3, r2
 8003d04:	fb02 3311 	mls	r3, r2, r1, r3
 8003d08:	5cc3      	ldrb	r3, [r0, r3]
 8003d0a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003d0e:	460b      	mov	r3, r1
 8003d10:	2900      	cmp	r1, #0
 8003d12:	d1f5      	bne.n	8003d00 <_printf_i+0x16c>
 8003d14:	e7b9      	b.n	8003c8a <_printf_i+0xf6>
 8003d16:	6813      	ldr	r3, [r2, #0]
 8003d18:	6825      	ldr	r5, [r4, #0]
 8003d1a:	1d18      	adds	r0, r3, #4
 8003d1c:	6961      	ldr	r1, [r4, #20]
 8003d1e:	6010      	str	r0, [r2, #0]
 8003d20:	0628      	lsls	r0, r5, #24
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	d501      	bpl.n	8003d2a <_printf_i+0x196>
 8003d26:	6019      	str	r1, [r3, #0]
 8003d28:	e002      	b.n	8003d30 <_printf_i+0x19c>
 8003d2a:	066a      	lsls	r2, r5, #25
 8003d2c:	d5fb      	bpl.n	8003d26 <_printf_i+0x192>
 8003d2e:	8019      	strh	r1, [r3, #0]
 8003d30:	2300      	movs	r3, #0
 8003d32:	4665      	mov	r5, ip
 8003d34:	6123      	str	r3, [r4, #16]
 8003d36:	e7b9      	b.n	8003cac <_printf_i+0x118>
 8003d38:	6813      	ldr	r3, [r2, #0]
 8003d3a:	1d19      	adds	r1, r3, #4
 8003d3c:	6011      	str	r1, [r2, #0]
 8003d3e:	681d      	ldr	r5, [r3, #0]
 8003d40:	6862      	ldr	r2, [r4, #4]
 8003d42:	2100      	movs	r1, #0
 8003d44:	4628      	mov	r0, r5
 8003d46:	f000 f837 	bl	8003db8 <memchr>
 8003d4a:	b108      	cbz	r0, 8003d50 <_printf_i+0x1bc>
 8003d4c:	1b40      	subs	r0, r0, r5
 8003d4e:	6060      	str	r0, [r4, #4]
 8003d50:	6863      	ldr	r3, [r4, #4]
 8003d52:	6123      	str	r3, [r4, #16]
 8003d54:	2300      	movs	r3, #0
 8003d56:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003d5a:	e7a7      	b.n	8003cac <_printf_i+0x118>
 8003d5c:	6923      	ldr	r3, [r4, #16]
 8003d5e:	462a      	mov	r2, r5
 8003d60:	4639      	mov	r1, r7
 8003d62:	4630      	mov	r0, r6
 8003d64:	47c0      	blx	r8
 8003d66:	3001      	adds	r0, #1
 8003d68:	d0aa      	beq.n	8003cc0 <_printf_i+0x12c>
 8003d6a:	6823      	ldr	r3, [r4, #0]
 8003d6c:	079b      	lsls	r3, r3, #30
 8003d6e:	d413      	bmi.n	8003d98 <_printf_i+0x204>
 8003d70:	68e0      	ldr	r0, [r4, #12]
 8003d72:	9b03      	ldr	r3, [sp, #12]
 8003d74:	4298      	cmp	r0, r3
 8003d76:	bfb8      	it	lt
 8003d78:	4618      	movlt	r0, r3
 8003d7a:	e7a3      	b.n	8003cc4 <_printf_i+0x130>
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	464a      	mov	r2, r9
 8003d80:	4639      	mov	r1, r7
 8003d82:	4630      	mov	r0, r6
 8003d84:	47c0      	blx	r8
 8003d86:	3001      	adds	r0, #1
 8003d88:	d09a      	beq.n	8003cc0 <_printf_i+0x12c>
 8003d8a:	3501      	adds	r5, #1
 8003d8c:	68e3      	ldr	r3, [r4, #12]
 8003d8e:	9a03      	ldr	r2, [sp, #12]
 8003d90:	1a9b      	subs	r3, r3, r2
 8003d92:	42ab      	cmp	r3, r5
 8003d94:	dcf2      	bgt.n	8003d7c <_printf_i+0x1e8>
 8003d96:	e7eb      	b.n	8003d70 <_printf_i+0x1dc>
 8003d98:	2500      	movs	r5, #0
 8003d9a:	f104 0919 	add.w	r9, r4, #25
 8003d9e:	e7f5      	b.n	8003d8c <_printf_i+0x1f8>
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d1ac      	bne.n	8003cfe <_printf_i+0x16a>
 8003da4:	7803      	ldrb	r3, [r0, #0]
 8003da6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003daa:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003dae:	e76c      	b.n	8003c8a <_printf_i+0xf6>
 8003db0:	080040f5 	.word	0x080040f5
 8003db4:	08004106 	.word	0x08004106

08003db8 <memchr>:
 8003db8:	b510      	push	{r4, lr}
 8003dba:	b2c9      	uxtb	r1, r1
 8003dbc:	4402      	add	r2, r0
 8003dbe:	4290      	cmp	r0, r2
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	d101      	bne.n	8003dc8 <memchr+0x10>
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	e003      	b.n	8003dd0 <memchr+0x18>
 8003dc8:	781c      	ldrb	r4, [r3, #0]
 8003dca:	3001      	adds	r0, #1
 8003dcc:	428c      	cmp	r4, r1
 8003dce:	d1f6      	bne.n	8003dbe <memchr+0x6>
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	bd10      	pop	{r4, pc}

08003dd4 <memmove>:
 8003dd4:	4288      	cmp	r0, r1
 8003dd6:	b510      	push	{r4, lr}
 8003dd8:	eb01 0302 	add.w	r3, r1, r2
 8003ddc:	d807      	bhi.n	8003dee <memmove+0x1a>
 8003dde:	1e42      	subs	r2, r0, #1
 8003de0:	4299      	cmp	r1, r3
 8003de2:	d00a      	beq.n	8003dfa <memmove+0x26>
 8003de4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003de8:	f802 4f01 	strb.w	r4, [r2, #1]!
 8003dec:	e7f8      	b.n	8003de0 <memmove+0xc>
 8003dee:	4283      	cmp	r3, r0
 8003df0:	d9f5      	bls.n	8003dde <memmove+0xa>
 8003df2:	1881      	adds	r1, r0, r2
 8003df4:	1ad2      	subs	r2, r2, r3
 8003df6:	42d3      	cmn	r3, r2
 8003df8:	d100      	bne.n	8003dfc <memmove+0x28>
 8003dfa:	bd10      	pop	{r4, pc}
 8003dfc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003e00:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8003e04:	e7f7      	b.n	8003df6 <memmove+0x22>
	...

08003e08 <_free_r>:
 8003e08:	b538      	push	{r3, r4, r5, lr}
 8003e0a:	4605      	mov	r5, r0
 8003e0c:	2900      	cmp	r1, #0
 8003e0e:	d043      	beq.n	8003e98 <_free_r+0x90>
 8003e10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003e14:	1f0c      	subs	r4, r1, #4
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	bfb8      	it	lt
 8003e1a:	18e4      	addlt	r4, r4, r3
 8003e1c:	f000 f8d0 	bl	8003fc0 <__malloc_lock>
 8003e20:	4a1e      	ldr	r2, [pc, #120]	; (8003e9c <_free_r+0x94>)
 8003e22:	6813      	ldr	r3, [r2, #0]
 8003e24:	4610      	mov	r0, r2
 8003e26:	b933      	cbnz	r3, 8003e36 <_free_r+0x2e>
 8003e28:	6063      	str	r3, [r4, #4]
 8003e2a:	6014      	str	r4, [r2, #0]
 8003e2c:	4628      	mov	r0, r5
 8003e2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003e32:	f000 b8c6 	b.w	8003fc2 <__malloc_unlock>
 8003e36:	42a3      	cmp	r3, r4
 8003e38:	d90b      	bls.n	8003e52 <_free_r+0x4a>
 8003e3a:	6821      	ldr	r1, [r4, #0]
 8003e3c:	1862      	adds	r2, r4, r1
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	bf01      	itttt	eq
 8003e42:	681a      	ldreq	r2, [r3, #0]
 8003e44:	685b      	ldreq	r3, [r3, #4]
 8003e46:	1852      	addeq	r2, r2, r1
 8003e48:	6022      	streq	r2, [r4, #0]
 8003e4a:	6063      	str	r3, [r4, #4]
 8003e4c:	6004      	str	r4, [r0, #0]
 8003e4e:	e7ed      	b.n	8003e2c <_free_r+0x24>
 8003e50:	4613      	mov	r3, r2
 8003e52:	685a      	ldr	r2, [r3, #4]
 8003e54:	b10a      	cbz	r2, 8003e5a <_free_r+0x52>
 8003e56:	42a2      	cmp	r2, r4
 8003e58:	d9fa      	bls.n	8003e50 <_free_r+0x48>
 8003e5a:	6819      	ldr	r1, [r3, #0]
 8003e5c:	1858      	adds	r0, r3, r1
 8003e5e:	42a0      	cmp	r0, r4
 8003e60:	d10b      	bne.n	8003e7a <_free_r+0x72>
 8003e62:	6820      	ldr	r0, [r4, #0]
 8003e64:	4401      	add	r1, r0
 8003e66:	1858      	adds	r0, r3, r1
 8003e68:	4282      	cmp	r2, r0
 8003e6a:	6019      	str	r1, [r3, #0]
 8003e6c:	d1de      	bne.n	8003e2c <_free_r+0x24>
 8003e6e:	6810      	ldr	r0, [r2, #0]
 8003e70:	6852      	ldr	r2, [r2, #4]
 8003e72:	4401      	add	r1, r0
 8003e74:	6019      	str	r1, [r3, #0]
 8003e76:	605a      	str	r2, [r3, #4]
 8003e78:	e7d8      	b.n	8003e2c <_free_r+0x24>
 8003e7a:	d902      	bls.n	8003e82 <_free_r+0x7a>
 8003e7c:	230c      	movs	r3, #12
 8003e7e:	602b      	str	r3, [r5, #0]
 8003e80:	e7d4      	b.n	8003e2c <_free_r+0x24>
 8003e82:	6820      	ldr	r0, [r4, #0]
 8003e84:	1821      	adds	r1, r4, r0
 8003e86:	428a      	cmp	r2, r1
 8003e88:	bf01      	itttt	eq
 8003e8a:	6811      	ldreq	r1, [r2, #0]
 8003e8c:	6852      	ldreq	r2, [r2, #4]
 8003e8e:	1809      	addeq	r1, r1, r0
 8003e90:	6021      	streq	r1, [r4, #0]
 8003e92:	6062      	str	r2, [r4, #4]
 8003e94:	605c      	str	r4, [r3, #4]
 8003e96:	e7c9      	b.n	8003e2c <_free_r+0x24>
 8003e98:	bd38      	pop	{r3, r4, r5, pc}
 8003e9a:	bf00      	nop
 8003e9c:	20000090 	.word	0x20000090

08003ea0 <_malloc_r>:
 8003ea0:	b570      	push	{r4, r5, r6, lr}
 8003ea2:	1ccd      	adds	r5, r1, #3
 8003ea4:	f025 0503 	bic.w	r5, r5, #3
 8003ea8:	3508      	adds	r5, #8
 8003eaa:	2d0c      	cmp	r5, #12
 8003eac:	bf38      	it	cc
 8003eae:	250c      	movcc	r5, #12
 8003eb0:	2d00      	cmp	r5, #0
 8003eb2:	4606      	mov	r6, r0
 8003eb4:	db01      	blt.n	8003eba <_malloc_r+0x1a>
 8003eb6:	42a9      	cmp	r1, r5
 8003eb8:	d903      	bls.n	8003ec2 <_malloc_r+0x22>
 8003eba:	230c      	movs	r3, #12
 8003ebc:	6033      	str	r3, [r6, #0]
 8003ebe:	2000      	movs	r0, #0
 8003ec0:	bd70      	pop	{r4, r5, r6, pc}
 8003ec2:	f000 f87d 	bl	8003fc0 <__malloc_lock>
 8003ec6:	4a21      	ldr	r2, [pc, #132]	; (8003f4c <_malloc_r+0xac>)
 8003ec8:	6814      	ldr	r4, [r2, #0]
 8003eca:	4621      	mov	r1, r4
 8003ecc:	b991      	cbnz	r1, 8003ef4 <_malloc_r+0x54>
 8003ece:	4c20      	ldr	r4, [pc, #128]	; (8003f50 <_malloc_r+0xb0>)
 8003ed0:	6823      	ldr	r3, [r4, #0]
 8003ed2:	b91b      	cbnz	r3, 8003edc <_malloc_r+0x3c>
 8003ed4:	4630      	mov	r0, r6
 8003ed6:	f000 f863 	bl	8003fa0 <_sbrk_r>
 8003eda:	6020      	str	r0, [r4, #0]
 8003edc:	4629      	mov	r1, r5
 8003ede:	4630      	mov	r0, r6
 8003ee0:	f000 f85e 	bl	8003fa0 <_sbrk_r>
 8003ee4:	1c43      	adds	r3, r0, #1
 8003ee6:	d124      	bne.n	8003f32 <_malloc_r+0x92>
 8003ee8:	230c      	movs	r3, #12
 8003eea:	4630      	mov	r0, r6
 8003eec:	6033      	str	r3, [r6, #0]
 8003eee:	f000 f868 	bl	8003fc2 <__malloc_unlock>
 8003ef2:	e7e4      	b.n	8003ebe <_malloc_r+0x1e>
 8003ef4:	680b      	ldr	r3, [r1, #0]
 8003ef6:	1b5b      	subs	r3, r3, r5
 8003ef8:	d418      	bmi.n	8003f2c <_malloc_r+0x8c>
 8003efa:	2b0b      	cmp	r3, #11
 8003efc:	d90f      	bls.n	8003f1e <_malloc_r+0x7e>
 8003efe:	600b      	str	r3, [r1, #0]
 8003f00:	18cc      	adds	r4, r1, r3
 8003f02:	50cd      	str	r5, [r1, r3]
 8003f04:	4630      	mov	r0, r6
 8003f06:	f000 f85c 	bl	8003fc2 <__malloc_unlock>
 8003f0a:	f104 000b 	add.w	r0, r4, #11
 8003f0e:	1d23      	adds	r3, r4, #4
 8003f10:	f020 0007 	bic.w	r0, r0, #7
 8003f14:	1ac3      	subs	r3, r0, r3
 8003f16:	d0d3      	beq.n	8003ec0 <_malloc_r+0x20>
 8003f18:	425a      	negs	r2, r3
 8003f1a:	50e2      	str	r2, [r4, r3]
 8003f1c:	e7d0      	b.n	8003ec0 <_malloc_r+0x20>
 8003f1e:	684b      	ldr	r3, [r1, #4]
 8003f20:	428c      	cmp	r4, r1
 8003f22:	bf16      	itet	ne
 8003f24:	6063      	strne	r3, [r4, #4]
 8003f26:	6013      	streq	r3, [r2, #0]
 8003f28:	460c      	movne	r4, r1
 8003f2a:	e7eb      	b.n	8003f04 <_malloc_r+0x64>
 8003f2c:	460c      	mov	r4, r1
 8003f2e:	6849      	ldr	r1, [r1, #4]
 8003f30:	e7cc      	b.n	8003ecc <_malloc_r+0x2c>
 8003f32:	1cc4      	adds	r4, r0, #3
 8003f34:	f024 0403 	bic.w	r4, r4, #3
 8003f38:	42a0      	cmp	r0, r4
 8003f3a:	d005      	beq.n	8003f48 <_malloc_r+0xa8>
 8003f3c:	1a21      	subs	r1, r4, r0
 8003f3e:	4630      	mov	r0, r6
 8003f40:	f000 f82e 	bl	8003fa0 <_sbrk_r>
 8003f44:	3001      	adds	r0, #1
 8003f46:	d0cf      	beq.n	8003ee8 <_malloc_r+0x48>
 8003f48:	6025      	str	r5, [r4, #0]
 8003f4a:	e7db      	b.n	8003f04 <_malloc_r+0x64>
 8003f4c:	20000090 	.word	0x20000090
 8003f50:	20000094 	.word	0x20000094

08003f54 <_realloc_r>:
 8003f54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f56:	4607      	mov	r7, r0
 8003f58:	4614      	mov	r4, r2
 8003f5a:	460e      	mov	r6, r1
 8003f5c:	b921      	cbnz	r1, 8003f68 <_realloc_r+0x14>
 8003f5e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003f62:	4611      	mov	r1, r2
 8003f64:	f7ff bf9c 	b.w	8003ea0 <_malloc_r>
 8003f68:	b922      	cbnz	r2, 8003f74 <_realloc_r+0x20>
 8003f6a:	f7ff ff4d 	bl	8003e08 <_free_r>
 8003f6e:	4625      	mov	r5, r4
 8003f70:	4628      	mov	r0, r5
 8003f72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003f74:	f000 f826 	bl	8003fc4 <_malloc_usable_size_r>
 8003f78:	42a0      	cmp	r0, r4
 8003f7a:	d20f      	bcs.n	8003f9c <_realloc_r+0x48>
 8003f7c:	4621      	mov	r1, r4
 8003f7e:	4638      	mov	r0, r7
 8003f80:	f7ff ff8e 	bl	8003ea0 <_malloc_r>
 8003f84:	4605      	mov	r5, r0
 8003f86:	2800      	cmp	r0, #0
 8003f88:	d0f2      	beq.n	8003f70 <_realloc_r+0x1c>
 8003f8a:	4631      	mov	r1, r6
 8003f8c:	4622      	mov	r2, r4
 8003f8e:	f7ff fc05 	bl	800379c <memcpy>
 8003f92:	4631      	mov	r1, r6
 8003f94:	4638      	mov	r0, r7
 8003f96:	f7ff ff37 	bl	8003e08 <_free_r>
 8003f9a:	e7e9      	b.n	8003f70 <_realloc_r+0x1c>
 8003f9c:	4635      	mov	r5, r6
 8003f9e:	e7e7      	b.n	8003f70 <_realloc_r+0x1c>

08003fa0 <_sbrk_r>:
 8003fa0:	b538      	push	{r3, r4, r5, lr}
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	4c05      	ldr	r4, [pc, #20]	; (8003fbc <_sbrk_r+0x1c>)
 8003fa6:	4605      	mov	r5, r0
 8003fa8:	4608      	mov	r0, r1
 8003faa:	6023      	str	r3, [r4, #0]
 8003fac:	f7fc fdae 	bl	8000b0c <_sbrk>
 8003fb0:	1c43      	adds	r3, r0, #1
 8003fb2:	d102      	bne.n	8003fba <_sbrk_r+0x1a>
 8003fb4:	6823      	ldr	r3, [r4, #0]
 8003fb6:	b103      	cbz	r3, 8003fba <_sbrk_r+0x1a>
 8003fb8:	602b      	str	r3, [r5, #0]
 8003fba:	bd38      	pop	{r3, r4, r5, pc}
 8003fbc:	20000248 	.word	0x20000248

08003fc0 <__malloc_lock>:
 8003fc0:	4770      	bx	lr

08003fc2 <__malloc_unlock>:
 8003fc2:	4770      	bx	lr

08003fc4 <_malloc_usable_size_r>:
 8003fc4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003fc8:	1f18      	subs	r0, r3, #4
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	bfbc      	itt	lt
 8003fce:	580b      	ldrlt	r3, [r1, r0]
 8003fd0:	18c0      	addlt	r0, r0, r3
 8003fd2:	4770      	bx	lr

08003fd4 <_init>:
 8003fd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fd6:	bf00      	nop
 8003fd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003fda:	bc08      	pop	{r3}
 8003fdc:	469e      	mov	lr, r3
 8003fde:	4770      	bx	lr

08003fe0 <_fini>:
 8003fe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fe2:	bf00      	nop
 8003fe4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003fe6:	bc08      	pop	{r3}
 8003fe8:	469e      	mov	lr, r3
 8003fea:	4770      	bx	lr
