
f103radio.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003950  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000120  08003a5c  08003a5c  00013a5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003b7c  08003b7c  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003b7c  08003b7c  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003b7c  08003b7c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003b7c  08003b7c  00013b7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003b80  08003b80  00013b80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003b84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001dc  20000070  08003bf4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000024c  08003bf4  0002024c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cb39  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001f43  00000000  00000000  0002cbd2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000a60  00000000  00000000  0002eb18  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000970  00000000  00000000  0002f578  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018405  00000000  00000000  0002fee8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a08b  00000000  00000000  000482ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00084f0f  00000000  00000000  00052378  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d7287  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002bf0  00000000  00000000  000d7304  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08003a44 	.word	0x08003a44

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08003a44 	.word	0x08003a44

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b088      	sub	sp, #32
 8000160:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000162:	f107 0310 	add.w	r3, r7, #16
 8000166:	2200      	movs	r2, #0
 8000168:	601a      	str	r2, [r3, #0]
 800016a:	605a      	str	r2, [r3, #4]
 800016c:	609a      	str	r2, [r3, #8]
 800016e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000170:	4b1d      	ldr	r3, [pc, #116]	; (80001e8 <MX_GPIO_Init+0x8c>)
 8000172:	699b      	ldr	r3, [r3, #24]
 8000174:	4a1c      	ldr	r2, [pc, #112]	; (80001e8 <MX_GPIO_Init+0x8c>)
 8000176:	f043 0320 	orr.w	r3, r3, #32
 800017a:	6193      	str	r3, [r2, #24]
 800017c:	4b1a      	ldr	r3, [pc, #104]	; (80001e8 <MX_GPIO_Init+0x8c>)
 800017e:	699b      	ldr	r3, [r3, #24]
 8000180:	f003 0320 	and.w	r3, r3, #32
 8000184:	60fb      	str	r3, [r7, #12]
 8000186:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000188:	4b17      	ldr	r3, [pc, #92]	; (80001e8 <MX_GPIO_Init+0x8c>)
 800018a:	699b      	ldr	r3, [r3, #24]
 800018c:	4a16      	ldr	r2, [pc, #88]	; (80001e8 <MX_GPIO_Init+0x8c>)
 800018e:	f043 0304 	orr.w	r3, r3, #4
 8000192:	6193      	str	r3, [r2, #24]
 8000194:	4b14      	ldr	r3, [pc, #80]	; (80001e8 <MX_GPIO_Init+0x8c>)
 8000196:	699b      	ldr	r3, [r3, #24]
 8000198:	f003 0304 	and.w	r3, r3, #4
 800019c:	60bb      	str	r3, [r7, #8]
 800019e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80001a0:	4b11      	ldr	r3, [pc, #68]	; (80001e8 <MX_GPIO_Init+0x8c>)
 80001a2:	699b      	ldr	r3, [r3, #24]
 80001a4:	4a10      	ldr	r2, [pc, #64]	; (80001e8 <MX_GPIO_Init+0x8c>)
 80001a6:	f043 0308 	orr.w	r3, r3, #8
 80001aa:	6193      	str	r3, [r2, #24]
 80001ac:	4b0e      	ldr	r3, [pc, #56]	; (80001e8 <MX_GPIO_Init+0x8c>)
 80001ae:	699b      	ldr	r3, [r3, #24]
 80001b0:	f003 0308 	and.w	r3, r3, #8
 80001b4:	607b      	str	r3, [r7, #4]
 80001b6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_BOARD_GPIO_Port, LED_BOARD_Pin, GPIO_PIN_RESET);
 80001b8:	2200      	movs	r2, #0
 80001ba:	2102      	movs	r1, #2
 80001bc:	480b      	ldr	r0, [pc, #44]	; (80001ec <MX_GPIO_Init+0x90>)
 80001be:	f001 f925 	bl	800140c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_BOARD_Pin;
 80001c2:	2302      	movs	r3, #2
 80001c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80001c6:	2301      	movs	r3, #1
 80001c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001ca:	2300      	movs	r3, #0
 80001cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80001ce:	2302      	movs	r3, #2
 80001d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_BOARD_GPIO_Port, &GPIO_InitStruct);
 80001d2:	f107 0310 	add.w	r3, r7, #16
 80001d6:	4619      	mov	r1, r3
 80001d8:	4804      	ldr	r0, [pc, #16]	; (80001ec <MX_GPIO_Init+0x90>)
 80001da:	f000 ffbd 	bl	8001158 <HAL_GPIO_Init>

}
 80001de:	bf00      	nop
 80001e0:	3720      	adds	r7, #32
 80001e2:	46bd      	mov	sp, r7
 80001e4:	bd80      	pop	{r7, pc}
 80001e6:	bf00      	nop
 80001e8:	40021000 	.word	0x40021000
 80001ec:	40010800 	.word	0x40010800

080001f0 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80001f0:	b580      	push	{r7, lr}
 80001f2:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 80001f4:	4b12      	ldr	r3, [pc, #72]	; (8000240 <MX_I2C1_Init+0x50>)
 80001f6:	4a13      	ldr	r2, [pc, #76]	; (8000244 <MX_I2C1_Init+0x54>)
 80001f8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80001fa:	4b11      	ldr	r3, [pc, #68]	; (8000240 <MX_I2C1_Init+0x50>)
 80001fc:	4a12      	ldr	r2, [pc, #72]	; (8000248 <MX_I2C1_Init+0x58>)
 80001fe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000200:	4b0f      	ldr	r3, [pc, #60]	; (8000240 <MX_I2C1_Init+0x50>)
 8000202:	2200      	movs	r2, #0
 8000204:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000206:	4b0e      	ldr	r3, [pc, #56]	; (8000240 <MX_I2C1_Init+0x50>)
 8000208:	2200      	movs	r2, #0
 800020a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800020c:	4b0c      	ldr	r3, [pc, #48]	; (8000240 <MX_I2C1_Init+0x50>)
 800020e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000212:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000214:	4b0a      	ldr	r3, [pc, #40]	; (8000240 <MX_I2C1_Init+0x50>)
 8000216:	2200      	movs	r2, #0
 8000218:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800021a:	4b09      	ldr	r3, [pc, #36]	; (8000240 <MX_I2C1_Init+0x50>)
 800021c:	2200      	movs	r2, #0
 800021e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000220:	4b07      	ldr	r3, [pc, #28]	; (8000240 <MX_I2C1_Init+0x50>)
 8000222:	2200      	movs	r2, #0
 8000224:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000226:	4b06      	ldr	r3, [pc, #24]	; (8000240 <MX_I2C1_Init+0x50>)
 8000228:	2200      	movs	r2, #0
 800022a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800022c:	4804      	ldr	r0, [pc, #16]	; (8000240 <MX_I2C1_Init+0x50>)
 800022e:	f001 f905 	bl	800143c <HAL_I2C_Init>
 8000232:	4603      	mov	r3, r0
 8000234:	2b00      	cmp	r3, #0
 8000236:	d001      	beq.n	800023c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000238:	f000 fb09 	bl	800084e <Error_Handler>
  }

}
 800023c:	bf00      	nop
 800023e:	bd80      	pop	{r7, pc}
 8000240:	20000098 	.word	0x20000098
 8000244:	40005400 	.word	0x40005400
 8000248:	000186a0 	.word	0x000186a0

0800024c <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 800024c:	b580      	push	{r7, lr}
 800024e:	af00      	add	r7, sp, #0

  hi2c2.Instance = I2C2;
 8000250:	4b12      	ldr	r3, [pc, #72]	; (800029c <MX_I2C2_Init+0x50>)
 8000252:	4a13      	ldr	r2, [pc, #76]	; (80002a0 <MX_I2C2_Init+0x54>)
 8000254:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8000256:	4b11      	ldr	r3, [pc, #68]	; (800029c <MX_I2C2_Init+0x50>)
 8000258:	4a12      	ldr	r2, [pc, #72]	; (80002a4 <MX_I2C2_Init+0x58>)
 800025a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800025c:	4b0f      	ldr	r3, [pc, #60]	; (800029c <MX_I2C2_Init+0x50>)
 800025e:	2200      	movs	r2, #0
 8000260:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000262:	4b0e      	ldr	r3, [pc, #56]	; (800029c <MX_I2C2_Init+0x50>)
 8000264:	2200      	movs	r2, #0
 8000266:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000268:	4b0c      	ldr	r3, [pc, #48]	; (800029c <MX_I2C2_Init+0x50>)
 800026a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800026e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000270:	4b0a      	ldr	r3, [pc, #40]	; (800029c <MX_I2C2_Init+0x50>)
 8000272:	2200      	movs	r2, #0
 8000274:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000276:	4b09      	ldr	r3, [pc, #36]	; (800029c <MX_I2C2_Init+0x50>)
 8000278:	2200      	movs	r2, #0
 800027a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800027c:	4b07      	ldr	r3, [pc, #28]	; (800029c <MX_I2C2_Init+0x50>)
 800027e:	2200      	movs	r2, #0
 8000280:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000282:	4b06      	ldr	r3, [pc, #24]	; (800029c <MX_I2C2_Init+0x50>)
 8000284:	2200      	movs	r2, #0
 8000286:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000288:	4804      	ldr	r0, [pc, #16]	; (800029c <MX_I2C2_Init+0x50>)
 800028a:	f001 f8d7 	bl	800143c <HAL_I2C_Init>
 800028e:	4603      	mov	r3, r0
 8000290:	2b00      	cmp	r3, #0
 8000292:	d001      	beq.n	8000298 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000294:	f000 fadb 	bl	800084e <Error_Handler>
  }

}
 8000298:	bf00      	nop
 800029a:	bd80      	pop	{r7, pc}
 800029c:	200000ec 	.word	0x200000ec
 80002a0:	40005800 	.word	0x40005800
 80002a4:	00061a80 	.word	0x00061a80

080002a8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	b08a      	sub	sp, #40	; 0x28
 80002ac:	af00      	add	r7, sp, #0
 80002ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002b0:	f107 0318 	add.w	r3, r7, #24
 80002b4:	2200      	movs	r2, #0
 80002b6:	601a      	str	r2, [r3, #0]
 80002b8:	605a      	str	r2, [r3, #4]
 80002ba:	609a      	str	r2, [r3, #8]
 80002bc:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	681b      	ldr	r3, [r3, #0]
 80002c2:	4a2b      	ldr	r2, [pc, #172]	; (8000370 <HAL_I2C_MspInit+0xc8>)
 80002c4:	4293      	cmp	r3, r2
 80002c6:	d124      	bne.n	8000312 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80002c8:	4b2a      	ldr	r3, [pc, #168]	; (8000374 <HAL_I2C_MspInit+0xcc>)
 80002ca:	699b      	ldr	r3, [r3, #24]
 80002cc:	4a29      	ldr	r2, [pc, #164]	; (8000374 <HAL_I2C_MspInit+0xcc>)
 80002ce:	f043 0308 	orr.w	r3, r3, #8
 80002d2:	6193      	str	r3, [r2, #24]
 80002d4:	4b27      	ldr	r3, [pc, #156]	; (8000374 <HAL_I2C_MspInit+0xcc>)
 80002d6:	699b      	ldr	r3, [r3, #24]
 80002d8:	f003 0308 	and.w	r3, r3, #8
 80002dc:	617b      	str	r3, [r7, #20]
 80002de:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80002e0:	23c0      	movs	r3, #192	; 0xc0
 80002e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80002e4:	2312      	movs	r3, #18
 80002e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80002e8:	2303      	movs	r3, #3
 80002ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80002ec:	f107 0318 	add.w	r3, r7, #24
 80002f0:	4619      	mov	r1, r3
 80002f2:	4821      	ldr	r0, [pc, #132]	; (8000378 <HAL_I2C_MspInit+0xd0>)
 80002f4:	f000 ff30 	bl	8001158 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80002f8:	4b1e      	ldr	r3, [pc, #120]	; (8000374 <HAL_I2C_MspInit+0xcc>)
 80002fa:	69db      	ldr	r3, [r3, #28]
 80002fc:	4a1d      	ldr	r2, [pc, #116]	; (8000374 <HAL_I2C_MspInit+0xcc>)
 80002fe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000302:	61d3      	str	r3, [r2, #28]
 8000304:	4b1b      	ldr	r3, [pc, #108]	; (8000374 <HAL_I2C_MspInit+0xcc>)
 8000306:	69db      	ldr	r3, [r3, #28]
 8000308:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800030c:	613b      	str	r3, [r7, #16]
 800030e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000310:	e029      	b.n	8000366 <HAL_I2C_MspInit+0xbe>
  else if(i2cHandle->Instance==I2C2)
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	681b      	ldr	r3, [r3, #0]
 8000316:	4a19      	ldr	r2, [pc, #100]	; (800037c <HAL_I2C_MspInit+0xd4>)
 8000318:	4293      	cmp	r3, r2
 800031a:	d124      	bne.n	8000366 <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800031c:	4b15      	ldr	r3, [pc, #84]	; (8000374 <HAL_I2C_MspInit+0xcc>)
 800031e:	699b      	ldr	r3, [r3, #24]
 8000320:	4a14      	ldr	r2, [pc, #80]	; (8000374 <HAL_I2C_MspInit+0xcc>)
 8000322:	f043 0308 	orr.w	r3, r3, #8
 8000326:	6193      	str	r3, [r2, #24]
 8000328:	4b12      	ldr	r3, [pc, #72]	; (8000374 <HAL_I2C_MspInit+0xcc>)
 800032a:	699b      	ldr	r3, [r3, #24]
 800032c:	f003 0308 	and.w	r3, r3, #8
 8000330:	60fb      	str	r3, [r7, #12]
 8000332:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000334:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000338:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800033a:	2312      	movs	r3, #18
 800033c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800033e:	2303      	movs	r3, #3
 8000340:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000342:	f107 0318 	add.w	r3, r7, #24
 8000346:	4619      	mov	r1, r3
 8000348:	480b      	ldr	r0, [pc, #44]	; (8000378 <HAL_I2C_MspInit+0xd0>)
 800034a:	f000 ff05 	bl	8001158 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800034e:	4b09      	ldr	r3, [pc, #36]	; (8000374 <HAL_I2C_MspInit+0xcc>)
 8000350:	69db      	ldr	r3, [r3, #28]
 8000352:	4a08      	ldr	r2, [pc, #32]	; (8000374 <HAL_I2C_MspInit+0xcc>)
 8000354:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000358:	61d3      	str	r3, [r2, #28]
 800035a:	4b06      	ldr	r3, [pc, #24]	; (8000374 <HAL_I2C_MspInit+0xcc>)
 800035c:	69db      	ldr	r3, [r3, #28]
 800035e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000362:	60bb      	str	r3, [r7, #8]
 8000364:	68bb      	ldr	r3, [r7, #8]
}
 8000366:	bf00      	nop
 8000368:	3728      	adds	r7, #40	; 0x28
 800036a:	46bd      	mov	sp, r7
 800036c:	bd80      	pop	{r7, pc}
 800036e:	bf00      	nop
 8000370:	40005400 	.word	0x40005400
 8000374:	40021000 	.word	0x40021000
 8000378:	40010c00 	.word	0x40010c00
 800037c:	40005800 	.word	0x40005800

08000380 <lcd_set_e>:
static void lcd_nibble(lcd_t *l, uint8_t nibble);
static void  lcd_byte(lcd_t *l , uint8_t byte, uint8_t dc);


// E
static void lcd_set_e(lcd_t *l){
 8000380:	b580      	push	{r7, lr}
 8000382:	b082      	sub	sp, #8
 8000384:	af00      	add	r7, sp, #0
 8000386:	6078      	str	r0, [r7, #4]
	l->iostate |= (1<<E_PIN);
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	785b      	ldrb	r3, [r3, #1]
 800038c:	f043 0304 	orr.w	r3, r3, #4
 8000390:	b2da      	uxtb	r2, r3
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	705a      	strb	r2, [r3, #1]
	lcd_pcf8574_write(l,l->iostate);
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	785b      	ldrb	r3, [r3, #1]
 800039a:	4619      	mov	r1, r3
 800039c:	6878      	ldr	r0, [r7, #4]
 800039e:	f000 f879 	bl	8000494 <lcd_pcf8574_write>
}
 80003a2:	bf00      	nop
 80003a4:	3708      	adds	r7, #8
 80003a6:	46bd      	mov	sp, r7
 80003a8:	bd80      	pop	{r7, pc}

080003aa <lcd_reset_e>:
static void lcd_reset_e(lcd_t *l){
 80003aa:	b580      	push	{r7, lr}
 80003ac:	b082      	sub	sp, #8
 80003ae:	af00      	add	r7, sp, #0
 80003b0:	6078      	str	r0, [r7, #4]
	l->iostate &=~(1<<E_PIN);
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	785b      	ldrb	r3, [r3, #1]
 80003b6:	f023 0304 	bic.w	r3, r3, #4
 80003ba:	b2da      	uxtb	r2, r3
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	705a      	strb	r2, [r3, #1]
	lcd_pcf8574_write(l,l->iostate);
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	785b      	ldrb	r3, [r3, #1]
 80003c4:	4619      	mov	r1, r3
 80003c6:	6878      	ldr	r0, [r7, #4]
 80003c8:	f000 f864 	bl	8000494 <lcd_pcf8574_write>
}
 80003cc:	bf00      	nop
 80003ce:	3708      	adds	r7, #8
 80003d0:	46bd      	mov	sp, r7
 80003d2:	bd80      	pop	{r7, pc}

080003d4 <lcd_set_rs>:
static void lcd_reset_rw(lcd_t *l){
	l->iostate &=~(1<<RW_PIN);
	lcd_pcf8574_write(l,l->iostate);
}
// RS
static void lcd_set_rs(lcd_t *l){
 80003d4:	b580      	push	{r7, lr}
 80003d6:	b082      	sub	sp, #8
 80003d8:	af00      	add	r7, sp, #0
 80003da:	6078      	str	r0, [r7, #4]
	l->iostate |= (1<<RS_PIN);
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	785b      	ldrb	r3, [r3, #1]
 80003e0:	f043 0301 	orr.w	r3, r3, #1
 80003e4:	b2da      	uxtb	r2, r3
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	705a      	strb	r2, [r3, #1]
	lcd_pcf8574_write(l,l->iostate);
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	785b      	ldrb	r3, [r3, #1]
 80003ee:	4619      	mov	r1, r3
 80003f0:	6878      	ldr	r0, [r7, #4]
 80003f2:	f000 f84f 	bl	8000494 <lcd_pcf8574_write>
}
 80003f6:	bf00      	nop
 80003f8:	3708      	adds	r7, #8
 80003fa:	46bd      	mov	sp, r7
 80003fc:	bd80      	pop	{r7, pc}

080003fe <lcd_reset_rs>:
static void lcd_reset_rs(lcd_t *l){
 80003fe:	b580      	push	{r7, lr}
 8000400:	b082      	sub	sp, #8
 8000402:	af00      	add	r7, sp, #0
 8000404:	6078      	str	r0, [r7, #4]
	l->iostate &=~(1<<RS_PIN);
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	785b      	ldrb	r3, [r3, #1]
 800040a:	f023 0301 	bic.w	r3, r3, #1
 800040e:	b2da      	uxtb	r2, r3
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	705a      	strb	r2, [r3, #1]
	lcd_pcf8574_write(l,l->iostate);
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	785b      	ldrb	r3, [r3, #1]
 8000418:	4619      	mov	r1, r3
 800041a:	6878      	ldr	r0, [r7, #4]
 800041c:	f000 f83a 	bl	8000494 <lcd_pcf8574_write>
}
 8000420:	bf00      	nop
 8000422:	3708      	adds	r7, #8
 8000424:	46bd      	mov	sp, r7
 8000426:	bd80      	pop	{r7, pc}

08000428 <lcd_set_led>:
// LED
static void lcd_set_led(lcd_t *l){
 8000428:	b580      	push	{r7, lr}
 800042a:	b082      	sub	sp, #8
 800042c:	af00      	add	r7, sp, #0
 800042e:	6078      	str	r0, [r7, #4]
	l->iostate |= (1<<LED_PIN);
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	785b      	ldrb	r3, [r3, #1]
 8000434:	f043 0308 	orr.w	r3, r3, #8
 8000438:	b2da      	uxtb	r2, r3
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	705a      	strb	r2, [r3, #1]
	lcd_pcf8574_write(l,l->iostate);
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	785b      	ldrb	r3, [r3, #1]
 8000442:	4619      	mov	r1, r3
 8000444:	6878      	ldr	r0, [r7, #4]
 8000446:	f000 f825 	bl	8000494 <lcd_pcf8574_write>
}
 800044a:	bf00      	nop
 800044c:	3708      	adds	r7, #8
 800044e:	46bd      	mov	sp, r7
 8000450:	bd80      	pop	{r7, pc}

08000452 <_delay>:
	lcd_pcf8574_write(l,l->iostate);
}



void _delay(uint32_t cnt){
 8000452:	b480      	push	{r7}
 8000454:	b083      	sub	sp, #12
 8000456:	af00      	add	r7, sp, #0
 8000458:	6078      	str	r0, [r7, #4]
	while(cnt){
 800045a:	e00b      	b.n	8000474 <_delay+0x22>
		asm("nop");
 800045c:	bf00      	nop
		asm("nop");
 800045e:	bf00      	nop
		asm("nop");
 8000460:	bf00      	nop
		asm("nop");
 8000462:	bf00      	nop
		asm("nop");
 8000464:	bf00      	nop
		asm("nop");
 8000466:	bf00      	nop
		asm("nop");
 8000468:	bf00      	nop
		asm("nop");
 800046a:	bf00      	nop
		asm("nop");
 800046c:	bf00      	nop
		cnt--;
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	3b01      	subs	r3, #1
 8000472:	607b      	str	r3, [r7, #4]
	while(cnt){
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	2b00      	cmp	r3, #0
 8000478:	d1f0      	bne.n	800045c <_delay+0xa>
	}
}
 800047a:	bf00      	nop
 800047c:	370c      	adds	r7, #12
 800047e:	46bd      	mov	sp, r7
 8000480:	bc80      	pop	{r7}
 8000482:	4770      	bx	lr

08000484 <lcd_delay>:


void lcd_delay(){
 8000484:	b580      	push	{r7, lr}
 8000486:	af00      	add	r7, sp, #0
	//_delay(10000); // ~1,2ms
	_delay(10000); // 0,12ms
 8000488:	f242 7010 	movw	r0, #10000	; 0x2710
 800048c:	f7ff ffe1 	bl	8000452 <_delay>
}
 8000490:	bf00      	nop
 8000492:	bd80      	pop	{r7, pc}

08000494 <lcd_pcf8574_write>:



void lcd_pcf8574_write(lcd_t *s, uint8_t data){
 8000494:	b580      	push	{r7, lr}
 8000496:	b086      	sub	sp, #24
 8000498:	af02      	add	r7, sp, #8
 800049a:	6078      	str	r0, [r7, #4]
 800049c:	460b      	mov	r3, r1
 800049e:	70fb      	strb	r3, [r7, #3]
	s->iostate=data;
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	78fa      	ldrb	r2, [r7, #3]
 80004a4:	705a      	strb	r2, [r3, #1]
	uint8_t error=0;
 80004a6:	2300      	movs	r3, #0
 80004a8:	73fb      	strb	r3, [r7, #15]
	//vTaskSuspendAll();
	error = HAL_I2C_Master_Transmit(s->hi2c, (uint16_t)s->addr, &s->iostate, 1, 100);
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	6858      	ldr	r0, [r3, #4]
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	781b      	ldrb	r3, [r3, #0]
 80004b2:	b299      	uxth	r1, r3
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	1c5a      	adds	r2, r3, #1
 80004b8:	2364      	movs	r3, #100	; 0x64
 80004ba:	9300      	str	r3, [sp, #0]
 80004bc:	2301      	movs	r3, #1
 80004be:	f001 f8f5 	bl	80016ac <HAL_I2C_Master_Transmit>
 80004c2:	4603      	mov	r3, r0
 80004c4:	73fb      	strb	r3, [r7, #15]
	//xTaskResumeAll();
	(void)error;
	if(error!=0) dbg("eeror %d",error);
 80004c6:	7bfb      	ldrb	r3, [r7, #15]
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	d004      	beq.n	80004d6 <lcd_pcf8574_write+0x42>
 80004cc:	7bfb      	ldrb	r3, [r7, #15]
 80004ce:	4619      	mov	r1, r3
 80004d0:	4803      	ldr	r0, [pc, #12]	; (80004e0 <lcd_pcf8574_write+0x4c>)
 80004d2:	f000 fc17 	bl	8000d04 <dbg>

}
 80004d6:	bf00      	nop
 80004d8:	3710      	adds	r7, #16
 80004da:	46bd      	mov	sp, r7
 80004dc:	bd80      	pop	{r7, pc}
 80004de:	bf00      	nop
 80004e0:	08003a5c 	.word	0x08003a5c

080004e4 <lcd_nibble>:


void lcd_nibble(lcd_t *l, uint8_t nibble){
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b082      	sub	sp, #8
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]
 80004ec:	460b      	mov	r3, r1
 80004ee:	70fb      	strb	r3, [r7, #3]
	nibble=nibble<<4;
 80004f0:	78fb      	ldrb	r3, [r7, #3]
 80004f2:	011b      	lsls	r3, r3, #4
 80004f4:	70fb      	strb	r3, [r7, #3]
	lcd_set_e(l);
 80004f6:	6878      	ldr	r0, [r7, #4]
 80004f8:	f7ff ff42 	bl	8000380 <lcd_set_e>
	lcd_delay();
 80004fc:	f7ff ffc2 	bl	8000484 <lcd_delay>
	l->iostate&=0x0F;
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	785b      	ldrb	r3, [r3, #1]
 8000504:	f003 030f 	and.w	r3, r3, #15
 8000508:	b2da      	uxtb	r2, r3
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	705a      	strb	r2, [r3, #1]
	l->iostate|=nibble;
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	785a      	ldrb	r2, [r3, #1]
 8000512:	78fb      	ldrb	r3, [r7, #3]
 8000514:	4313      	orrs	r3, r2
 8000516:	b2da      	uxtb	r2, r3
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	705a      	strb	r2, [r3, #1]
	lcd_pcf8574_write(l,l->iostate);
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	785b      	ldrb	r3, [r3, #1]
 8000520:	4619      	mov	r1, r3
 8000522:	6878      	ldr	r0, [r7, #4]
 8000524:	f7ff ffb6 	bl	8000494 <lcd_pcf8574_write>
	lcd_delay();
 8000528:	f7ff ffac 	bl	8000484 <lcd_delay>
	lcd_reset_e(l);
 800052c:	6878      	ldr	r0, [r7, #4]
 800052e:	f7ff ff3c 	bl	80003aa <lcd_reset_e>
}
 8000532:	bf00      	nop
 8000534:	3708      	adds	r7, #8
 8000536:	46bd      	mov	sp, r7
 8000538:	bd80      	pop	{r7, pc}

0800053a <lcd_byte>:

static void lcd_byte(lcd_t *l , uint8_t byte, uint8_t dc){
 800053a:	b580      	push	{r7, lr}
 800053c:	b082      	sub	sp, #8
 800053e:	af00      	add	r7, sp, #0
 8000540:	6078      	str	r0, [r7, #4]
 8000542:	460b      	mov	r3, r1
 8000544:	70fb      	strb	r3, [r7, #3]
 8000546:	4613      	mov	r3, r2
 8000548:	70bb      	strb	r3, [r7, #2]
	if(dc==0){
 800054a:	78bb      	ldrb	r3, [r7, #2]
 800054c:	2b00      	cmp	r3, #0
 800054e:	d103      	bne.n	8000558 <lcd_byte+0x1e>
		lcd_reset_rs(l);
 8000550:	6878      	ldr	r0, [r7, #4]
 8000552:	f7ff ff54 	bl	80003fe <lcd_reset_rs>
 8000556:	e002      	b.n	800055e <lcd_byte+0x24>
	}
	else
		lcd_set_rs(l);
 8000558:	6878      	ldr	r0, [r7, #4]
 800055a:	f7ff ff3b 	bl	80003d4 <lcd_set_rs>

	lcd_nibble(l,byte>>4);
 800055e:	78fb      	ldrb	r3, [r7, #3]
 8000560:	091b      	lsrs	r3, r3, #4
 8000562:	b2db      	uxtb	r3, r3
 8000564:	4619      	mov	r1, r3
 8000566:	6878      	ldr	r0, [r7, #4]
 8000568:	f7ff ffbc 	bl	80004e4 <lcd_nibble>
	lcd_nibble(l,byte);
 800056c:	78fb      	ldrb	r3, [r7, #3]
 800056e:	4619      	mov	r1, r3
 8000570:	6878      	ldr	r0, [r7, #4]
 8000572:	f7ff ffb7 	bl	80004e4 <lcd_nibble>
}
 8000576:	bf00      	nop
 8000578:	3708      	adds	r7, #8
 800057a:	46bd      	mov	sp, r7
 800057c:	bd80      	pop	{r7, pc}

0800057e <lcd_init>:




void lcd_init(lcd_t *lcd,uint8_t addr,I2C_HandleTypeDef *hi2c){
 800057e:	b580      	push	{r7, lr}
 8000580:	b084      	sub	sp, #16
 8000582:	af00      	add	r7, sp, #0
 8000584:	60f8      	str	r0, [r7, #12]
 8000586:	460b      	mov	r3, r1
 8000588:	607a      	str	r2, [r7, #4]
 800058a:	72fb      	strb	r3, [r7, #11]
	(void)&lcd_reset_rw;
	(void)&lcd_reset_led;


	// init pcf struct
	lcd->addr=addr;
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	7afa      	ldrb	r2, [r7, #11]
 8000590:	701a      	strb	r2, [r3, #0]
	lcd->hi2c=hi2c;
 8000592:	68fb      	ldr	r3, [r7, #12]
 8000594:	687a      	ldr	r2, [r7, #4]
 8000596:	605a      	str	r2, [r3, #4]
	lcd->iostate=0;
 8000598:	68fb      	ldr	r3, [r7, #12]
 800059a:	2200      	movs	r2, #0
 800059c:	705a      	strb	r2, [r3, #1]

	lcd_set_led(lcd);
 800059e:	68f8      	ldr	r0, [r7, #12]
 80005a0:	f7ff ff42 	bl	8000428 <lcd_set_led>

	HAL_Delay(15); //wait to power up
 80005a4:	200f      	movs	r0, #15
 80005a6:	f000 fcd1 	bl	8000f4c <HAL_Delay>

	lcd_nibble(lcd,0x03);
 80005aa:	2103      	movs	r1, #3
 80005ac:	68f8      	ldr	r0, [r7, #12]
 80005ae:	f7ff ff99 	bl	80004e4 <lcd_nibble>
	HAL_Delay(45);
 80005b2:	202d      	movs	r0, #45	; 0x2d
 80005b4:	f000 fcca 	bl	8000f4c <HAL_Delay>
	lcd_nibble(lcd,0x03);
 80005b8:	2103      	movs	r1, #3
 80005ba:	68f8      	ldr	r0, [r7, #12]
 80005bc:	f7ff ff92 	bl	80004e4 <lcd_nibble>
	HAL_Delay(45);
 80005c0:	202d      	movs	r0, #45	; 0x2d
 80005c2:	f000 fcc3 	bl	8000f4c <HAL_Delay>
	lcd_nibble(lcd,0x03);
 80005c6:	2103      	movs	r1, #3
 80005c8:	68f8      	ldr	r0, [r7, #12]
 80005ca:	f7ff ff8b 	bl	80004e4 <lcd_nibble>
	HAL_Delay(45);
 80005ce:	202d      	movs	r0, #45	; 0x2d
 80005d0:	f000 fcbc 	bl	8000f4c <HAL_Delay>
	lcd_nibble(lcd,0x02);
 80005d4:	2102      	movs	r1, #2
 80005d6:	68f8      	ldr	r0, [r7, #12]
 80005d8:	f7ff ff84 	bl	80004e4 <lcd_nibble>
	HAL_Delay(100);
 80005dc:	2064      	movs	r0, #100	; 0x64
 80005de:	f000 fcb5 	bl	8000f4c <HAL_Delay>

	lcd_byte(lcd,0b00101000,0);
 80005e2:	2200      	movs	r2, #0
 80005e4:	2128      	movs	r1, #40	; 0x28
 80005e6:	68f8      	ldr	r0, [r7, #12]
 80005e8:	f7ff ffa7 	bl	800053a <lcd_byte>
	lcd_byte(lcd,0b00001100,0);
 80005ec:	2200      	movs	r2, #0
 80005ee:	210c      	movs	r1, #12
 80005f0:	68f8      	ldr	r0, [r7, #12]
 80005f2:	f7ff ffa2 	bl	800053a <lcd_byte>
	lcd_byte(lcd,0b00000110,0);
 80005f6:	2200      	movs	r2, #0
 80005f8:	2106      	movs	r1, #6
 80005fa:	68f8      	ldr	r0, [r7, #12]
 80005fc:	f7ff ff9d 	bl	800053a <lcd_byte>


	lcd_byte(lcd,0x01,0); // clear lcd
 8000600:	2200      	movs	r2, #0
 8000602:	2101      	movs	r1, #1
 8000604:	68f8      	ldr	r0, [r7, #12]
 8000606:	f7ff ff98 	bl	800053a <lcd_byte>
}
 800060a:	bf00      	nop
 800060c:	3710      	adds	r7, #16
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}

08000612 <lcd_clear>:

void lcd_clear(lcd_t *lcd){
 8000612:	b580      	push	{r7, lr}
 8000614:	b082      	sub	sp, #8
 8000616:	af00      	add	r7, sp, #0
 8000618:	6078      	str	r0, [r7, #4]
	lcd_byte(lcd,0x01,0);
 800061a:	2200      	movs	r2, #0
 800061c:	2101      	movs	r1, #1
 800061e:	6878      	ldr	r0, [r7, #4]
 8000620:	f7ff ff8b 	bl	800053a <lcd_byte>
}
 8000624:	bf00      	nop
 8000626:	3708      	adds	r7, #8
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}

0800062c <lcd_char>:

void lcd_char(lcd_t *lcd, char c){
 800062c:	b580      	push	{r7, lr}
 800062e:	b082      	sub	sp, #8
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
 8000634:	460b      	mov	r3, r1
 8000636:	70fb      	strb	r3, [r7, #3]
	lcd_byte(lcd,c,1);
 8000638:	78fb      	ldrb	r3, [r7, #3]
 800063a:	2201      	movs	r2, #1
 800063c:	4619      	mov	r1, r3
 800063e:	6878      	ldr	r0, [r7, #4]
 8000640:	f7ff ff7b 	bl	800053a <lcd_byte>
}
 8000644:	bf00      	nop
 8000646:	3708      	adds	r7, #8
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}

0800064c <lcd_string>:

void lcd_string(lcd_t *lcd, char *string){
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
 8000654:	6039      	str	r1, [r7, #0]
	while(*string) lcd_char(lcd,*string++);
 8000656:	e007      	b.n	8000668 <lcd_string+0x1c>
 8000658:	683b      	ldr	r3, [r7, #0]
 800065a:	1c5a      	adds	r2, r3, #1
 800065c:	603a      	str	r2, [r7, #0]
 800065e:	781b      	ldrb	r3, [r3, #0]
 8000660:	4619      	mov	r1, r3
 8000662:	6878      	ldr	r0, [r7, #4]
 8000664:	f7ff ffe2 	bl	800062c <lcd_char>
 8000668:	683b      	ldr	r3, [r7, #0]
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	2b00      	cmp	r3, #0
 800066e:	d1f3      	bne.n	8000658 <lcd_string+0xc>
}
 8000670:	bf00      	nop
 8000672:	3708      	adds	r7, #8
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}

08000678 <lcd_pos>:
	lcd_string(lcd,buffer);
}


// TODO: tests
void lcd_pos(lcd_t *lcd, int x, int y) {
 8000678:	b580      	push	{r7, lr}
 800067a:	b084      	sub	sp, #16
 800067c:	af00      	add	r7, sp, #0
 800067e:	60f8      	str	r0, [r7, #12]
 8000680:	60b9      	str	r1, [r7, #8]
 8000682:	607a      	str	r2, [r7, #4]
	switch (y) {
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	2b00      	cmp	r3, #0
 8000688:	d002      	beq.n	8000690 <lcd_pos+0x18>
 800068a:	2b01      	cmp	r3, #1
 800068c:	d00f      	beq.n	80006ae <lcd_pos+0x36>
	case 1:
		lcd_byte(lcd, (0x40 + x) | 0x80 , 0);
		HAL_Delay(1);
		break;
	}
}
 800068e:	e020      	b.n	80006d2 <lcd_pos+0x5a>
		lcd_byte(lcd, x | 0x80 , 0);
 8000690:	68bb      	ldr	r3, [r7, #8]
 8000692:	b25b      	sxtb	r3, r3
 8000694:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000698:	b25b      	sxtb	r3, r3
 800069a:	b2db      	uxtb	r3, r3
 800069c:	2200      	movs	r2, #0
 800069e:	4619      	mov	r1, r3
 80006a0:	68f8      	ldr	r0, [r7, #12]
 80006a2:	f7ff ff4a 	bl	800053a <lcd_byte>
		HAL_Delay(1);
 80006a6:	2001      	movs	r0, #1
 80006a8:	f000 fc50 	bl	8000f4c <HAL_Delay>
		break;
 80006ac:	e011      	b.n	80006d2 <lcd_pos+0x5a>
		lcd_byte(lcd, (0x40 + x) | 0x80 , 0);
 80006ae:	68bb      	ldr	r3, [r7, #8]
 80006b0:	b2db      	uxtb	r3, r3
 80006b2:	3340      	adds	r3, #64	; 0x40
 80006b4:	b2db      	uxtb	r3, r3
 80006b6:	b25b      	sxtb	r3, r3
 80006b8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80006bc:	b25b      	sxtb	r3, r3
 80006be:	b2db      	uxtb	r3, r3
 80006c0:	2200      	movs	r2, #0
 80006c2:	4619      	mov	r1, r3
 80006c4:	68f8      	ldr	r0, [r7, #12]
 80006c6:	f7ff ff38 	bl	800053a <lcd_byte>
		HAL_Delay(1);
 80006ca:	2001      	movs	r0, #1
 80006cc:	f000 fc3e 	bl	8000f4c <HAL_Delay>
		break;
 80006d0:	bf00      	nop
}
 80006d2:	bf00      	nop
 80006d4:	3710      	adds	r7, #16
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}
	...

080006dc <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006e0:	f000 fbd2 	bl	8000e88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006e4:	f000 f86e 	bl	80007c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006e8:	f7ff fd38 	bl	800015c <MX_GPIO_Init>
  MX_I2C2_Init();
 80006ec:	f7ff fdae 	bl	800024c <MX_I2C2_Init>
  MX_USART1_UART_Init();
 80006f0:	f000 fb2e 	bl	8000d50 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 80006f4:	f7ff fd7c 	bl	80001f0 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  uart_dbg_init(&huart1);
 80006f8:	4826      	ldr	r0, [pc, #152]	; (8000794 <main+0xb8>)
 80006fa:	f000 fac5 	bl	8000c88 <uart_dbg_init>
  clear_console();
 80006fe:	f000 fb13 	bl	8000d28 <clear_console>
  dbg("Start!\n\r");
 8000702:	4825      	ldr	r0, [pc, #148]	; (8000798 <main+0xbc>)
 8000704:	f000 fafe 	bl	8000d04 <dbg>

  lcd_init(&lcd, LCD_I2C_ADDRESS << 1, LCD_I2C_HANDLER);
 8000708:	4a24      	ldr	r2, [pc, #144]	; (800079c <main+0xc0>)
 800070a:	217e      	movs	r1, #126	; 0x7e
 800070c:	4824      	ldr	r0, [pc, #144]	; (80007a0 <main+0xc4>)
 800070e:	f7ff ff36 	bl	800057e <lcd_init>
  lcd_string(&lcd, "RADIO 65-108MHz");
 8000712:	4924      	ldr	r1, [pc, #144]	; (80007a4 <main+0xc8>)
 8000714:	4822      	ldr	r0, [pc, #136]	; (80007a0 <main+0xc4>)
 8000716:	f7ff ff99 	bl	800064c <lcd_string>
  lcd_pos(&lcd, 0, 1);
 800071a:	2201      	movs	r2, #1
 800071c:	2100      	movs	r1, #0
 800071e:	4820      	ldr	r0, [pc, #128]	; (80007a0 <main+0xc4>)
 8000720:	f7ff ffaa 	bl	8000678 <lcd_pos>
  lcd_string(&lcd, "INICJALIZACJA");
 8000724:	4920      	ldr	r1, [pc, #128]	; (80007a8 <main+0xcc>)
 8000726:	481e      	ldr	r0, [pc, #120]	; (80007a0 <main+0xc4>)
 8000728:	f7ff ff90 	bl	800064c <lcd_string>

  if (rda5807_init(&hi2c2) == RDA5807_NOT_FOUND) {
 800072c:	481f      	ldr	r0, [pc, #124]	; (80007ac <main+0xd0>)
 800072e:	f000 f895 	bl	800085c <rda5807_init>
 8000732:	4603      	mov	r3, r0
 8000734:	f113 0f02 	cmn.w	r3, #2
 8000738:	d103      	bne.n	8000742 <main+0x66>
    dbg("RDA5807 module not found!\n\r");
 800073a:	481d      	ldr	r0, [pc, #116]	; (80007b0 <main+0xd4>)
 800073c:	f000 fae2 	bl	8000d04 <dbg>
    while (1)
 8000740:	e7fe      	b.n	8000740 <main+0x64>
      ;
  } else {
    dbg("RDA5807 module found!\n\r");
 8000742:	481c      	ldr	r0, [pc, #112]	; (80007b4 <main+0xd8>)
 8000744:	f000 fade 	bl	8000d04 <dbg>
  }

  //rda5807_read_status_ex();
  HAL_Delay(3000);
 8000748:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800074c:	f000 fbfe 	bl	8000f4c <HAL_Delay>
  rda5807_read_status();
 8000750:	f000 f950 	bl	80009f4 <rda5807_read_status>

  dbg("freq = %d", rda5807_get_frequency());
 8000754:	f000 f992 	bl	8000a7c <rda5807_get_frequency>
 8000758:	4603      	mov	r3, r0
 800075a:	4619      	mov	r1, r3
 800075c:	4816      	ldr	r0, [pc, #88]	; (80007b8 <main+0xdc>)
 800075e:	f000 fad1 	bl	8000d04 <dbg>

  lcd_clear(&lcd);
 8000762:	480f      	ldr	r0, [pc, #60]	; (80007a0 <main+0xc4>)
 8000764:	f7ff ff55 	bl	8000612 <lcd_clear>
  /* USER CODE BEGIN WHILE */
  while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    HAL_Delay(1000);
 8000768:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800076c:	f000 fbee 	bl	8000f4c <HAL_Delay>
    rda5807_read_status();
 8000770:	f000 f940 	bl	80009f4 <rda5807_read_status>
    dbg("RSSI = %d\n\r", rda5807_get_rssi());
 8000774:	f000 f9e2 	bl	8000b3c <rda5807_get_rssi>
 8000778:	4603      	mov	r3, r0
 800077a:	4619      	mov	r1, r3
 800077c:	480f      	ldr	r0, [pc, #60]	; (80007bc <main+0xe0>)
 800077e:	f000 fac1 	bl	8000d04 <dbg>
    dbg("FREQ = %d\n\r", rda5807_get_frequency());
 8000782:	f000 f97b 	bl	8000a7c <rda5807_get_frequency>
 8000786:	4603      	mov	r3, r0
 8000788:	4619      	mov	r1, r3
 800078a:	480d      	ldr	r0, [pc, #52]	; (80007c0 <main+0xe4>)
 800078c:	f000 faba 	bl	8000d04 <dbg>
    HAL_Delay(1000);
 8000790:	e7ea      	b.n	8000768 <main+0x8c>
 8000792:	bf00      	nop
 8000794:	20000204 	.word	0x20000204
 8000798:	08003a7c 	.word	0x08003a7c
 800079c:	20000098 	.word	0x20000098
 80007a0:	20000140 	.word	0x20000140
 80007a4:	08003a88 	.word	0x08003a88
 80007a8:	08003a98 	.word	0x08003a98
 80007ac:	200000ec 	.word	0x200000ec
 80007b0:	08003aa8 	.word	0x08003aa8
 80007b4:	08003ac4 	.word	0x08003ac4
 80007b8:	08003adc 	.word	0x08003adc
 80007bc:	08003ae8 	.word	0x08003ae8
 80007c0:	08003af4 	.word	0x08003af4

080007c4 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b090      	sub	sp, #64	; 0x40
 80007c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80007ca:	f107 0318 	add.w	r3, r7, #24
 80007ce:	2228      	movs	r2, #40	; 0x28
 80007d0:	2100      	movs	r1, #0
 80007d2:	4618      	mov	r0, r3
 80007d4:	f002 fd25 	bl	8003222 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80007d8:	1d3b      	adds	r3, r7, #4
 80007da:	2200      	movs	r2, #0
 80007dc:	601a      	str	r2, [r3, #0]
 80007de:	605a      	str	r2, [r3, #4]
 80007e0:	609a      	str	r2, [r3, #8]
 80007e2:	60da      	str	r2, [r3, #12]
 80007e4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007e6:	2301      	movs	r3, #1
 80007e8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007ea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007ee:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80007f0:	2300      	movs	r3, #0
 80007f2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007f4:	2301      	movs	r3, #1
 80007f6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007f8:	2302      	movs	r3, #2
 80007fa:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007fc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000800:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000802:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000806:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000808:	f107 0318 	add.w	r3, r7, #24
 800080c:	4618      	mov	r0, r3
 800080e:	f001 feff 	bl	8002610 <HAL_RCC_OscConfig>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d001      	beq.n	800081c <SystemClock_Config+0x58>
    Error_Handler();
 8000818:	f000 f819 	bl	800084e <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800081c:	230f      	movs	r3, #15
 800081e:	607b      	str	r3, [r7, #4]
      | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000820:	2302      	movs	r3, #2
 8000822:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000824:	2300      	movs	r3, #0
 8000826:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000828:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800082c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800082e:	2300      	movs	r3, #0
 8000830:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000832:	1d3b      	adds	r3, r7, #4
 8000834:	2102      	movs	r1, #2
 8000836:	4618      	mov	r0, r3
 8000838:	f002 f96a 	bl	8002b10 <HAL_RCC_ClockConfig>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <SystemClock_Config+0x82>
    Error_Handler();
 8000842:	f000 f804 	bl	800084e <Error_Handler>
  }
}
 8000846:	bf00      	nop
 8000848:	3740      	adds	r7, #64	; 0x40
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}

0800084e <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800084e:	b480      	push	{r7}
 8000850:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000852:	bf00      	nop
 8000854:	46bd      	mov	sp, r7
 8000856:	bc80      	pop	{r7}
 8000858:	4770      	bx	lr
	...

0800085c <rda5807_init>:
uint16_t frequency;
uint16_t band;
uint8_t spacing = SPACING_100KHZ;
uint8_t volume;

int8_t rda5807_init(I2C_HandleTypeDef *i2c_h) {
 800085c:	b580      	push	{r7, lr}
 800085e:	b082      	sub	sp, #8
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
  // check is RDA I2C working
  if (rda5807_check_is_connected(i2c_h) == RDA5807_NOT_FOUND) {
 8000864:	6878      	ldr	r0, [r7, #4]
 8000866:	f000 f877 	bl	8000958 <rda5807_check_is_connected>
 800086a:	4603      	mov	r3, r0
 800086c:	f113 0f02 	cmn.w	r3, #2
 8000870:	d102      	bne.n	8000878 <rda5807_init+0x1c>
    return RDA5807_NOT_FOUND;
 8000872:	f06f 0301 	mvn.w	r3, #1
 8000876:	e067      	b.n	8000948 <rda5807_init+0xec>
  }
  rdahi2c = *i2c_h;
 8000878:	4a35      	ldr	r2, [pc, #212]	; (8000950 <rda5807_init+0xf4>)
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	4610      	mov	r0, r2
 800087e:	4619      	mov	r1, r3
 8000880:	2354      	movs	r3, #84	; 0x54
 8000882:	461a      	mov	r2, r3
 8000884:	f002 fcc2 	bl	800320c <memcpy>

  // set init values of registers
  rda5807_config.reg02.refined.DMUTE = 1;
 8000888:	4a32      	ldr	r2, [pc, #200]	; (8000954 <rda5807_init+0xf8>)
 800088a:	7953      	ldrb	r3, [r2, #5]
 800088c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000890:	7153      	strb	r3, [r2, #5]
  rda5807_config.reg02.refined.DHIZ = 1;
 8000892:	4a30      	ldr	r2, [pc, #192]	; (8000954 <rda5807_init+0xf8>)
 8000894:	7953      	ldrb	r3, [r2, #5]
 8000896:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800089a:	7153      	strb	r3, [r2, #5]
  rda5807_config.reg02.refined.ENABLE = 1;
 800089c:	4a2d      	ldr	r2, [pc, #180]	; (8000954 <rda5807_init+0xf8>)
 800089e:	7913      	ldrb	r3, [r2, #4]
 80008a0:	f043 0301 	orr.w	r3, r3, #1
 80008a4:	7113      	strb	r3, [r2, #4]
  rda5807_config.reg02.refined.BASS = 1;
 80008a6:	4a2b      	ldr	r2, [pc, #172]	; (8000954 <rda5807_init+0xf8>)
 80008a8:	7953      	ldrb	r3, [r2, #5]
 80008aa:	f043 0310 	orr.w	r3, r3, #16
 80008ae:	7153      	strb	r3, [r2, #5]
  rda5807_config.reg02.refined.SEEK = 1;
 80008b0:	4a28      	ldr	r2, [pc, #160]	; (8000954 <rda5807_init+0xf8>)
 80008b2:	7953      	ldrb	r3, [r2, #5]
 80008b4:	f043 0301 	orr.w	r3, r3, #1
 80008b8:	7153      	strb	r3, [r2, #5]
  //rda5807_config.reg02.refined.RDS_EN = 1;
  rda5807_config.reg02.refined.NEW_METHOD = 1;
 80008ba:	4a26      	ldr	r2, [pc, #152]	; (8000954 <rda5807_init+0xf8>)
 80008bc:	7913      	ldrb	r3, [r2, #4]
 80008be:	f043 0304 	orr.w	r3, r3, #4
 80008c2:	7113      	strb	r3, [r2, #4]

  rda5807_config.reg04.refined.RDS_FIFO_CLR = 1;
 80008c4:	4a23      	ldr	r2, [pc, #140]	; (8000954 <rda5807_init+0xf8>)
 80008c6:	7a53      	ldrb	r3, [r2, #9]
 80008c8:	f043 0304 	orr.w	r3, r3, #4
 80008cc:	7253      	strb	r3, [r2, #9]

  rda5807_config.reg05.refined.INT_MODE = 0;
 80008ce:	4a21      	ldr	r2, [pc, #132]	; (8000954 <rda5807_init+0xf8>)
 80008d0:	7ad3      	ldrb	r3, [r2, #11]
 80008d2:	f36f 13c7 	bfc	r3, #7, #1
 80008d6:	72d3      	strb	r3, [r2, #11]
  rda5807_config.reg05.refined.LNA_PORT_SEL = 2;
 80008d8:	4a1e      	ldr	r2, [pc, #120]	; (8000954 <rda5807_init+0xf8>)
 80008da:	7a93      	ldrb	r3, [r2, #10]
 80008dc:	2102      	movs	r1, #2
 80008de:	f361 1387 	bfi	r3, r1, #6, #2
 80008e2:	7293      	strb	r3, [r2, #10]
  rda5807_config.reg05.refined.LNA_ICSEL_BIT = 0;
 80008e4:	4a1b      	ldr	r2, [pc, #108]	; (8000954 <rda5807_init+0xf8>)
 80008e6:	7a93      	ldrb	r3, [r2, #10]
 80008e8:	f36f 1305 	bfc	r3, #4, #2
 80008ec:	7293      	strb	r3, [r2, #10]
  rda5807_config.reg05.refined.SEEKTH = 8;
 80008ee:	4a19      	ldr	r2, [pc, #100]	; (8000954 <rda5807_init+0xf8>)
 80008f0:	7ad3      	ldrb	r3, [r2, #11]
 80008f2:	2108      	movs	r1, #8
 80008f4:	f361 0303 	bfi	r3, r1, #0, #4
 80008f8:	72d3      	strb	r3, [r2, #11]
  rda5807_config.reg05.refined.VOLUME = 0b1111;
 80008fa:	4a16      	ldr	r2, [pc, #88]	; (8000954 <rda5807_init+0xf8>)
 80008fc:	7a93      	ldrb	r3, [r2, #10]
 80008fe:	f043 030f 	orr.w	r3, r3, #15
 8000902:	7293      	strb	r3, [r2, #10]

  rda5807_config.reg03.refined.SPACE = 0;
 8000904:	4a13      	ldr	r2, [pc, #76]	; (8000954 <rda5807_init+0xf8>)
 8000906:	7993      	ldrb	r3, [r2, #6]
 8000908:	f36f 0301 	bfc	r3, #0, #2
 800090c:	7193      	strb	r3, [r2, #6]

  // TODO:
  //rda5807_write_register(0x02, 2); // software reset chip;

  rda5807_write_register(0x02, rda5807_config.reg02.raw);
 800090e:	4b11      	ldr	r3, [pc, #68]	; (8000954 <rda5807_init+0xf8>)
 8000910:	889b      	ldrh	r3, [r3, #4]
 8000912:	4619      	mov	r1, r3
 8000914:	2002      	movs	r0, #2
 8000916:	f000 f839 	bl	800098c <rda5807_write_register>
  rda5807_write_register(0x03, rda5807_config.reg03.raw);
 800091a:	4b0e      	ldr	r3, [pc, #56]	; (8000954 <rda5807_init+0xf8>)
 800091c:	88db      	ldrh	r3, [r3, #6]
 800091e:	4619      	mov	r1, r3
 8000920:	2003      	movs	r0, #3
 8000922:	f000 f833 	bl	800098c <rda5807_write_register>
  rda5807_write_register(0x05, rda5807_config.reg05.raw);
 8000926:	4b0b      	ldr	r3, [pc, #44]	; (8000954 <rda5807_init+0xf8>)
 8000928:	895b      	ldrh	r3, [r3, #10]
 800092a:	4619      	mov	r1, r3
 800092c:	2005      	movs	r0, #5
 800092e:	f000 f82d 	bl	800098c <rda5807_write_register>
  rda5807_write_register(0x02, rda5807_config.reg02.raw);
 8000932:	4b08      	ldr	r3, [pc, #32]	; (8000954 <rda5807_init+0xf8>)
 8000934:	889b      	ldrh	r3, [r3, #4]
 8000936:	4619      	mov	r1, r3
 8000938:	2002      	movs	r0, #2
 800093a:	f000 f827 	bl	800098c <rda5807_write_register>

  HAL_Delay(500);
 800093e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000942:	f000 fb03 	bl	8000f4c <HAL_Delay>

  //rda5807_write_register(0x02, 0b1111000000000001);
  //rda5807_write_register(0x05, 0b0000100010111111);

  return RDA5807_OK;
 8000946:	2300      	movs	r3, #0
}
 8000948:	4618      	mov	r0, r3
 800094a:	3708      	adds	r7, #8
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}
 8000950:	2000014c 	.word	0x2000014c
 8000954:	200001b0 	.word	0x200001b0

08000958 <rda5807_check_is_connected>:

int8_t rda5807_check_is_connected(I2C_HandleTypeDef *i2c) {
 8000958:	b580      	push	{r7, lr}
 800095a:	b084      	sub	sp, #16
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
  uint8_t err = 0;
 8000960:	2300      	movs	r3, #0
 8000962:	73fb      	strb	r3, [r7, #15]
  err = HAL_I2C_IsDeviceReady(i2c, 0x10 << 1, 2, 500);
 8000964:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000968:	2202      	movs	r2, #2
 800096a:	2120      	movs	r1, #32
 800096c:	6878      	ldr	r0, [r7, #4]
 800096e:	f001 f9f5 	bl	8001d5c <HAL_I2C_IsDeviceReady>
 8000972:	4603      	mov	r3, r0
 8000974:	73fb      	strb	r3, [r7, #15]
  return err ? RDA5807_NOT_FOUND : RDA5807_OK;
 8000976:	7bfb      	ldrb	r3, [r7, #15]
 8000978:	2b00      	cmp	r3, #0
 800097a:	d002      	beq.n	8000982 <rda5807_check_is_connected+0x2a>
 800097c:	f06f 0301 	mvn.w	r3, #1
 8000980:	e000      	b.n	8000984 <rda5807_check_is_connected+0x2c>
 8000982:	2300      	movs	r3, #0
}
 8000984:	4618      	mov	r0, r3
 8000986:	3710      	adds	r7, #16
 8000988:	46bd      	mov	sp, r7
 800098a:	bd80      	pop	{r7, pc}

0800098c <rda5807_write_register>:

int8_t rda5807_write_register(uint8_t reg, uint16_t val) {
 800098c:	b580      	push	{r7, lr}
 800098e:	b086      	sub	sp, #24
 8000990:	af02      	add	r7, sp, #8
 8000992:	4603      	mov	r3, r0
 8000994:	460a      	mov	r2, r1
 8000996:	71fb      	strb	r3, [r7, #7]
 8000998:	4613      	mov	r3, r2
 800099a:	80bb      	strh	r3, [r7, #4]
  // check register addres is valid
  if (reg < 0x02 || reg > 0x08)
 800099c:	79fb      	ldrb	r3, [r7, #7]
 800099e:	2b01      	cmp	r3, #1
 80009a0:	d902      	bls.n	80009a8 <rda5807_write_register+0x1c>
 80009a2:	79fb      	ldrb	r3, [r7, #7]
 80009a4:	2b08      	cmp	r3, #8
 80009a6:	d902      	bls.n	80009ae <rda5807_write_register+0x22>
    return RDA5807_WRITE_ERROR;
 80009a8:	f06f 0302 	mvn.w	r3, #2
 80009ac:	e01c      	b.n	80009e8 <rda5807_write_register+0x5c>
  // prepare send buffer
  uint8_t data[3];
  data[0] = reg;
 80009ae:	79fb      	ldrb	r3, [r7, #7]
 80009b0:	733b      	strb	r3, [r7, #12]
  data[1] = val >> 8;
 80009b2:	88bb      	ldrh	r3, [r7, #4]
 80009b4:	0a1b      	lsrs	r3, r3, #8
 80009b6:	b29b      	uxth	r3, r3
 80009b8:	b2db      	uxtb	r3, r3
 80009ba:	737b      	strb	r3, [r7, #13]
  data[2] = (uint8_t) val & 0xFF;
 80009bc:	88bb      	ldrh	r3, [r7, #4]
 80009be:	b2db      	uxtb	r3, r3
 80009c0:	73bb      	strb	r3, [r7, #14]

  // send data to rda5807
  HAL_StatusTypeDef err;
  err = HAL_I2C_Master_Transmit(&rdahi2c, 0x11 << 1, data, 3, 3000);
 80009c2:	f107 020c 	add.w	r2, r7, #12
 80009c6:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80009ca:	9300      	str	r3, [sp, #0]
 80009cc:	2303      	movs	r3, #3
 80009ce:	2122      	movs	r1, #34	; 0x22
 80009d0:	4807      	ldr	r0, [pc, #28]	; (80009f0 <rda5807_write_register+0x64>)
 80009d2:	f000 fe6b 	bl	80016ac <HAL_I2C_Master_Transmit>
 80009d6:	4603      	mov	r3, r0
 80009d8:	73fb      	strb	r3, [r7, #15]
  if (err != HAL_OK)
 80009da:	7bfb      	ldrb	r3, [r7, #15]
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d002      	beq.n	80009e6 <rda5807_write_register+0x5a>
    return RDA5807_WRITE_ERROR;
 80009e0:	f06f 0302 	mvn.w	r3, #2
 80009e4:	e000      	b.n	80009e8 <rda5807_write_register+0x5c>
  return RDA5807_OK;
 80009e6:	2300      	movs	r3, #0
}
 80009e8:	4618      	mov	r0, r3
 80009ea:	3710      	adds	r7, #16
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	2000014c 	.word	0x2000014c

080009f4 <rda5807_read_status>:

void rda5807_read_status(void) {
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b088      	sub	sp, #32
 80009f8:	af02      	add	r7, sp, #8
  // read 6 words from i2c bus
  uint8_t buf[12];
  HAL_I2C_Master_Receive(&rdahi2c, 0x10 << 1, buf, 12, 1000);
 80009fa:	1d3a      	adds	r2, r7, #4
 80009fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a00:	9300      	str	r3, [sp, #0]
 8000a02:	230c      	movs	r3, #12
 8000a04:	2120      	movs	r1, #32
 8000a06:	481b      	ldr	r0, [pc, #108]	; (8000a74 <rda5807_read_status+0x80>)
 8000a08:	f000 ff4e 	bl	80018a8 <HAL_I2C_Master_Receive>
  // switch bytes in words
  for (int i = 0; i < 6; i++) {
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	617b      	str	r3, [r7, #20]
 8000a10:	e022      	b.n	8000a58 <rda5807_read_status+0x64>
    uint8_t _c = buf[2 * i];
 8000a12:	697b      	ldr	r3, [r7, #20]
 8000a14:	005b      	lsls	r3, r3, #1
 8000a16:	f107 0218 	add.w	r2, r7, #24
 8000a1a:	4413      	add	r3, r2
 8000a1c:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8000a20:	74fb      	strb	r3, [r7, #19]
    buf[2 * i] = buf[2 * i + 1];
 8000a22:	697b      	ldr	r3, [r7, #20]
 8000a24:	005b      	lsls	r3, r3, #1
 8000a26:	1c5a      	adds	r2, r3, #1
 8000a28:	697b      	ldr	r3, [r7, #20]
 8000a2a:	005b      	lsls	r3, r3, #1
 8000a2c:	f107 0118 	add.w	r1, r7, #24
 8000a30:	440a      	add	r2, r1
 8000a32:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8000a36:	f107 0118 	add.w	r1, r7, #24
 8000a3a:	440b      	add	r3, r1
 8000a3c:	f803 2c14 	strb.w	r2, [r3, #-20]
    buf[2 * i + 1] = _c;
 8000a40:	697b      	ldr	r3, [r7, #20]
 8000a42:	005b      	lsls	r3, r3, #1
 8000a44:	3301      	adds	r3, #1
 8000a46:	f107 0218 	add.w	r2, r7, #24
 8000a4a:	4413      	add	r3, r2
 8000a4c:	7cfa      	ldrb	r2, [r7, #19]
 8000a4e:	f803 2c14 	strb.w	r2, [r3, #-20]
  for (int i = 0; i < 6; i++) {
 8000a52:	697b      	ldr	r3, [r7, #20]
 8000a54:	3301      	adds	r3, #1
 8000a56:	617b      	str	r3, [r7, #20]
 8000a58:	697b      	ldr	r3, [r7, #20]
 8000a5a:	2b05      	cmp	r3, #5
 8000a5c:	ddd9      	ble.n	8000a12 <rda5807_read_status+0x1e>
  }
  // copy data to status structure
  memcpy(&rda5807_status, buf, sizeof(buf));
 8000a5e:	1d3b      	adds	r3, r7, #4
 8000a60:	220c      	movs	r2, #12
 8000a62:	4619      	mov	r1, r3
 8000a64:	4804      	ldr	r0, [pc, #16]	; (8000a78 <rda5807_read_status+0x84>)
 8000a66:	f002 fbd1 	bl	800320c <memcpy>
}
 8000a6a:	bf00      	nop
 8000a6c:	3718      	adds	r7, #24
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	2000014c 	.word	0x2000014c
 8000a78:	200001a4 	.word	0x200001a4

08000a7c <rda5807_get_frequency>:
    //config 87MHz-108MHz mode OIRT
  }

}

int rda5807_get_frequency(void) {
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  if (rda5807_config.reg03.refined.BAND == BAND_US_EUROPE) {
 8000a80:	4b29      	ldr	r3, [pc, #164]	; (8000b28 <rda5807_get_frequency+0xac>)
 8000a82:	799b      	ldrb	r3, [r3, #6]
 8000a84:	f003 030c 	and.w	r3, r3, #12
 8000a88:	b2db      	uxtb	r3, r3
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d146      	bne.n	8000b1c <rda5807_get_frequency+0xa0>
    switch (rda5807_config.reg03.refined.SPACE) {
 8000a8e:	4b26      	ldr	r3, [pc, #152]	; (8000b28 <rda5807_get_frequency+0xac>)
 8000a90:	799b      	ldrb	r3, [r3, #6]
 8000a92:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8000a96:	b2db      	uxtb	r3, r3
 8000a98:	2b03      	cmp	r3, #3
 8000a9a:	d83d      	bhi.n	8000b18 <rda5807_get_frequency+0x9c>
 8000a9c:	a201      	add	r2, pc, #4	; (adr r2, 8000aa4 <rda5807_get_frequency+0x28>)
 8000a9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000aa2:	bf00      	nop
 8000aa4:	08000ab5 	.word	0x08000ab5
 8000aa8:	08000ae7 	.word	0x08000ae7
 8000aac:	08000acd 	.word	0x08000acd
 8000ab0:	08000aff 	.word	0x08000aff
    case SPACING_100KHZ:
      return rda5807_status.reg0a.refined.READCHAN * 100000 + 87000000;
 8000ab4:	4b1d      	ldr	r3, [pc, #116]	; (8000b2c <rda5807_get_frequency+0xb0>)
 8000ab6:	881b      	ldrh	r3, [r3, #0]
 8000ab8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000abc:	b29b      	uxth	r3, r3
 8000abe:	461a      	mov	r2, r3
 8000ac0:	4b1b      	ldr	r3, [pc, #108]	; (8000b30 <rda5807_get_frequency+0xb4>)
 8000ac2:	fb03 f202 	mul.w	r2, r3, r2
 8000ac6:	4b1b      	ldr	r3, [pc, #108]	; (8000b34 <rda5807_get_frequency+0xb8>)
 8000ac8:	4413      	add	r3, r2
 8000aca:	e028      	b.n	8000b1e <rda5807_get_frequency+0xa2>
      break;
    case SPACING_50KHZ:
      return rda5807_status.reg0a.refined.READCHAN * 50000 + 87000000;
 8000acc:	4b17      	ldr	r3, [pc, #92]	; (8000b2c <rda5807_get_frequency+0xb0>)
 8000ace:	881b      	ldrh	r3, [r3, #0]
 8000ad0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000ad4:	b29b      	uxth	r3, r3
 8000ad6:	461a      	mov	r2, r3
 8000ad8:	f24c 3350 	movw	r3, #50000	; 0xc350
 8000adc:	fb03 f202 	mul.w	r2, r3, r2
 8000ae0:	4b14      	ldr	r3, [pc, #80]	; (8000b34 <rda5807_get_frequency+0xb8>)
 8000ae2:	4413      	add	r3, r2
 8000ae4:	e01b      	b.n	8000b1e <rda5807_get_frequency+0xa2>
      break;
    case SPACING_200KHZ:
      return rda5807_status.reg0a.refined.READCHAN * 200000 + 87000000;
 8000ae6:	4b11      	ldr	r3, [pc, #68]	; (8000b2c <rda5807_get_frequency+0xb0>)
 8000ae8:	881b      	ldrh	r3, [r3, #0]
 8000aea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000aee:	b29b      	uxth	r3, r3
 8000af0:	461a      	mov	r2, r3
 8000af2:	4b11      	ldr	r3, [pc, #68]	; (8000b38 <rda5807_get_frequency+0xbc>)
 8000af4:	fb03 f202 	mul.w	r2, r3, r2
 8000af8:	4b0e      	ldr	r3, [pc, #56]	; (8000b34 <rda5807_get_frequency+0xb8>)
 8000afa:	4413      	add	r3, r2
 8000afc:	e00f      	b.n	8000b1e <rda5807_get_frequency+0xa2>
      break;
    case SPACING_25KHZ:
      return rda5807_status.reg0a.refined.READCHAN * 25000 + 87000000;
 8000afe:	4b0b      	ldr	r3, [pc, #44]	; (8000b2c <rda5807_get_frequency+0xb0>)
 8000b00:	881b      	ldrh	r3, [r3, #0]
 8000b02:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000b06:	b29b      	uxth	r3, r3
 8000b08:	461a      	mov	r2, r3
 8000b0a:	f246 13a8 	movw	r3, #25000	; 0x61a8
 8000b0e:	fb03 f202 	mul.w	r2, r3, r2
 8000b12:	4b08      	ldr	r3, [pc, #32]	; (8000b34 <rda5807_get_frequency+0xb8>)
 8000b14:	4413      	add	r3, r2
 8000b16:	e002      	b.n	8000b1e <rda5807_get_frequency+0xa2>
      break;
    default:
      return 0;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	e000      	b.n	8000b1e <rda5807_get_frequency+0xa2>
     return rda5807_status.reg0a.refined.READCHAN*200000+87000000;
     }
     */

  }
  return 0;
 8000b1c:	2300      	movs	r3, #0
}
 8000b1e:	4618      	mov	r0, r3
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bc80      	pop	{r7}
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop
 8000b28:	200001b0 	.word	0x200001b0
 8000b2c:	200001a4 	.word	0x200001a4
 8000b30:	000186a0 	.word	0x000186a0
 8000b34:	052f83c0 	.word	0x052f83c0
 8000b38:	00030d40 	.word	0x00030d40

08000b3c <rda5807_get_rssi>:

int rda5807_get_rssi(void) {
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  //FIXME:
  return (-127 + rda5807_status.reg0b.refined.RSSI);
 8000b40:	4b04      	ldr	r3, [pc, #16]	; (8000b54 <rda5807_get_rssi+0x18>)
 8000b42:	78db      	ldrb	r3, [r3, #3]
 8000b44:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8000b48:	b2db      	uxtb	r3, r3
 8000b4a:	3b7f      	subs	r3, #127	; 0x7f
}
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bc80      	pop	{r7}
 8000b52:	4770      	bx	lr
 8000b54:	200001a4 	.word	0x200001a4

08000b58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	b085      	sub	sp, #20
 8000b5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000b5e:	4b15      	ldr	r3, [pc, #84]	; (8000bb4 <HAL_MspInit+0x5c>)
 8000b60:	699b      	ldr	r3, [r3, #24]
 8000b62:	4a14      	ldr	r2, [pc, #80]	; (8000bb4 <HAL_MspInit+0x5c>)
 8000b64:	f043 0301 	orr.w	r3, r3, #1
 8000b68:	6193      	str	r3, [r2, #24]
 8000b6a:	4b12      	ldr	r3, [pc, #72]	; (8000bb4 <HAL_MspInit+0x5c>)
 8000b6c:	699b      	ldr	r3, [r3, #24]
 8000b6e:	f003 0301 	and.w	r3, r3, #1
 8000b72:	60bb      	str	r3, [r7, #8]
 8000b74:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b76:	4b0f      	ldr	r3, [pc, #60]	; (8000bb4 <HAL_MspInit+0x5c>)
 8000b78:	69db      	ldr	r3, [r3, #28]
 8000b7a:	4a0e      	ldr	r2, [pc, #56]	; (8000bb4 <HAL_MspInit+0x5c>)
 8000b7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b80:	61d3      	str	r3, [r2, #28]
 8000b82:	4b0c      	ldr	r3, [pc, #48]	; (8000bb4 <HAL_MspInit+0x5c>)
 8000b84:	69db      	ldr	r3, [r3, #28]
 8000b86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b8a:	607b      	str	r3, [r7, #4]
 8000b8c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000b8e:	4b0a      	ldr	r3, [pc, #40]	; (8000bb8 <HAL_MspInit+0x60>)
 8000b90:	685b      	ldr	r3, [r3, #4]
 8000b92:	60fb      	str	r3, [r7, #12]
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000b9a:	60fb      	str	r3, [r7, #12]
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000ba2:	60fb      	str	r3, [r7, #12]
 8000ba4:	4a04      	ldr	r2, [pc, #16]	; (8000bb8 <HAL_MspInit+0x60>)
 8000ba6:	68fb      	ldr	r3, [r7, #12]
 8000ba8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000baa:	bf00      	nop
 8000bac:	3714      	adds	r7, #20
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bc80      	pop	{r7}
 8000bb2:	4770      	bx	lr
 8000bb4:	40021000 	.word	0x40021000
 8000bb8:	40010000 	.word	0x40010000

08000bbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000bc0:	bf00      	nop
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bc80      	pop	{r7}
 8000bc6:	4770      	bx	lr

08000bc8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bcc:	e7fe      	b.n	8000bcc <HardFault_Handler+0x4>

08000bce <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bce:	b480      	push	{r7}
 8000bd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bd2:	e7fe      	b.n	8000bd2 <MemManage_Handler+0x4>

08000bd4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bd8:	e7fe      	b.n	8000bd8 <BusFault_Handler+0x4>

08000bda <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bda:	b480      	push	{r7}
 8000bdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bde:	e7fe      	b.n	8000bde <UsageFault_Handler+0x4>

08000be0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000be4:	bf00      	nop
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bc80      	pop	{r7}
 8000bea:	4770      	bx	lr

08000bec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bf0:	bf00      	nop
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bc80      	pop	{r7}
 8000bf6:	4770      	bx	lr

08000bf8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bfc:	bf00      	nop
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bc80      	pop	{r7}
 8000c02:	4770      	bx	lr

08000c04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c08:	f000 f984 	bl	8000f14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c0c:	bf00      	nop
 8000c0e:	bd80      	pop	{r7, pc}

08000c10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b086      	sub	sp, #24
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c18:	4a14      	ldr	r2, [pc, #80]	; (8000c6c <_sbrk+0x5c>)
 8000c1a:	4b15      	ldr	r3, [pc, #84]	; (8000c70 <_sbrk+0x60>)
 8000c1c:	1ad3      	subs	r3, r2, r3
 8000c1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c20:	697b      	ldr	r3, [r7, #20]
 8000c22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c24:	4b13      	ldr	r3, [pc, #76]	; (8000c74 <_sbrk+0x64>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d102      	bne.n	8000c32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c2c:	4b11      	ldr	r3, [pc, #68]	; (8000c74 <_sbrk+0x64>)
 8000c2e:	4a12      	ldr	r2, [pc, #72]	; (8000c78 <_sbrk+0x68>)
 8000c30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c32:	4b10      	ldr	r3, [pc, #64]	; (8000c74 <_sbrk+0x64>)
 8000c34:	681a      	ldr	r2, [r3, #0]
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	4413      	add	r3, r2
 8000c3a:	693a      	ldr	r2, [r7, #16]
 8000c3c:	429a      	cmp	r2, r3
 8000c3e:	d207      	bcs.n	8000c50 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c40:	f002 faba 	bl	80031b8 <__errno>
 8000c44:	4602      	mov	r2, r0
 8000c46:	230c      	movs	r3, #12
 8000c48:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000c4a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c4e:	e009      	b.n	8000c64 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c50:	4b08      	ldr	r3, [pc, #32]	; (8000c74 <_sbrk+0x64>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c56:	4b07      	ldr	r3, [pc, #28]	; (8000c74 <_sbrk+0x64>)
 8000c58:	681a      	ldr	r2, [r3, #0]
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	4413      	add	r3, r2
 8000c5e:	4a05      	ldr	r2, [pc, #20]	; (8000c74 <_sbrk+0x64>)
 8000c60:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c62:	68fb      	ldr	r3, [r7, #12]
}
 8000c64:	4618      	mov	r0, r3
 8000c66:	3718      	adds	r7, #24
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	20005000 	.word	0x20005000
 8000c70:	00000400 	.word	0x00000400
 8000c74:	2000008c 	.word	0x2000008c
 8000c78:	20000250 	.word	0x20000250

08000c7c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c80:	bf00      	nop
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bc80      	pop	{r7}
 8000c86:	4770      	bx	lr

08000c88 <uart_dbg_init>:
#include "main.h"


UART_HandleTypeDef dbg_uart_handler;

void uart_dbg_init(UART_HandleTypeDef* uart_handler){
 8000c88:	b5b0      	push	{r4, r5, r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
	dbg_uart_handler = *uart_handler;
 8000c90:	4a0a      	ldr	r2, [pc, #40]	; (8000cbc <uart_dbg_init+0x34>)
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	4614      	mov	r4, r2
 8000c96:	461d      	mov	r5, r3
 8000c98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c9c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c9e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ca0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ca2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ca4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000ca8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	clear_console();
 8000cac:	f000 f83c 	bl	8000d28 <clear_console>
	hide_cursor_console();
 8000cb0:	f000 f844 	bl	8000d3c <hide_cursor_console>
}
 8000cb4:	bf00      	nop
 8000cb6:	3708      	adds	r7, #8
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bdb0      	pop	{r4, r5, r7, pc}
 8000cbc:	200001c4 	.word	0x200001c4

08000cc0 <vprint>:


void vprint(const char *fmt, va_list argp)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b09c      	sub	sp, #112	; 0x70
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
 8000cc8:	6039      	str	r1, [r7, #0]
    char string[100];
    if(0 < vsprintf(string,fmt,argp)) // build string
 8000cca:	f107 030c 	add.w	r3, r7, #12
 8000cce:	683a      	ldr	r2, [r7, #0]
 8000cd0:	6879      	ldr	r1, [r7, #4]
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f002 fac4 	bl	8003260 <vsiprintf>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	dd0c      	ble.n	8000cf8 <vprint+0x38>
    {
        HAL_UART_Transmit(&dbg_uart_handler, (uint8_t*)string, strlen(string),10); // send message via UART
 8000cde:	f107 030c 	add.w	r3, r7, #12
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f7ff fa32 	bl	800014c <strlen>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	b29a      	uxth	r2, r3
 8000cec:	f107 010c 	add.w	r1, r7, #12
 8000cf0:	230a      	movs	r3, #10
 8000cf2:	4803      	ldr	r0, [pc, #12]	; (8000d00 <vprint+0x40>)
 8000cf4:	f002 f8f5 	bl	8002ee2 <HAL_UART_Transmit>
    }
}
 8000cf8:	bf00      	nop
 8000cfa:	3770      	adds	r7, #112	; 0x70
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	200001c4 	.word	0x200001c4

08000d04 <dbg>:

void dbg(const char *fmt, ...) // custom printf() function
{
 8000d04:	b40f      	push	{r0, r1, r2, r3}
 8000d06:	b580      	push	{r7, lr}
 8000d08:	b082      	sub	sp, #8
 8000d0a:	af00      	add	r7, sp, #0
    va_list argp;
    va_start(argp, fmt);
 8000d0c:	f107 0314 	add.w	r3, r7, #20
 8000d10:	607b      	str	r3, [r7, #4]
    vprint(fmt, argp);
 8000d12:	6879      	ldr	r1, [r7, #4]
 8000d14:	6938      	ldr	r0, [r7, #16]
 8000d16:	f7ff ffd3 	bl	8000cc0 <vprint>
    va_end(argp);
}
 8000d1a:	bf00      	nop
 8000d1c:	3708      	adds	r7, #8
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000d24:	b004      	add	sp, #16
 8000d26:	4770      	bx	lr

08000d28 <clear_console>:

void clear_console(void){
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	af00      	add	r7, sp, #0
  dbg("\033[2J\033[H");// clear console window
 8000d2c:	4802      	ldr	r0, [pc, #8]	; (8000d38 <clear_console+0x10>)
 8000d2e:	f7ff ffe9 	bl	8000d04 <dbg>
}
 8000d32:	bf00      	nop
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	08003b00 	.word	0x08003b00

08000d3c <hide_cursor_console>:

void home_console(void){
  dbg("\033[H");// clear console window
}

void hide_cursor_console(void){
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0
	dbg("\e[?25l");
 8000d40:	4802      	ldr	r0, [pc, #8]	; (8000d4c <hide_cursor_console+0x10>)
 8000d42:	f7ff ffdf 	bl	8000d04 <dbg>
}
 8000d46:	bf00      	nop
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	08003b0c 	.word	0x08003b0c

08000d50 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8000d54:	4b11      	ldr	r3, [pc, #68]	; (8000d9c <MX_USART1_UART_Init+0x4c>)
 8000d56:	4a12      	ldr	r2, [pc, #72]	; (8000da0 <MX_USART1_UART_Init+0x50>)
 8000d58:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000d5a:	4b10      	ldr	r3, [pc, #64]	; (8000d9c <MX_USART1_UART_Init+0x4c>)
 8000d5c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d60:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d62:	4b0e      	ldr	r3, [pc, #56]	; (8000d9c <MX_USART1_UART_Init+0x4c>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d68:	4b0c      	ldr	r3, [pc, #48]	; (8000d9c <MX_USART1_UART_Init+0x4c>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000d6e:	4b0b      	ldr	r3, [pc, #44]	; (8000d9c <MX_USART1_UART_Init+0x4c>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000d74:	4b09      	ldr	r3, [pc, #36]	; (8000d9c <MX_USART1_UART_Init+0x4c>)
 8000d76:	220c      	movs	r2, #12
 8000d78:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d7a:	4b08      	ldr	r3, [pc, #32]	; (8000d9c <MX_USART1_UART_Init+0x4c>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d80:	4b06      	ldr	r3, [pc, #24]	; (8000d9c <MX_USART1_UART_Init+0x4c>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000d86:	4805      	ldr	r0, [pc, #20]	; (8000d9c <MX_USART1_UART_Init+0x4c>)
 8000d88:	f002 f85e 	bl	8002e48 <HAL_UART_Init>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d001      	beq.n	8000d96 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000d92:	f7ff fd5c 	bl	800084e <Error_Handler>
  }

}
 8000d96:	bf00      	nop
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	20000204 	.word	0x20000204
 8000da0:	40013800 	.word	0x40013800

08000da4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b088      	sub	sp, #32
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dac:	f107 0310 	add.w	r3, r7, #16
 8000db0:	2200      	movs	r2, #0
 8000db2:	601a      	str	r2, [r3, #0]
 8000db4:	605a      	str	r2, [r3, #4]
 8000db6:	609a      	str	r2, [r3, #8]
 8000db8:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	4a1c      	ldr	r2, [pc, #112]	; (8000e30 <HAL_UART_MspInit+0x8c>)
 8000dc0:	4293      	cmp	r3, r2
 8000dc2:	d131      	bne.n	8000e28 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000dc4:	4b1b      	ldr	r3, [pc, #108]	; (8000e34 <HAL_UART_MspInit+0x90>)
 8000dc6:	699b      	ldr	r3, [r3, #24]
 8000dc8:	4a1a      	ldr	r2, [pc, #104]	; (8000e34 <HAL_UART_MspInit+0x90>)
 8000dca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dce:	6193      	str	r3, [r2, #24]
 8000dd0:	4b18      	ldr	r3, [pc, #96]	; (8000e34 <HAL_UART_MspInit+0x90>)
 8000dd2:	699b      	ldr	r3, [r3, #24]
 8000dd4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dd8:	60fb      	str	r3, [r7, #12]
 8000dda:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ddc:	4b15      	ldr	r3, [pc, #84]	; (8000e34 <HAL_UART_MspInit+0x90>)
 8000dde:	699b      	ldr	r3, [r3, #24]
 8000de0:	4a14      	ldr	r2, [pc, #80]	; (8000e34 <HAL_UART_MspInit+0x90>)
 8000de2:	f043 0304 	orr.w	r3, r3, #4
 8000de6:	6193      	str	r3, [r2, #24]
 8000de8:	4b12      	ldr	r3, [pc, #72]	; (8000e34 <HAL_UART_MspInit+0x90>)
 8000dea:	699b      	ldr	r3, [r3, #24]
 8000dec:	f003 0304 	and.w	r3, r3, #4
 8000df0:	60bb      	str	r3, [r7, #8]
 8000df2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000df4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000df8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dfa:	2302      	movs	r3, #2
 8000dfc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000dfe:	2303      	movs	r3, #3
 8000e00:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e02:	f107 0310 	add.w	r3, r7, #16
 8000e06:	4619      	mov	r1, r3
 8000e08:	480b      	ldr	r0, [pc, #44]	; (8000e38 <HAL_UART_MspInit+0x94>)
 8000e0a:	f000 f9a5 	bl	8001158 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000e0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e12:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e14:	2300      	movs	r3, #0
 8000e16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e1c:	f107 0310 	add.w	r3, r7, #16
 8000e20:	4619      	mov	r1, r3
 8000e22:	4805      	ldr	r0, [pc, #20]	; (8000e38 <HAL_UART_MspInit+0x94>)
 8000e24:	f000 f998 	bl	8001158 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000e28:	bf00      	nop
 8000e2a:	3720      	adds	r7, #32
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	40013800 	.word	0x40013800
 8000e34:	40021000 	.word	0x40021000
 8000e38:	40010800 	.word	0x40010800

08000e3c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000e3c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000e3e:	e003      	b.n	8000e48 <LoopCopyDataInit>

08000e40 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000e40:	4b0b      	ldr	r3, [pc, #44]	; (8000e70 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000e42:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000e44:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000e46:	3104      	adds	r1, #4

08000e48 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000e48:	480a      	ldr	r0, [pc, #40]	; (8000e74 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000e4a:	4b0b      	ldr	r3, [pc, #44]	; (8000e78 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000e4c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000e4e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000e50:	d3f6      	bcc.n	8000e40 <CopyDataInit>
  ldr r2, =_sbss
 8000e52:	4a0a      	ldr	r2, [pc, #40]	; (8000e7c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000e54:	e002      	b.n	8000e5c <LoopFillZerobss>

08000e56 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000e56:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000e58:	f842 3b04 	str.w	r3, [r2], #4

08000e5c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000e5c:	4b08      	ldr	r3, [pc, #32]	; (8000e80 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000e5e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000e60:	d3f9      	bcc.n	8000e56 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000e62:	f7ff ff0b 	bl	8000c7c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e66:	f002 f9ad 	bl	80031c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e6a:	f7ff fc37 	bl	80006dc <main>
  bx lr
 8000e6e:	4770      	bx	lr
  ldr r3, =_sidata
 8000e70:	08003b84 	.word	0x08003b84
  ldr r0, =_sdata
 8000e74:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000e78:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 8000e7c:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 8000e80:	2000024c 	.word	0x2000024c

08000e84 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e84:	e7fe      	b.n	8000e84 <ADC1_2_IRQHandler>
	...

08000e88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e8c:	4b08      	ldr	r3, [pc, #32]	; (8000eb0 <HAL_Init+0x28>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	4a07      	ldr	r2, [pc, #28]	; (8000eb0 <HAL_Init+0x28>)
 8000e92:	f043 0310 	orr.w	r3, r3, #16
 8000e96:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e98:	2003      	movs	r0, #3
 8000e9a:	f000 f929 	bl	80010f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e9e:	2000      	movs	r0, #0
 8000ea0:	f000 f808 	bl	8000eb4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ea4:	f7ff fe58 	bl	8000b58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ea8:	2300      	movs	r3, #0
}
 8000eaa:	4618      	mov	r0, r3
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	40022000 	.word	0x40022000

08000eb4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ebc:	4b12      	ldr	r3, [pc, #72]	; (8000f08 <HAL_InitTick+0x54>)
 8000ebe:	681a      	ldr	r2, [r3, #0]
 8000ec0:	4b12      	ldr	r3, [pc, #72]	; (8000f0c <HAL_InitTick+0x58>)
 8000ec2:	781b      	ldrb	r3, [r3, #0]
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000eca:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ece:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f000 f933 	bl	800113e <HAL_SYSTICK_Config>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d001      	beq.n	8000ee2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ede:	2301      	movs	r3, #1
 8000ee0:	e00e      	b.n	8000f00 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	2b0f      	cmp	r3, #15
 8000ee6:	d80a      	bhi.n	8000efe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ee8:	2200      	movs	r2, #0
 8000eea:	6879      	ldr	r1, [r7, #4]
 8000eec:	f04f 30ff 	mov.w	r0, #4294967295
 8000ef0:	f000 f909 	bl	8001106 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ef4:	4a06      	ldr	r2, [pc, #24]	; (8000f10 <HAL_InitTick+0x5c>)
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000efa:	2300      	movs	r3, #0
 8000efc:	e000      	b.n	8000f00 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000efe:	2301      	movs	r3, #1
}
 8000f00:	4618      	mov	r0, r3
 8000f02:	3708      	adds	r7, #8
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	20000000 	.word	0x20000000
 8000f0c:	20000008 	.word	0x20000008
 8000f10:	20000004 	.word	0x20000004

08000f14 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f18:	4b05      	ldr	r3, [pc, #20]	; (8000f30 <HAL_IncTick+0x1c>)
 8000f1a:	781b      	ldrb	r3, [r3, #0]
 8000f1c:	461a      	mov	r2, r3
 8000f1e:	4b05      	ldr	r3, [pc, #20]	; (8000f34 <HAL_IncTick+0x20>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	4413      	add	r3, r2
 8000f24:	4a03      	ldr	r2, [pc, #12]	; (8000f34 <HAL_IncTick+0x20>)
 8000f26:	6013      	str	r3, [r2, #0]
}
 8000f28:	bf00      	nop
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bc80      	pop	{r7}
 8000f2e:	4770      	bx	lr
 8000f30:	20000008 	.word	0x20000008
 8000f34:	20000244 	.word	0x20000244

08000f38 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f3c:	4b02      	ldr	r3, [pc, #8]	; (8000f48 <HAL_GetTick+0x10>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
}
 8000f40:	4618      	mov	r0, r3
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bc80      	pop	{r7}
 8000f46:	4770      	bx	lr
 8000f48:	20000244 	.word	0x20000244

08000f4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b084      	sub	sp, #16
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f54:	f7ff fff0 	bl	8000f38 <HAL_GetTick>
 8000f58:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f64:	d005      	beq.n	8000f72 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f66:	4b09      	ldr	r3, [pc, #36]	; (8000f8c <HAL_Delay+0x40>)
 8000f68:	781b      	ldrb	r3, [r3, #0]
 8000f6a:	461a      	mov	r2, r3
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	4413      	add	r3, r2
 8000f70:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f72:	bf00      	nop
 8000f74:	f7ff ffe0 	bl	8000f38 <HAL_GetTick>
 8000f78:	4602      	mov	r2, r0
 8000f7a:	68bb      	ldr	r3, [r7, #8]
 8000f7c:	1ad3      	subs	r3, r2, r3
 8000f7e:	68fa      	ldr	r2, [r7, #12]
 8000f80:	429a      	cmp	r2, r3
 8000f82:	d8f7      	bhi.n	8000f74 <HAL_Delay+0x28>
  {
  }
}
 8000f84:	bf00      	nop
 8000f86:	3710      	adds	r7, #16
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	20000008 	.word	0x20000008

08000f90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b085      	sub	sp, #20
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	f003 0307 	and.w	r3, r3, #7
 8000f9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fa0:	4b0c      	ldr	r3, [pc, #48]	; (8000fd4 <__NVIC_SetPriorityGrouping+0x44>)
 8000fa2:	68db      	ldr	r3, [r3, #12]
 8000fa4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fa6:	68ba      	ldr	r2, [r7, #8]
 8000fa8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fac:	4013      	ands	r3, r2
 8000fae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fb4:	68bb      	ldr	r3, [r7, #8]
 8000fb6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fb8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fc0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fc2:	4a04      	ldr	r2, [pc, #16]	; (8000fd4 <__NVIC_SetPriorityGrouping+0x44>)
 8000fc4:	68bb      	ldr	r3, [r7, #8]
 8000fc6:	60d3      	str	r3, [r2, #12]
}
 8000fc8:	bf00      	nop
 8000fca:	3714      	adds	r7, #20
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bc80      	pop	{r7}
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop
 8000fd4:	e000ed00 	.word	0xe000ed00

08000fd8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fdc:	4b04      	ldr	r3, [pc, #16]	; (8000ff0 <__NVIC_GetPriorityGrouping+0x18>)
 8000fde:	68db      	ldr	r3, [r3, #12]
 8000fe0:	0a1b      	lsrs	r3, r3, #8
 8000fe2:	f003 0307 	and.w	r3, r3, #7
}
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bc80      	pop	{r7}
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop
 8000ff0:	e000ed00 	.word	0xe000ed00

08000ff4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b083      	sub	sp, #12
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	6039      	str	r1, [r7, #0]
 8000ffe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001000:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001004:	2b00      	cmp	r3, #0
 8001006:	db0a      	blt.n	800101e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	b2da      	uxtb	r2, r3
 800100c:	490c      	ldr	r1, [pc, #48]	; (8001040 <__NVIC_SetPriority+0x4c>)
 800100e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001012:	0112      	lsls	r2, r2, #4
 8001014:	b2d2      	uxtb	r2, r2
 8001016:	440b      	add	r3, r1
 8001018:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800101c:	e00a      	b.n	8001034 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	b2da      	uxtb	r2, r3
 8001022:	4908      	ldr	r1, [pc, #32]	; (8001044 <__NVIC_SetPriority+0x50>)
 8001024:	79fb      	ldrb	r3, [r7, #7]
 8001026:	f003 030f 	and.w	r3, r3, #15
 800102a:	3b04      	subs	r3, #4
 800102c:	0112      	lsls	r2, r2, #4
 800102e:	b2d2      	uxtb	r2, r2
 8001030:	440b      	add	r3, r1
 8001032:	761a      	strb	r2, [r3, #24]
}
 8001034:	bf00      	nop
 8001036:	370c      	adds	r7, #12
 8001038:	46bd      	mov	sp, r7
 800103a:	bc80      	pop	{r7}
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop
 8001040:	e000e100 	.word	0xe000e100
 8001044:	e000ed00 	.word	0xe000ed00

08001048 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001048:	b480      	push	{r7}
 800104a:	b089      	sub	sp, #36	; 0x24
 800104c:	af00      	add	r7, sp, #0
 800104e:	60f8      	str	r0, [r7, #12]
 8001050:	60b9      	str	r1, [r7, #8]
 8001052:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	f003 0307 	and.w	r3, r3, #7
 800105a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800105c:	69fb      	ldr	r3, [r7, #28]
 800105e:	f1c3 0307 	rsb	r3, r3, #7
 8001062:	2b04      	cmp	r3, #4
 8001064:	bf28      	it	cs
 8001066:	2304      	movcs	r3, #4
 8001068:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800106a:	69fb      	ldr	r3, [r7, #28]
 800106c:	3304      	adds	r3, #4
 800106e:	2b06      	cmp	r3, #6
 8001070:	d902      	bls.n	8001078 <NVIC_EncodePriority+0x30>
 8001072:	69fb      	ldr	r3, [r7, #28]
 8001074:	3b03      	subs	r3, #3
 8001076:	e000      	b.n	800107a <NVIC_EncodePriority+0x32>
 8001078:	2300      	movs	r3, #0
 800107a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800107c:	f04f 32ff 	mov.w	r2, #4294967295
 8001080:	69bb      	ldr	r3, [r7, #24]
 8001082:	fa02 f303 	lsl.w	r3, r2, r3
 8001086:	43da      	mvns	r2, r3
 8001088:	68bb      	ldr	r3, [r7, #8]
 800108a:	401a      	ands	r2, r3
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001090:	f04f 31ff 	mov.w	r1, #4294967295
 8001094:	697b      	ldr	r3, [r7, #20]
 8001096:	fa01 f303 	lsl.w	r3, r1, r3
 800109a:	43d9      	mvns	r1, r3
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010a0:	4313      	orrs	r3, r2
         );
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	3724      	adds	r7, #36	; 0x24
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bc80      	pop	{r7}
 80010aa:	4770      	bx	lr

080010ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	3b01      	subs	r3, #1
 80010b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010bc:	d301      	bcc.n	80010c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010be:	2301      	movs	r3, #1
 80010c0:	e00f      	b.n	80010e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010c2:	4a0a      	ldr	r2, [pc, #40]	; (80010ec <SysTick_Config+0x40>)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	3b01      	subs	r3, #1
 80010c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010ca:	210f      	movs	r1, #15
 80010cc:	f04f 30ff 	mov.w	r0, #4294967295
 80010d0:	f7ff ff90 	bl	8000ff4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010d4:	4b05      	ldr	r3, [pc, #20]	; (80010ec <SysTick_Config+0x40>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010da:	4b04      	ldr	r3, [pc, #16]	; (80010ec <SysTick_Config+0x40>)
 80010dc:	2207      	movs	r2, #7
 80010de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010e0:	2300      	movs	r3, #0
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	e000e010 	.word	0xe000e010

080010f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010f8:	6878      	ldr	r0, [r7, #4]
 80010fa:	f7ff ff49 	bl	8000f90 <__NVIC_SetPriorityGrouping>
}
 80010fe:	bf00      	nop
 8001100:	3708      	adds	r7, #8
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}

08001106 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001106:	b580      	push	{r7, lr}
 8001108:	b086      	sub	sp, #24
 800110a:	af00      	add	r7, sp, #0
 800110c:	4603      	mov	r3, r0
 800110e:	60b9      	str	r1, [r7, #8]
 8001110:	607a      	str	r2, [r7, #4]
 8001112:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001114:	2300      	movs	r3, #0
 8001116:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001118:	f7ff ff5e 	bl	8000fd8 <__NVIC_GetPriorityGrouping>
 800111c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800111e:	687a      	ldr	r2, [r7, #4]
 8001120:	68b9      	ldr	r1, [r7, #8]
 8001122:	6978      	ldr	r0, [r7, #20]
 8001124:	f7ff ff90 	bl	8001048 <NVIC_EncodePriority>
 8001128:	4602      	mov	r2, r0
 800112a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800112e:	4611      	mov	r1, r2
 8001130:	4618      	mov	r0, r3
 8001132:	f7ff ff5f 	bl	8000ff4 <__NVIC_SetPriority>
}
 8001136:	bf00      	nop
 8001138:	3718      	adds	r7, #24
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}

0800113e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800113e:	b580      	push	{r7, lr}
 8001140:	b082      	sub	sp, #8
 8001142:	af00      	add	r7, sp, #0
 8001144:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001146:	6878      	ldr	r0, [r7, #4]
 8001148:	f7ff ffb0 	bl	80010ac <SysTick_Config>
 800114c:	4603      	mov	r3, r0
}
 800114e:	4618      	mov	r0, r3
 8001150:	3708      	adds	r7, #8
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
	...

08001158 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001158:	b480      	push	{r7}
 800115a:	b08b      	sub	sp, #44	; 0x2c
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
 8001160:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001162:	2300      	movs	r3, #0
 8001164:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001166:	2300      	movs	r3, #0
 8001168:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800116a:	e127      	b.n	80013bc <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800116c:	2201      	movs	r2, #1
 800116e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001170:	fa02 f303 	lsl.w	r3, r2, r3
 8001174:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	69fa      	ldr	r2, [r7, #28]
 800117c:	4013      	ands	r3, r2
 800117e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001180:	69ba      	ldr	r2, [r7, #24]
 8001182:	69fb      	ldr	r3, [r7, #28]
 8001184:	429a      	cmp	r2, r3
 8001186:	f040 8116 	bne.w	80013b6 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	2b12      	cmp	r3, #18
 8001190:	d034      	beq.n	80011fc <HAL_GPIO_Init+0xa4>
 8001192:	2b12      	cmp	r3, #18
 8001194:	d80d      	bhi.n	80011b2 <HAL_GPIO_Init+0x5a>
 8001196:	2b02      	cmp	r3, #2
 8001198:	d02b      	beq.n	80011f2 <HAL_GPIO_Init+0x9a>
 800119a:	2b02      	cmp	r3, #2
 800119c:	d804      	bhi.n	80011a8 <HAL_GPIO_Init+0x50>
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d031      	beq.n	8001206 <HAL_GPIO_Init+0xae>
 80011a2:	2b01      	cmp	r3, #1
 80011a4:	d01c      	beq.n	80011e0 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80011a6:	e048      	b.n	800123a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80011a8:	2b03      	cmp	r3, #3
 80011aa:	d043      	beq.n	8001234 <HAL_GPIO_Init+0xdc>
 80011ac:	2b11      	cmp	r3, #17
 80011ae:	d01b      	beq.n	80011e8 <HAL_GPIO_Init+0x90>
          break;
 80011b0:	e043      	b.n	800123a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80011b2:	4a89      	ldr	r2, [pc, #548]	; (80013d8 <HAL_GPIO_Init+0x280>)
 80011b4:	4293      	cmp	r3, r2
 80011b6:	d026      	beq.n	8001206 <HAL_GPIO_Init+0xae>
 80011b8:	4a87      	ldr	r2, [pc, #540]	; (80013d8 <HAL_GPIO_Init+0x280>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d806      	bhi.n	80011cc <HAL_GPIO_Init+0x74>
 80011be:	4a87      	ldr	r2, [pc, #540]	; (80013dc <HAL_GPIO_Init+0x284>)
 80011c0:	4293      	cmp	r3, r2
 80011c2:	d020      	beq.n	8001206 <HAL_GPIO_Init+0xae>
 80011c4:	4a86      	ldr	r2, [pc, #536]	; (80013e0 <HAL_GPIO_Init+0x288>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d01d      	beq.n	8001206 <HAL_GPIO_Init+0xae>
          break;
 80011ca:	e036      	b.n	800123a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80011cc:	4a85      	ldr	r2, [pc, #532]	; (80013e4 <HAL_GPIO_Init+0x28c>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d019      	beq.n	8001206 <HAL_GPIO_Init+0xae>
 80011d2:	4a85      	ldr	r2, [pc, #532]	; (80013e8 <HAL_GPIO_Init+0x290>)
 80011d4:	4293      	cmp	r3, r2
 80011d6:	d016      	beq.n	8001206 <HAL_GPIO_Init+0xae>
 80011d8:	4a84      	ldr	r2, [pc, #528]	; (80013ec <HAL_GPIO_Init+0x294>)
 80011da:	4293      	cmp	r3, r2
 80011dc:	d013      	beq.n	8001206 <HAL_GPIO_Init+0xae>
          break;
 80011de:	e02c      	b.n	800123a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	68db      	ldr	r3, [r3, #12]
 80011e4:	623b      	str	r3, [r7, #32]
          break;
 80011e6:	e028      	b.n	800123a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	68db      	ldr	r3, [r3, #12]
 80011ec:	3304      	adds	r3, #4
 80011ee:	623b      	str	r3, [r7, #32]
          break;
 80011f0:	e023      	b.n	800123a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	68db      	ldr	r3, [r3, #12]
 80011f6:	3308      	adds	r3, #8
 80011f8:	623b      	str	r3, [r7, #32]
          break;
 80011fa:	e01e      	b.n	800123a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	68db      	ldr	r3, [r3, #12]
 8001200:	330c      	adds	r3, #12
 8001202:	623b      	str	r3, [r7, #32]
          break;
 8001204:	e019      	b.n	800123a <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	689b      	ldr	r3, [r3, #8]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d102      	bne.n	8001214 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800120e:	2304      	movs	r3, #4
 8001210:	623b      	str	r3, [r7, #32]
          break;
 8001212:	e012      	b.n	800123a <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	689b      	ldr	r3, [r3, #8]
 8001218:	2b01      	cmp	r3, #1
 800121a:	d105      	bne.n	8001228 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800121c:	2308      	movs	r3, #8
 800121e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	69fa      	ldr	r2, [r7, #28]
 8001224:	611a      	str	r2, [r3, #16]
          break;
 8001226:	e008      	b.n	800123a <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001228:	2308      	movs	r3, #8
 800122a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	69fa      	ldr	r2, [r7, #28]
 8001230:	615a      	str	r2, [r3, #20]
          break;
 8001232:	e002      	b.n	800123a <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001234:	2300      	movs	r3, #0
 8001236:	623b      	str	r3, [r7, #32]
          break;
 8001238:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800123a:	69bb      	ldr	r3, [r7, #24]
 800123c:	2bff      	cmp	r3, #255	; 0xff
 800123e:	d801      	bhi.n	8001244 <HAL_GPIO_Init+0xec>
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	e001      	b.n	8001248 <HAL_GPIO_Init+0xf0>
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	3304      	adds	r3, #4
 8001248:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800124a:	69bb      	ldr	r3, [r7, #24]
 800124c:	2bff      	cmp	r3, #255	; 0xff
 800124e:	d802      	bhi.n	8001256 <HAL_GPIO_Init+0xfe>
 8001250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001252:	009b      	lsls	r3, r3, #2
 8001254:	e002      	b.n	800125c <HAL_GPIO_Init+0x104>
 8001256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001258:	3b08      	subs	r3, #8
 800125a:	009b      	lsls	r3, r3, #2
 800125c:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800125e:	697b      	ldr	r3, [r7, #20]
 8001260:	681a      	ldr	r2, [r3, #0]
 8001262:	210f      	movs	r1, #15
 8001264:	693b      	ldr	r3, [r7, #16]
 8001266:	fa01 f303 	lsl.w	r3, r1, r3
 800126a:	43db      	mvns	r3, r3
 800126c:	401a      	ands	r2, r3
 800126e:	6a39      	ldr	r1, [r7, #32]
 8001270:	693b      	ldr	r3, [r7, #16]
 8001272:	fa01 f303 	lsl.w	r3, r1, r3
 8001276:	431a      	orrs	r2, r3
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001284:	2b00      	cmp	r3, #0
 8001286:	f000 8096 	beq.w	80013b6 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800128a:	4b59      	ldr	r3, [pc, #356]	; (80013f0 <HAL_GPIO_Init+0x298>)
 800128c:	699b      	ldr	r3, [r3, #24]
 800128e:	4a58      	ldr	r2, [pc, #352]	; (80013f0 <HAL_GPIO_Init+0x298>)
 8001290:	f043 0301 	orr.w	r3, r3, #1
 8001294:	6193      	str	r3, [r2, #24]
 8001296:	4b56      	ldr	r3, [pc, #344]	; (80013f0 <HAL_GPIO_Init+0x298>)
 8001298:	699b      	ldr	r3, [r3, #24]
 800129a:	f003 0301 	and.w	r3, r3, #1
 800129e:	60bb      	str	r3, [r7, #8]
 80012a0:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80012a2:	4a54      	ldr	r2, [pc, #336]	; (80013f4 <HAL_GPIO_Init+0x29c>)
 80012a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012a6:	089b      	lsrs	r3, r3, #2
 80012a8:	3302      	adds	r3, #2
 80012aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012ae:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80012b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012b2:	f003 0303 	and.w	r3, r3, #3
 80012b6:	009b      	lsls	r3, r3, #2
 80012b8:	220f      	movs	r2, #15
 80012ba:	fa02 f303 	lsl.w	r3, r2, r3
 80012be:	43db      	mvns	r3, r3
 80012c0:	68fa      	ldr	r2, [r7, #12]
 80012c2:	4013      	ands	r3, r2
 80012c4:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	4a4b      	ldr	r2, [pc, #300]	; (80013f8 <HAL_GPIO_Init+0x2a0>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d013      	beq.n	80012f6 <HAL_GPIO_Init+0x19e>
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	4a4a      	ldr	r2, [pc, #296]	; (80013fc <HAL_GPIO_Init+0x2a4>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d00d      	beq.n	80012f2 <HAL_GPIO_Init+0x19a>
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	4a49      	ldr	r2, [pc, #292]	; (8001400 <HAL_GPIO_Init+0x2a8>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d007      	beq.n	80012ee <HAL_GPIO_Init+0x196>
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	4a48      	ldr	r2, [pc, #288]	; (8001404 <HAL_GPIO_Init+0x2ac>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d101      	bne.n	80012ea <HAL_GPIO_Init+0x192>
 80012e6:	2303      	movs	r3, #3
 80012e8:	e006      	b.n	80012f8 <HAL_GPIO_Init+0x1a0>
 80012ea:	2304      	movs	r3, #4
 80012ec:	e004      	b.n	80012f8 <HAL_GPIO_Init+0x1a0>
 80012ee:	2302      	movs	r3, #2
 80012f0:	e002      	b.n	80012f8 <HAL_GPIO_Init+0x1a0>
 80012f2:	2301      	movs	r3, #1
 80012f4:	e000      	b.n	80012f8 <HAL_GPIO_Init+0x1a0>
 80012f6:	2300      	movs	r3, #0
 80012f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012fa:	f002 0203 	and.w	r2, r2, #3
 80012fe:	0092      	lsls	r2, r2, #2
 8001300:	4093      	lsls	r3, r2
 8001302:	68fa      	ldr	r2, [r7, #12]
 8001304:	4313      	orrs	r3, r2
 8001306:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001308:	493a      	ldr	r1, [pc, #232]	; (80013f4 <HAL_GPIO_Init+0x29c>)
 800130a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800130c:	089b      	lsrs	r3, r3, #2
 800130e:	3302      	adds	r3, #2
 8001310:	68fa      	ldr	r2, [r7, #12]
 8001312:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800131e:	2b00      	cmp	r3, #0
 8001320:	d006      	beq.n	8001330 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001322:	4b39      	ldr	r3, [pc, #228]	; (8001408 <HAL_GPIO_Init+0x2b0>)
 8001324:	681a      	ldr	r2, [r3, #0]
 8001326:	4938      	ldr	r1, [pc, #224]	; (8001408 <HAL_GPIO_Init+0x2b0>)
 8001328:	69bb      	ldr	r3, [r7, #24]
 800132a:	4313      	orrs	r3, r2
 800132c:	600b      	str	r3, [r1, #0]
 800132e:	e006      	b.n	800133e <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001330:	4b35      	ldr	r3, [pc, #212]	; (8001408 <HAL_GPIO_Init+0x2b0>)
 8001332:	681a      	ldr	r2, [r3, #0]
 8001334:	69bb      	ldr	r3, [r7, #24]
 8001336:	43db      	mvns	r3, r3
 8001338:	4933      	ldr	r1, [pc, #204]	; (8001408 <HAL_GPIO_Init+0x2b0>)
 800133a:	4013      	ands	r3, r2
 800133c:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001346:	2b00      	cmp	r3, #0
 8001348:	d006      	beq.n	8001358 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800134a:	4b2f      	ldr	r3, [pc, #188]	; (8001408 <HAL_GPIO_Init+0x2b0>)
 800134c:	685a      	ldr	r2, [r3, #4]
 800134e:	492e      	ldr	r1, [pc, #184]	; (8001408 <HAL_GPIO_Init+0x2b0>)
 8001350:	69bb      	ldr	r3, [r7, #24]
 8001352:	4313      	orrs	r3, r2
 8001354:	604b      	str	r3, [r1, #4]
 8001356:	e006      	b.n	8001366 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001358:	4b2b      	ldr	r3, [pc, #172]	; (8001408 <HAL_GPIO_Init+0x2b0>)
 800135a:	685a      	ldr	r2, [r3, #4]
 800135c:	69bb      	ldr	r3, [r7, #24]
 800135e:	43db      	mvns	r3, r3
 8001360:	4929      	ldr	r1, [pc, #164]	; (8001408 <HAL_GPIO_Init+0x2b0>)
 8001362:	4013      	ands	r3, r2
 8001364:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800136e:	2b00      	cmp	r3, #0
 8001370:	d006      	beq.n	8001380 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001372:	4b25      	ldr	r3, [pc, #148]	; (8001408 <HAL_GPIO_Init+0x2b0>)
 8001374:	689a      	ldr	r2, [r3, #8]
 8001376:	4924      	ldr	r1, [pc, #144]	; (8001408 <HAL_GPIO_Init+0x2b0>)
 8001378:	69bb      	ldr	r3, [r7, #24]
 800137a:	4313      	orrs	r3, r2
 800137c:	608b      	str	r3, [r1, #8]
 800137e:	e006      	b.n	800138e <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001380:	4b21      	ldr	r3, [pc, #132]	; (8001408 <HAL_GPIO_Init+0x2b0>)
 8001382:	689a      	ldr	r2, [r3, #8]
 8001384:	69bb      	ldr	r3, [r7, #24]
 8001386:	43db      	mvns	r3, r3
 8001388:	491f      	ldr	r1, [pc, #124]	; (8001408 <HAL_GPIO_Init+0x2b0>)
 800138a:	4013      	ands	r3, r2
 800138c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	685b      	ldr	r3, [r3, #4]
 8001392:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001396:	2b00      	cmp	r3, #0
 8001398:	d006      	beq.n	80013a8 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800139a:	4b1b      	ldr	r3, [pc, #108]	; (8001408 <HAL_GPIO_Init+0x2b0>)
 800139c:	68da      	ldr	r2, [r3, #12]
 800139e:	491a      	ldr	r1, [pc, #104]	; (8001408 <HAL_GPIO_Init+0x2b0>)
 80013a0:	69bb      	ldr	r3, [r7, #24]
 80013a2:	4313      	orrs	r3, r2
 80013a4:	60cb      	str	r3, [r1, #12]
 80013a6:	e006      	b.n	80013b6 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80013a8:	4b17      	ldr	r3, [pc, #92]	; (8001408 <HAL_GPIO_Init+0x2b0>)
 80013aa:	68da      	ldr	r2, [r3, #12]
 80013ac:	69bb      	ldr	r3, [r7, #24]
 80013ae:	43db      	mvns	r3, r3
 80013b0:	4915      	ldr	r1, [pc, #84]	; (8001408 <HAL_GPIO_Init+0x2b0>)
 80013b2:	4013      	ands	r3, r2
 80013b4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80013b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013b8:	3301      	adds	r3, #1
 80013ba:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	681a      	ldr	r2, [r3, #0]
 80013c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013c2:	fa22 f303 	lsr.w	r3, r2, r3
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	f47f aed0 	bne.w	800116c <HAL_GPIO_Init+0x14>
  }
}
 80013cc:	bf00      	nop
 80013ce:	372c      	adds	r7, #44	; 0x2c
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bc80      	pop	{r7}
 80013d4:	4770      	bx	lr
 80013d6:	bf00      	nop
 80013d8:	10210000 	.word	0x10210000
 80013dc:	10110000 	.word	0x10110000
 80013e0:	10120000 	.word	0x10120000
 80013e4:	10310000 	.word	0x10310000
 80013e8:	10320000 	.word	0x10320000
 80013ec:	10220000 	.word	0x10220000
 80013f0:	40021000 	.word	0x40021000
 80013f4:	40010000 	.word	0x40010000
 80013f8:	40010800 	.word	0x40010800
 80013fc:	40010c00 	.word	0x40010c00
 8001400:	40011000 	.word	0x40011000
 8001404:	40011400 	.word	0x40011400
 8001408:	40010400 	.word	0x40010400

0800140c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800140c:	b480      	push	{r7}
 800140e:	b083      	sub	sp, #12
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
 8001414:	460b      	mov	r3, r1
 8001416:	807b      	strh	r3, [r7, #2]
 8001418:	4613      	mov	r3, r2
 800141a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800141c:	787b      	ldrb	r3, [r7, #1]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d003      	beq.n	800142a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001422:	887a      	ldrh	r2, [r7, #2]
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001428:	e003      	b.n	8001432 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800142a:	887b      	ldrh	r3, [r7, #2]
 800142c:	041a      	lsls	r2, r3, #16
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	611a      	str	r2, [r3, #16]
}
 8001432:	bf00      	nop
 8001434:	370c      	adds	r7, #12
 8001436:	46bd      	mov	sp, r7
 8001438:	bc80      	pop	{r7}
 800143a:	4770      	bx	lr

0800143c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b084      	sub	sp, #16
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d101      	bne.n	800144e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800144a:	2301      	movs	r3, #1
 800144c:	e11f      	b.n	800168e <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001454:	b2db      	uxtb	r3, r3
 8001456:	2b00      	cmp	r3, #0
 8001458:	d106      	bne.n	8001468 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	2200      	movs	r2, #0
 800145e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001462:	6878      	ldr	r0, [r7, #4]
 8001464:	f7fe ff20 	bl	80002a8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2224      	movs	r2, #36	; 0x24
 800146c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	681a      	ldr	r2, [r3, #0]
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f022 0201 	bic.w	r2, r2, #1
 800147e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	681a      	ldr	r2, [r3, #0]
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800148e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	681a      	ldr	r2, [r3, #0]
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800149e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80014a0:	f001 fc8c 	bl	8002dbc <HAL_RCC_GetPCLK1Freq>
 80014a4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	4a7b      	ldr	r2, [pc, #492]	; (8001698 <HAL_I2C_Init+0x25c>)
 80014ac:	4293      	cmp	r3, r2
 80014ae:	d807      	bhi.n	80014c0 <HAL_I2C_Init+0x84>
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	4a7a      	ldr	r2, [pc, #488]	; (800169c <HAL_I2C_Init+0x260>)
 80014b4:	4293      	cmp	r3, r2
 80014b6:	bf94      	ite	ls
 80014b8:	2301      	movls	r3, #1
 80014ba:	2300      	movhi	r3, #0
 80014bc:	b2db      	uxtb	r3, r3
 80014be:	e006      	b.n	80014ce <HAL_I2C_Init+0x92>
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	4a77      	ldr	r2, [pc, #476]	; (80016a0 <HAL_I2C_Init+0x264>)
 80014c4:	4293      	cmp	r3, r2
 80014c6:	bf94      	ite	ls
 80014c8:	2301      	movls	r3, #1
 80014ca:	2300      	movhi	r3, #0
 80014cc:	b2db      	uxtb	r3, r3
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d001      	beq.n	80014d6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80014d2:	2301      	movs	r3, #1
 80014d4:	e0db      	b.n	800168e <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	4a72      	ldr	r2, [pc, #456]	; (80016a4 <HAL_I2C_Init+0x268>)
 80014da:	fba2 2303 	umull	r2, r3, r2, r3
 80014de:	0c9b      	lsrs	r3, r3, #18
 80014e0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	68ba      	ldr	r2, [r7, #8]
 80014f2:	430a      	orrs	r2, r1
 80014f4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	6a1b      	ldr	r3, [r3, #32]
 80014fc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	4a64      	ldr	r2, [pc, #400]	; (8001698 <HAL_I2C_Init+0x25c>)
 8001506:	4293      	cmp	r3, r2
 8001508:	d802      	bhi.n	8001510 <HAL_I2C_Init+0xd4>
 800150a:	68bb      	ldr	r3, [r7, #8]
 800150c:	3301      	adds	r3, #1
 800150e:	e009      	b.n	8001524 <HAL_I2C_Init+0xe8>
 8001510:	68bb      	ldr	r3, [r7, #8]
 8001512:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001516:	fb02 f303 	mul.w	r3, r2, r3
 800151a:	4a63      	ldr	r2, [pc, #396]	; (80016a8 <HAL_I2C_Init+0x26c>)
 800151c:	fba2 2303 	umull	r2, r3, r2, r3
 8001520:	099b      	lsrs	r3, r3, #6
 8001522:	3301      	adds	r3, #1
 8001524:	687a      	ldr	r2, [r7, #4]
 8001526:	6812      	ldr	r2, [r2, #0]
 8001528:	430b      	orrs	r3, r1
 800152a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	69db      	ldr	r3, [r3, #28]
 8001532:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001536:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	4956      	ldr	r1, [pc, #344]	; (8001698 <HAL_I2C_Init+0x25c>)
 8001540:	428b      	cmp	r3, r1
 8001542:	d80d      	bhi.n	8001560 <HAL_I2C_Init+0x124>
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	1e59      	subs	r1, r3, #1
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	005b      	lsls	r3, r3, #1
 800154e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001552:	3301      	adds	r3, #1
 8001554:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001558:	2b04      	cmp	r3, #4
 800155a:	bf38      	it	cc
 800155c:	2304      	movcc	r3, #4
 800155e:	e04f      	b.n	8001600 <HAL_I2C_Init+0x1c4>
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	689b      	ldr	r3, [r3, #8]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d111      	bne.n	800158c <HAL_I2C_Init+0x150>
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	1e58      	subs	r0, r3, #1
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6859      	ldr	r1, [r3, #4]
 8001570:	460b      	mov	r3, r1
 8001572:	005b      	lsls	r3, r3, #1
 8001574:	440b      	add	r3, r1
 8001576:	fbb0 f3f3 	udiv	r3, r0, r3
 800157a:	3301      	adds	r3, #1
 800157c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001580:	2b00      	cmp	r3, #0
 8001582:	bf0c      	ite	eq
 8001584:	2301      	moveq	r3, #1
 8001586:	2300      	movne	r3, #0
 8001588:	b2db      	uxtb	r3, r3
 800158a:	e012      	b.n	80015b2 <HAL_I2C_Init+0x176>
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	1e58      	subs	r0, r3, #1
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6859      	ldr	r1, [r3, #4]
 8001594:	460b      	mov	r3, r1
 8001596:	009b      	lsls	r3, r3, #2
 8001598:	440b      	add	r3, r1
 800159a:	0099      	lsls	r1, r3, #2
 800159c:	440b      	add	r3, r1
 800159e:	fbb0 f3f3 	udiv	r3, r0, r3
 80015a2:	3301      	adds	r3, #1
 80015a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	bf0c      	ite	eq
 80015ac:	2301      	moveq	r3, #1
 80015ae:	2300      	movne	r3, #0
 80015b0:	b2db      	uxtb	r3, r3
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d001      	beq.n	80015ba <HAL_I2C_Init+0x17e>
 80015b6:	2301      	movs	r3, #1
 80015b8:	e022      	b.n	8001600 <HAL_I2C_Init+0x1c4>
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	689b      	ldr	r3, [r3, #8]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d10e      	bne.n	80015e0 <HAL_I2C_Init+0x1a4>
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	1e58      	subs	r0, r3, #1
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6859      	ldr	r1, [r3, #4]
 80015ca:	460b      	mov	r3, r1
 80015cc:	005b      	lsls	r3, r3, #1
 80015ce:	440b      	add	r3, r1
 80015d0:	fbb0 f3f3 	udiv	r3, r0, r3
 80015d4:	3301      	adds	r3, #1
 80015d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80015de:	e00f      	b.n	8001600 <HAL_I2C_Init+0x1c4>
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	1e58      	subs	r0, r3, #1
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	6859      	ldr	r1, [r3, #4]
 80015e8:	460b      	mov	r3, r1
 80015ea:	009b      	lsls	r3, r3, #2
 80015ec:	440b      	add	r3, r1
 80015ee:	0099      	lsls	r1, r3, #2
 80015f0:	440b      	add	r3, r1
 80015f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80015f6:	3301      	adds	r3, #1
 80015f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015fc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001600:	6879      	ldr	r1, [r7, #4]
 8001602:	6809      	ldr	r1, [r1, #0]
 8001604:	4313      	orrs	r3, r2
 8001606:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	69da      	ldr	r2, [r3, #28]
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6a1b      	ldr	r3, [r3, #32]
 800161a:	431a      	orrs	r2, r3
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	430a      	orrs	r2, r1
 8001622:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	689b      	ldr	r3, [r3, #8]
 800162a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800162e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001632:	687a      	ldr	r2, [r7, #4]
 8001634:	6911      	ldr	r1, [r2, #16]
 8001636:	687a      	ldr	r2, [r7, #4]
 8001638:	68d2      	ldr	r2, [r2, #12]
 800163a:	4311      	orrs	r1, r2
 800163c:	687a      	ldr	r2, [r7, #4]
 800163e:	6812      	ldr	r2, [r2, #0]
 8001640:	430b      	orrs	r3, r1
 8001642:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	68db      	ldr	r3, [r3, #12]
 800164a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	695a      	ldr	r2, [r3, #20]
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	699b      	ldr	r3, [r3, #24]
 8001656:	431a      	orrs	r2, r3
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	430a      	orrs	r2, r1
 800165e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	681a      	ldr	r2, [r3, #0]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f042 0201 	orr.w	r2, r2, #1
 800166e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2200      	movs	r2, #0
 8001674:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	2220      	movs	r2, #32
 800167a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2200      	movs	r2, #0
 8001682:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2200      	movs	r2, #0
 8001688:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800168c:	2300      	movs	r3, #0
}
 800168e:	4618      	mov	r0, r3
 8001690:	3710      	adds	r7, #16
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	000186a0 	.word	0x000186a0
 800169c:	001e847f 	.word	0x001e847f
 80016a0:	003d08ff 	.word	0x003d08ff
 80016a4:	431bde83 	.word	0x431bde83
 80016a8:	10624dd3 	.word	0x10624dd3

080016ac <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b088      	sub	sp, #32
 80016b0:	af02      	add	r7, sp, #8
 80016b2:	60f8      	str	r0, [r7, #12]
 80016b4:	607a      	str	r2, [r7, #4]
 80016b6:	461a      	mov	r2, r3
 80016b8:	460b      	mov	r3, r1
 80016ba:	817b      	strh	r3, [r7, #10]
 80016bc:	4613      	mov	r3, r2
 80016be:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80016c0:	f7ff fc3a 	bl	8000f38 <HAL_GetTick>
 80016c4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80016cc:	b2db      	uxtb	r3, r3
 80016ce:	2b20      	cmp	r3, #32
 80016d0:	f040 80e0 	bne.w	8001894 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	9300      	str	r3, [sp, #0]
 80016d8:	2319      	movs	r3, #25
 80016da:	2201      	movs	r2, #1
 80016dc:	4970      	ldr	r1, [pc, #448]	; (80018a0 <HAL_I2C_Master_Transmit+0x1f4>)
 80016de:	68f8      	ldr	r0, [r7, #12]
 80016e0:	f000 fdba 	bl	8002258 <I2C_WaitOnFlagUntilTimeout>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d001      	beq.n	80016ee <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80016ea:	2302      	movs	r3, #2
 80016ec:	e0d3      	b.n	8001896 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80016f4:	2b01      	cmp	r3, #1
 80016f6:	d101      	bne.n	80016fc <HAL_I2C_Master_Transmit+0x50>
 80016f8:	2302      	movs	r3, #2
 80016fa:	e0cc      	b.n	8001896 <HAL_I2C_Master_Transmit+0x1ea>
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	2201      	movs	r2, #1
 8001700:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f003 0301 	and.w	r3, r3, #1
 800170e:	2b01      	cmp	r3, #1
 8001710:	d007      	beq.n	8001722 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	681a      	ldr	r2, [r3, #0]
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f042 0201 	orr.w	r2, r2, #1
 8001720:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	681a      	ldr	r2, [r3, #0]
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001730:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	2221      	movs	r2, #33	; 0x21
 8001736:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	2210      	movs	r2, #16
 800173e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	2200      	movs	r2, #0
 8001746:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	687a      	ldr	r2, [r7, #4]
 800174c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	893a      	ldrh	r2, [r7, #8]
 8001752:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001758:	b29a      	uxth	r2, r3
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	4a50      	ldr	r2, [pc, #320]	; (80018a4 <HAL_I2C_Master_Transmit+0x1f8>)
 8001762:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001764:	8979      	ldrh	r1, [r7, #10]
 8001766:	697b      	ldr	r3, [r7, #20]
 8001768:	6a3a      	ldr	r2, [r7, #32]
 800176a:	68f8      	ldr	r0, [r7, #12]
 800176c:	f000 fc24 	bl	8001fb8 <I2C_MasterRequestWrite>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	d001      	beq.n	800177a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001776:	2301      	movs	r3, #1
 8001778:	e08d      	b.n	8001896 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800177a:	2300      	movs	r3, #0
 800177c:	613b      	str	r3, [r7, #16]
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	695b      	ldr	r3, [r3, #20]
 8001784:	613b      	str	r3, [r7, #16]
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	699b      	ldr	r3, [r3, #24]
 800178c:	613b      	str	r3, [r7, #16]
 800178e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001790:	e066      	b.n	8001860 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001792:	697a      	ldr	r2, [r7, #20]
 8001794:	6a39      	ldr	r1, [r7, #32]
 8001796:	68f8      	ldr	r0, [r7, #12]
 8001798:	f000 fe34 	bl	8002404 <I2C_WaitOnTXEFlagUntilTimeout>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d00d      	beq.n	80017be <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a6:	2b04      	cmp	r3, #4
 80017a8:	d107      	bne.n	80017ba <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	681a      	ldr	r2, [r3, #0]
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80017b8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80017ba:	2301      	movs	r3, #1
 80017bc:	e06b      	b.n	8001896 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017c2:	781a      	ldrb	r2, [r3, #0]
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ce:	1c5a      	adds	r2, r3, #1
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017d8:	b29b      	uxth	r3, r3
 80017da:	3b01      	subs	r3, #1
 80017dc:	b29a      	uxth	r2, r3
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017e6:	3b01      	subs	r3, #1
 80017e8:	b29a      	uxth	r2, r3
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	695b      	ldr	r3, [r3, #20]
 80017f4:	f003 0304 	and.w	r3, r3, #4
 80017f8:	2b04      	cmp	r3, #4
 80017fa:	d11b      	bne.n	8001834 <HAL_I2C_Master_Transmit+0x188>
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001800:	2b00      	cmp	r3, #0
 8001802:	d017      	beq.n	8001834 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001808:	781a      	ldrb	r2, [r3, #0]
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001814:	1c5a      	adds	r2, r3, #1
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800181e:	b29b      	uxth	r3, r3
 8001820:	3b01      	subs	r3, #1
 8001822:	b29a      	uxth	r2, r3
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800182c:	3b01      	subs	r3, #1
 800182e:	b29a      	uxth	r2, r3
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001834:	697a      	ldr	r2, [r7, #20]
 8001836:	6a39      	ldr	r1, [r7, #32]
 8001838:	68f8      	ldr	r0, [r7, #12]
 800183a:	f000 fe24 	bl	8002486 <I2C_WaitOnBTFFlagUntilTimeout>
 800183e:	4603      	mov	r3, r0
 8001840:	2b00      	cmp	r3, #0
 8001842:	d00d      	beq.n	8001860 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001848:	2b04      	cmp	r3, #4
 800184a:	d107      	bne.n	800185c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	681a      	ldr	r2, [r3, #0]
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800185a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800185c:	2301      	movs	r3, #1
 800185e:	e01a      	b.n	8001896 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001864:	2b00      	cmp	r3, #0
 8001866:	d194      	bne.n	8001792 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	681a      	ldr	r2, [r3, #0]
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001876:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	2220      	movs	r2, #32
 800187c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	2200      	movs	r2, #0
 8001884:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	2200      	movs	r2, #0
 800188c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001890:	2300      	movs	r3, #0
 8001892:	e000      	b.n	8001896 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001894:	2302      	movs	r3, #2
  }
}
 8001896:	4618      	mov	r0, r3
 8001898:	3718      	adds	r7, #24
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	00100002 	.word	0x00100002
 80018a4:	ffff0000 	.word	0xffff0000

080018a8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b08c      	sub	sp, #48	; 0x30
 80018ac:	af02      	add	r7, sp, #8
 80018ae:	60f8      	str	r0, [r7, #12]
 80018b0:	607a      	str	r2, [r7, #4]
 80018b2:	461a      	mov	r2, r3
 80018b4:	460b      	mov	r3, r1
 80018b6:	817b      	strh	r3, [r7, #10]
 80018b8:	4613      	mov	r3, r2
 80018ba:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 80018bc:	2300      	movs	r3, #0
 80018be:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80018c0:	f7ff fb3a 	bl	8000f38 <HAL_GetTick>
 80018c4:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80018cc:	b2db      	uxtb	r3, r3
 80018ce:	2b20      	cmp	r3, #32
 80018d0:	f040 8238 	bne.w	8001d44 <HAL_I2C_Master_Receive+0x49c>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80018d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d6:	9300      	str	r3, [sp, #0]
 80018d8:	2319      	movs	r3, #25
 80018da:	2201      	movs	r2, #1
 80018dc:	497e      	ldr	r1, [pc, #504]	; (8001ad8 <HAL_I2C_Master_Receive+0x230>)
 80018de:	68f8      	ldr	r0, [r7, #12]
 80018e0:	f000 fcba 	bl	8002258 <I2C_WaitOnFlagUntilTimeout>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d001      	beq.n	80018ee <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 80018ea:	2302      	movs	r3, #2
 80018ec:	e22b      	b.n	8001d46 <HAL_I2C_Master_Receive+0x49e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80018f4:	2b01      	cmp	r3, #1
 80018f6:	d101      	bne.n	80018fc <HAL_I2C_Master_Receive+0x54>
 80018f8:	2302      	movs	r3, #2
 80018fa:	e224      	b.n	8001d46 <HAL_I2C_Master_Receive+0x49e>
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	2201      	movs	r2, #1
 8001900:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f003 0301 	and.w	r3, r3, #1
 800190e:	2b01      	cmp	r3, #1
 8001910:	d007      	beq.n	8001922 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	681a      	ldr	r2, [r3, #0]
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f042 0201 	orr.w	r2, r2, #1
 8001920:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	681a      	ldr	r2, [r3, #0]
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001930:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	2222      	movs	r2, #34	; 0x22
 8001936:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	2210      	movs	r2, #16
 800193e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	2200      	movs	r2, #0
 8001946:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	687a      	ldr	r2, [r7, #4]
 800194c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	893a      	ldrh	r2, [r7, #8]
 8001952:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001958:	b29a      	uxth	r2, r3
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	4a5e      	ldr	r2, [pc, #376]	; (8001adc <HAL_I2C_Master_Receive+0x234>)
 8001962:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001964:	8979      	ldrh	r1, [r7, #10]
 8001966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001968:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800196a:	68f8      	ldr	r0, [r7, #12]
 800196c:	f000 fba6 	bl	80020bc <I2C_MasterRequestRead>
 8001970:	4603      	mov	r3, r0
 8001972:	2b00      	cmp	r3, #0
 8001974:	d001      	beq.n	800197a <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8001976:	2301      	movs	r3, #1
 8001978:	e1e5      	b.n	8001d46 <HAL_I2C_Master_Receive+0x49e>
    }

    if (hi2c->XferSize == 0U)
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800197e:	2b00      	cmp	r3, #0
 8001980:	d113      	bne.n	80019aa <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001982:	2300      	movs	r3, #0
 8001984:	61fb      	str	r3, [r7, #28]
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	695b      	ldr	r3, [r3, #20]
 800198c:	61fb      	str	r3, [r7, #28]
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	699b      	ldr	r3, [r3, #24]
 8001994:	61fb      	str	r3, [r7, #28]
 8001996:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	681a      	ldr	r2, [r3, #0]
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80019a6:	601a      	str	r2, [r3, #0]
 80019a8:	e1b9      	b.n	8001d1e <HAL_I2C_Master_Receive+0x476>
    }
    else if (hi2c->XferSize == 1U)
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019ae:	2b01      	cmp	r3, #1
 80019b0:	d11d      	bne.n	80019ee <HAL_I2C_Master_Receive+0x146>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	681a      	ldr	r2, [r3, #0]
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80019c0:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019c2:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80019c4:	2300      	movs	r3, #0
 80019c6:	61bb      	str	r3, [r7, #24]
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	695b      	ldr	r3, [r3, #20]
 80019ce:	61bb      	str	r3, [r7, #24]
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	699b      	ldr	r3, [r3, #24]
 80019d6:	61bb      	str	r3, [r7, #24]
 80019d8:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	681a      	ldr	r2, [r3, #0]
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80019e8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80019ea:	b662      	cpsie	i
 80019ec:	e197      	b.n	8001d1e <HAL_I2C_Master_Receive+0x476>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019f2:	2b02      	cmp	r3, #2
 80019f4:	d11d      	bne.n	8001a32 <HAL_I2C_Master_Receive+0x18a>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	681a      	ldr	r2, [r3, #0]
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001a04:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001a06:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a08:	2300      	movs	r3, #0
 8001a0a:	617b      	str	r3, [r7, #20]
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	695b      	ldr	r3, [r3, #20]
 8001a12:	617b      	str	r3, [r7, #20]
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	699b      	ldr	r3, [r3, #24]
 8001a1a:	617b      	str	r3, [r7, #20]
 8001a1c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	681a      	ldr	r2, [r3, #0]
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001a2c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001a2e:	b662      	cpsie	i
 8001a30:	e175      	b.n	8001d1e <HAL_I2C_Master_Receive+0x476>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	681a      	ldr	r2, [r3, #0]
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001a40:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a42:	2300      	movs	r3, #0
 8001a44:	613b      	str	r3, [r7, #16]
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	695b      	ldr	r3, [r3, #20]
 8001a4c:	613b      	str	r3, [r7, #16]
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	699b      	ldr	r3, [r3, #24]
 8001a54:	613b      	str	r3, [r7, #16]
 8001a56:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8001a58:	e161      	b.n	8001d1e <HAL_I2C_Master_Receive+0x476>
    {
      if (hi2c->XferSize <= 3U)
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a5e:	2b03      	cmp	r3, #3
 8001a60:	f200 811a 	bhi.w	8001c98 <HAL_I2C_Master_Receive+0x3f0>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a68:	2b01      	cmp	r3, #1
 8001a6a:	d123      	bne.n	8001ab4 <HAL_I2C_Master_Receive+0x20c>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a6e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001a70:	68f8      	ldr	r0, [r7, #12]
 8001a72:	f000 fd49 	bl	8002508 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001a76:	4603      	mov	r3, r0
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d001      	beq.n	8001a80 <HAL_I2C_Master_Receive+0x1d8>
          {
            return HAL_ERROR;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	e162      	b.n	8001d46 <HAL_I2C_Master_Receive+0x49e>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	691a      	ldr	r2, [r3, #16]
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a8a:	b2d2      	uxtb	r2, r2
 8001a8c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a92:	1c5a      	adds	r2, r3, #1
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a9c:	3b01      	subs	r3, #1
 8001a9e:	b29a      	uxth	r2, r3
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001aa8:	b29b      	uxth	r3, r3
 8001aaa:	3b01      	subs	r3, #1
 8001aac:	b29a      	uxth	r2, r3
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001ab2:	e134      	b.n	8001d1e <HAL_I2C_Master_Receive+0x476>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ab8:	2b02      	cmp	r3, #2
 8001aba:	d150      	bne.n	8001b5e <HAL_I2C_Master_Receive+0x2b6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001abe:	9300      	str	r3, [sp, #0]
 8001ac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	4906      	ldr	r1, [pc, #24]	; (8001ae0 <HAL_I2C_Master_Receive+0x238>)
 8001ac6:	68f8      	ldr	r0, [r7, #12]
 8001ac8:	f000 fbc6 	bl	8002258 <I2C_WaitOnFlagUntilTimeout>
 8001acc:	4603      	mov	r3, r0
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d008      	beq.n	8001ae4 <HAL_I2C_Master_Receive+0x23c>
          {
            return HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e137      	b.n	8001d46 <HAL_I2C_Master_Receive+0x49e>
 8001ad6:	bf00      	nop
 8001ad8:	00100002 	.word	0x00100002
 8001adc:	ffff0000 	.word	0xffff0000
 8001ae0:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8001ae4:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	681a      	ldr	r2, [r3, #0]
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001af4:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	691a      	ldr	r2, [r3, #16]
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b00:	b2d2      	uxtb	r2, r2
 8001b02:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b08:	1c5a      	adds	r2, r3, #1
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b12:	3b01      	subs	r3, #1
 8001b14:	b29a      	uxth	r2, r3
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b1e:	b29b      	uxth	r3, r3
 8001b20:	3b01      	subs	r3, #1
 8001b22:	b29a      	uxth	r2, r3
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001b28:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	691a      	ldr	r2, [r3, #16]
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b34:	b2d2      	uxtb	r2, r2
 8001b36:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b3c:	1c5a      	adds	r2, r3, #1
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b46:	3b01      	subs	r3, #1
 8001b48:	b29a      	uxth	r2, r3
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b52:	b29b      	uxth	r3, r3
 8001b54:	3b01      	subs	r3, #1
 8001b56:	b29a      	uxth	r2, r3
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001b5c:	e0df      	b.n	8001d1e <HAL_I2C_Master_Receive+0x476>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b60:	9300      	str	r3, [sp, #0]
 8001b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b64:	2200      	movs	r2, #0
 8001b66:	497a      	ldr	r1, [pc, #488]	; (8001d50 <HAL_I2C_Master_Receive+0x4a8>)
 8001b68:	68f8      	ldr	r0, [r7, #12]
 8001b6a:	f000 fb75 	bl	8002258 <I2C_WaitOnFlagUntilTimeout>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d001      	beq.n	8001b78 <HAL_I2C_Master_Receive+0x2d0>
          {
            return HAL_ERROR;
 8001b74:	2301      	movs	r3, #1
 8001b76:	e0e6      	b.n	8001d46 <HAL_I2C_Master_Receive+0x49e>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	681a      	ldr	r2, [r3, #0]
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b86:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001b88:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	691a      	ldr	r2, [r3, #16]
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b94:	b2d2      	uxtb	r2, r2
 8001b96:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b9c:	1c5a      	adds	r2, r3, #1
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ba6:	3b01      	subs	r3, #1
 8001ba8:	b29a      	uxth	r2, r3
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bb2:	b29b      	uxth	r3, r3
 8001bb4:	3b01      	subs	r3, #1
 8001bb6:	b29a      	uxth	r2, r3
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8001bbc:	4b65      	ldr	r3, [pc, #404]	; (8001d54 <HAL_I2C_Master_Receive+0x4ac>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	08db      	lsrs	r3, r3, #3
 8001bc2:	4a65      	ldr	r2, [pc, #404]	; (8001d58 <HAL_I2C_Master_Receive+0x4b0>)
 8001bc4:	fba2 2303 	umull	r2, r3, r2, r3
 8001bc8:	0a1a      	lsrs	r2, r3, #8
 8001bca:	4613      	mov	r3, r2
 8001bcc:	009b      	lsls	r3, r3, #2
 8001bce:	4413      	add	r3, r2
 8001bd0:	00da      	lsls	r2, r3, #3
 8001bd2:	1ad3      	subs	r3, r2, r3
 8001bd4:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8001bd6:	6a3b      	ldr	r3, [r7, #32]
 8001bd8:	3b01      	subs	r3, #1
 8001bda:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8001bdc:	6a3b      	ldr	r3, [r7, #32]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d117      	bne.n	8001c12 <HAL_I2C_Master_Receive+0x36a>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	2200      	movs	r2, #0
 8001be6:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	2220      	movs	r2, #32
 8001bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bfc:	f043 0220 	orr.w	r2, r3, #32
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8001c04:	b662      	cpsie	i

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	2200      	movs	r2, #0
 8001c0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	e099      	b.n	8001d46 <HAL_I2C_Master_Receive+0x49e>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	695b      	ldr	r3, [r3, #20]
 8001c18:	f003 0304 	and.w	r3, r3, #4
 8001c1c:	2b04      	cmp	r3, #4
 8001c1e:	d1da      	bne.n	8001bd6 <HAL_I2C_Master_Receive+0x32e>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	681a      	ldr	r2, [r3, #0]
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c2e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	691a      	ldr	r2, [r3, #16]
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c3a:	b2d2      	uxtb	r2, r2
 8001c3c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c42:	1c5a      	adds	r2, r3, #1
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c4c:	3b01      	subs	r3, #1
 8001c4e:	b29a      	uxth	r2, r3
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c58:	b29b      	uxth	r3, r3
 8001c5a:	3b01      	subs	r3, #1
 8001c5c:	b29a      	uxth	r2, r3
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001c62:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	691a      	ldr	r2, [r3, #16]
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c6e:	b2d2      	uxtb	r2, r2
 8001c70:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c76:	1c5a      	adds	r2, r3, #1
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c80:	3b01      	subs	r3, #1
 8001c82:	b29a      	uxth	r2, r3
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c8c:	b29b      	uxth	r3, r3
 8001c8e:	3b01      	subs	r3, #1
 8001c90:	b29a      	uxth	r2, r3
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001c96:	e042      	b.n	8001d1e <HAL_I2C_Master_Receive+0x476>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c9a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001c9c:	68f8      	ldr	r0, [r7, #12]
 8001c9e:	f000 fc33 	bl	8002508 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d001      	beq.n	8001cac <HAL_I2C_Master_Receive+0x404>
        {
          return HAL_ERROR;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	e04c      	b.n	8001d46 <HAL_I2C_Master_Receive+0x49e>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	691a      	ldr	r2, [r3, #16]
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cb6:	b2d2      	uxtb	r2, r2
 8001cb8:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cbe:	1c5a      	adds	r2, r3, #1
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cc8:	3b01      	subs	r3, #1
 8001cca:	b29a      	uxth	r2, r3
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cd4:	b29b      	uxth	r3, r3
 8001cd6:	3b01      	subs	r3, #1
 8001cd8:	b29a      	uxth	r2, r3
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	695b      	ldr	r3, [r3, #20]
 8001ce4:	f003 0304 	and.w	r3, r3, #4
 8001ce8:	2b04      	cmp	r3, #4
 8001cea:	d118      	bne.n	8001d1e <HAL_I2C_Master_Receive+0x476>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	691a      	ldr	r2, [r3, #16]
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cf6:	b2d2      	uxtb	r2, r2
 8001cf8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cfe:	1c5a      	adds	r2, r3, #1
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d08:	3b01      	subs	r3, #1
 8001d0a:	b29a      	uxth	r2, r3
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d14:	b29b      	uxth	r3, r3
 8001d16:	3b01      	subs	r3, #1
 8001d18:	b29a      	uxth	r2, r3
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	f47f ae99 	bne.w	8001a5a <HAL_I2C_Master_Receive+0x1b2>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	2220      	movs	r2, #32
 8001d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	2200      	movs	r2, #0
 8001d34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001d40:	2300      	movs	r3, #0
 8001d42:	e000      	b.n	8001d46 <HAL_I2C_Master_Receive+0x49e>
  }
  else
  {
    return HAL_BUSY;
 8001d44:	2302      	movs	r3, #2
  }
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	3728      	adds	r7, #40	; 0x28
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	00010004 	.word	0x00010004
 8001d54:	20000000 	.word	0x20000000
 8001d58:	14f8b589 	.word	0x14f8b589

08001d5c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b08a      	sub	sp, #40	; 0x28
 8001d60:	af02      	add	r7, sp, #8
 8001d62:	60f8      	str	r0, [r7, #12]
 8001d64:	607a      	str	r2, [r7, #4]
 8001d66:	603b      	str	r3, [r7, #0]
 8001d68:	460b      	mov	r3, r1
 8001d6a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8001d6c:	f7ff f8e4 	bl	8000f38 <HAL_GetTick>
 8001d70:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8001d72:	2301      	movs	r3, #1
 8001d74:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d7c:	b2db      	uxtb	r3, r3
 8001d7e:	2b20      	cmp	r3, #32
 8001d80:	f040 8111 	bne.w	8001fa6 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001d84:	69fb      	ldr	r3, [r7, #28]
 8001d86:	9300      	str	r3, [sp, #0]
 8001d88:	2319      	movs	r3, #25
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	4988      	ldr	r1, [pc, #544]	; (8001fb0 <HAL_I2C_IsDeviceReady+0x254>)
 8001d8e:	68f8      	ldr	r0, [r7, #12]
 8001d90:	f000 fa62 	bl	8002258 <I2C_WaitOnFlagUntilTimeout>
 8001d94:	4603      	mov	r3, r0
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d001      	beq.n	8001d9e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8001d9a:	2302      	movs	r3, #2
 8001d9c:	e104      	b.n	8001fa8 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001da4:	2b01      	cmp	r3, #1
 8001da6:	d101      	bne.n	8001dac <HAL_I2C_IsDeviceReady+0x50>
 8001da8:	2302      	movs	r3, #2
 8001daa:	e0fd      	b.n	8001fa8 <HAL_I2C_IsDeviceReady+0x24c>
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	2201      	movs	r2, #1
 8001db0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f003 0301 	and.w	r3, r3, #1
 8001dbe:	2b01      	cmp	r3, #1
 8001dc0:	d007      	beq.n	8001dd2 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	681a      	ldr	r2, [r3, #0]
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f042 0201 	orr.w	r2, r2, #1
 8001dd0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	681a      	ldr	r2, [r3, #0]
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001de0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	2224      	movs	r2, #36	; 0x24
 8001de6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	2200      	movs	r2, #0
 8001dee:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	4a70      	ldr	r2, [pc, #448]	; (8001fb4 <HAL_I2C_IsDeviceReady+0x258>)
 8001df4:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	681a      	ldr	r2, [r3, #0]
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001e04:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8001e06:	69fb      	ldr	r3, [r7, #28]
 8001e08:	9300      	str	r3, [sp, #0]
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001e12:	68f8      	ldr	r0, [r7, #12]
 8001e14:	f000 fa20 	bl	8002258 <I2C_WaitOnFlagUntilTimeout>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d00d      	beq.n	8001e3a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e2c:	d103      	bne.n	8001e36 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e34:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8001e36:	2303      	movs	r3, #3
 8001e38:	e0b6      	b.n	8001fa8 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001e3a:	897b      	ldrh	r3, [r7, #10]
 8001e3c:	b2db      	uxtb	r3, r3
 8001e3e:	461a      	mov	r2, r3
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001e48:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8001e4a:	f7ff f875 	bl	8000f38 <HAL_GetTick>
 8001e4e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	695b      	ldr	r3, [r3, #20]
 8001e56:	f003 0302 	and.w	r3, r3, #2
 8001e5a:	2b02      	cmp	r3, #2
 8001e5c:	bf0c      	ite	eq
 8001e5e:	2301      	moveq	r3, #1
 8001e60:	2300      	movne	r3, #0
 8001e62:	b2db      	uxtb	r3, r3
 8001e64:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	695b      	ldr	r3, [r3, #20]
 8001e6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e74:	bf0c      	ite	eq
 8001e76:	2301      	moveq	r3, #1
 8001e78:	2300      	movne	r3, #0
 8001e7a:	b2db      	uxtb	r3, r3
 8001e7c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001e7e:	e025      	b.n	8001ecc <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001e80:	f7ff f85a 	bl	8000f38 <HAL_GetTick>
 8001e84:	4602      	mov	r2, r0
 8001e86:	69fb      	ldr	r3, [r7, #28]
 8001e88:	1ad3      	subs	r3, r2, r3
 8001e8a:	683a      	ldr	r2, [r7, #0]
 8001e8c:	429a      	cmp	r2, r3
 8001e8e:	d302      	bcc.n	8001e96 <HAL_I2C_IsDeviceReady+0x13a>
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d103      	bne.n	8001e9e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	22a0      	movs	r2, #160	; 0xa0
 8001e9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	695b      	ldr	r3, [r3, #20]
 8001ea4:	f003 0302 	and.w	r3, r3, #2
 8001ea8:	2b02      	cmp	r3, #2
 8001eaa:	bf0c      	ite	eq
 8001eac:	2301      	moveq	r3, #1
 8001eae:	2300      	movne	r3, #0
 8001eb0:	b2db      	uxtb	r3, r3
 8001eb2:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	695b      	ldr	r3, [r3, #20]
 8001eba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ebe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ec2:	bf0c      	ite	eq
 8001ec4:	2301      	moveq	r3, #1
 8001ec6:	2300      	movne	r3, #0
 8001ec8:	b2db      	uxtb	r3, r3
 8001eca:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ed2:	b2db      	uxtb	r3, r3
 8001ed4:	2ba0      	cmp	r3, #160	; 0xa0
 8001ed6:	d005      	beq.n	8001ee4 <HAL_I2C_IsDeviceReady+0x188>
 8001ed8:	7dfb      	ldrb	r3, [r7, #23]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d102      	bne.n	8001ee4 <HAL_I2C_IsDeviceReady+0x188>
 8001ede:	7dbb      	ldrb	r3, [r7, #22]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d0cd      	beq.n	8001e80 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	2220      	movs	r2, #32
 8001ee8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	695b      	ldr	r3, [r3, #20]
 8001ef2:	f003 0302 	and.w	r3, r3, #2
 8001ef6:	2b02      	cmp	r3, #2
 8001ef8:	d129      	bne.n	8001f4e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	681a      	ldr	r2, [r3, #0]
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f08:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	613b      	str	r3, [r7, #16]
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	695b      	ldr	r3, [r3, #20]
 8001f14:	613b      	str	r3, [r7, #16]
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	699b      	ldr	r3, [r3, #24]
 8001f1c:	613b      	str	r3, [r7, #16]
 8001f1e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001f20:	69fb      	ldr	r3, [r7, #28]
 8001f22:	9300      	str	r3, [sp, #0]
 8001f24:	2319      	movs	r3, #25
 8001f26:	2201      	movs	r2, #1
 8001f28:	4921      	ldr	r1, [pc, #132]	; (8001fb0 <HAL_I2C_IsDeviceReady+0x254>)
 8001f2a:	68f8      	ldr	r0, [r7, #12]
 8001f2c:	f000 f994 	bl	8002258 <I2C_WaitOnFlagUntilTimeout>
 8001f30:	4603      	mov	r3, r0
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d001      	beq.n	8001f3a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8001f36:	2301      	movs	r3, #1
 8001f38:	e036      	b.n	8001fa8 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	2220      	movs	r2, #32
 8001f3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	2200      	movs	r2, #0
 8001f46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	e02c      	b.n	8001fa8 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	681a      	ldr	r2, [r3, #0]
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f5c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001f66:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001f68:	69fb      	ldr	r3, [r7, #28]
 8001f6a:	9300      	str	r3, [sp, #0]
 8001f6c:	2319      	movs	r3, #25
 8001f6e:	2201      	movs	r2, #1
 8001f70:	490f      	ldr	r1, [pc, #60]	; (8001fb0 <HAL_I2C_IsDeviceReady+0x254>)
 8001f72:	68f8      	ldr	r0, [r7, #12]
 8001f74:	f000 f970 	bl	8002258 <I2C_WaitOnFlagUntilTimeout>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d001      	beq.n	8001f82 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	e012      	b.n	8001fa8 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8001f82:	69bb      	ldr	r3, [r7, #24]
 8001f84:	3301      	adds	r3, #1
 8001f86:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8001f88:	69ba      	ldr	r2, [r7, #24]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	429a      	cmp	r2, r3
 8001f8e:	f4ff af32 	bcc.w	8001df6 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	2220      	movs	r2, #32
 8001f96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e000      	b.n	8001fa8 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8001fa6:	2302      	movs	r3, #2
  }
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	3720      	adds	r7, #32
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	00100002 	.word	0x00100002
 8001fb4:	ffff0000 	.word	0xffff0000

08001fb8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b088      	sub	sp, #32
 8001fbc:	af02      	add	r7, sp, #8
 8001fbe:	60f8      	str	r0, [r7, #12]
 8001fc0:	607a      	str	r2, [r7, #4]
 8001fc2:	603b      	str	r3, [r7, #0]
 8001fc4:	460b      	mov	r3, r1
 8001fc6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fcc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	2b08      	cmp	r3, #8
 8001fd2:	d006      	beq.n	8001fe2 <I2C_MasterRequestWrite+0x2a>
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	2b01      	cmp	r3, #1
 8001fd8:	d003      	beq.n	8001fe2 <I2C_MasterRequestWrite+0x2a>
 8001fda:	697b      	ldr	r3, [r7, #20]
 8001fdc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001fe0:	d108      	bne.n	8001ff4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	681a      	ldr	r2, [r3, #0]
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001ff0:	601a      	str	r2, [r3, #0]
 8001ff2:	e00b      	b.n	800200c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff8:	2b12      	cmp	r3, #18
 8001ffa:	d107      	bne.n	800200c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	681a      	ldr	r2, [r3, #0]
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800200a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	9300      	str	r3, [sp, #0]
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2200      	movs	r2, #0
 8002014:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002018:	68f8      	ldr	r0, [r7, #12]
 800201a:	f000 f91d 	bl	8002258 <I2C_WaitOnFlagUntilTimeout>
 800201e:	4603      	mov	r3, r0
 8002020:	2b00      	cmp	r3, #0
 8002022:	d00d      	beq.n	8002040 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800202e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002032:	d103      	bne.n	800203c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	f44f 7200 	mov.w	r2, #512	; 0x200
 800203a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800203c:	2303      	movs	r3, #3
 800203e:	e035      	b.n	80020ac <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	691b      	ldr	r3, [r3, #16]
 8002044:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002048:	d108      	bne.n	800205c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800204a:	897b      	ldrh	r3, [r7, #10]
 800204c:	b2db      	uxtb	r3, r3
 800204e:	461a      	mov	r2, r3
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002058:	611a      	str	r2, [r3, #16]
 800205a:	e01b      	b.n	8002094 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800205c:	897b      	ldrh	r3, [r7, #10]
 800205e:	11db      	asrs	r3, r3, #7
 8002060:	b2db      	uxtb	r3, r3
 8002062:	f003 0306 	and.w	r3, r3, #6
 8002066:	b2db      	uxtb	r3, r3
 8002068:	f063 030f 	orn	r3, r3, #15
 800206c:	b2da      	uxtb	r2, r3
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	687a      	ldr	r2, [r7, #4]
 8002078:	490e      	ldr	r1, [pc, #56]	; (80020b4 <I2C_MasterRequestWrite+0xfc>)
 800207a:	68f8      	ldr	r0, [r7, #12]
 800207c:	f000 f943 	bl	8002306 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002080:	4603      	mov	r3, r0
 8002082:	2b00      	cmp	r3, #0
 8002084:	d001      	beq.n	800208a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002086:	2301      	movs	r3, #1
 8002088:	e010      	b.n	80020ac <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800208a:	897b      	ldrh	r3, [r7, #10]
 800208c:	b2da      	uxtb	r2, r3
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	687a      	ldr	r2, [r7, #4]
 8002098:	4907      	ldr	r1, [pc, #28]	; (80020b8 <I2C_MasterRequestWrite+0x100>)
 800209a:	68f8      	ldr	r0, [r7, #12]
 800209c:	f000 f933 	bl	8002306 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80020a0:	4603      	mov	r3, r0
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d001      	beq.n	80020aa <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80020a6:	2301      	movs	r3, #1
 80020a8:	e000      	b.n	80020ac <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80020aa:	2300      	movs	r3, #0
}
 80020ac:	4618      	mov	r0, r3
 80020ae:	3718      	adds	r7, #24
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}
 80020b4:	00010008 	.word	0x00010008
 80020b8:	00010002 	.word	0x00010002

080020bc <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b088      	sub	sp, #32
 80020c0:	af02      	add	r7, sp, #8
 80020c2:	60f8      	str	r0, [r7, #12]
 80020c4:	607a      	str	r2, [r7, #4]
 80020c6:	603b      	str	r3, [r7, #0]
 80020c8:	460b      	mov	r3, r1
 80020ca:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020d0:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	681a      	ldr	r2, [r3, #0]
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80020e0:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	2b08      	cmp	r3, #8
 80020e6:	d006      	beq.n	80020f6 <I2C_MasterRequestRead+0x3a>
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	2b01      	cmp	r3, #1
 80020ec:	d003      	beq.n	80020f6 <I2C_MasterRequestRead+0x3a>
 80020ee:	697b      	ldr	r3, [r7, #20]
 80020f0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80020f4:	d108      	bne.n	8002108 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	681a      	ldr	r2, [r3, #0]
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002104:	601a      	str	r2, [r3, #0]
 8002106:	e00b      	b.n	8002120 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800210c:	2b11      	cmp	r3, #17
 800210e:	d107      	bne.n	8002120 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	681a      	ldr	r2, [r3, #0]
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800211e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	9300      	str	r3, [sp, #0]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2200      	movs	r2, #0
 8002128:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800212c:	68f8      	ldr	r0, [r7, #12]
 800212e:	f000 f893 	bl	8002258 <I2C_WaitOnFlagUntilTimeout>
 8002132:	4603      	mov	r3, r0
 8002134:	2b00      	cmp	r3, #0
 8002136:	d00d      	beq.n	8002154 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002142:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002146:	d103      	bne.n	8002150 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800214e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002150:	2303      	movs	r3, #3
 8002152:	e079      	b.n	8002248 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	691b      	ldr	r3, [r3, #16]
 8002158:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800215c:	d108      	bne.n	8002170 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800215e:	897b      	ldrh	r3, [r7, #10]
 8002160:	b2db      	uxtb	r3, r3
 8002162:	f043 0301 	orr.w	r3, r3, #1
 8002166:	b2da      	uxtb	r2, r3
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	611a      	str	r2, [r3, #16]
 800216e:	e05f      	b.n	8002230 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002170:	897b      	ldrh	r3, [r7, #10]
 8002172:	11db      	asrs	r3, r3, #7
 8002174:	b2db      	uxtb	r3, r3
 8002176:	f003 0306 	and.w	r3, r3, #6
 800217a:	b2db      	uxtb	r3, r3
 800217c:	f063 030f 	orn	r3, r3, #15
 8002180:	b2da      	uxtb	r2, r3
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	687a      	ldr	r2, [r7, #4]
 800218c:	4930      	ldr	r1, [pc, #192]	; (8002250 <I2C_MasterRequestRead+0x194>)
 800218e:	68f8      	ldr	r0, [r7, #12]
 8002190:	f000 f8b9 	bl	8002306 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002194:	4603      	mov	r3, r0
 8002196:	2b00      	cmp	r3, #0
 8002198:	d001      	beq.n	800219e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	e054      	b.n	8002248 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800219e:	897b      	ldrh	r3, [r7, #10]
 80021a0:	b2da      	uxtb	r2, r3
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	687a      	ldr	r2, [r7, #4]
 80021ac:	4929      	ldr	r1, [pc, #164]	; (8002254 <I2C_MasterRequestRead+0x198>)
 80021ae:	68f8      	ldr	r0, [r7, #12]
 80021b0:	f000 f8a9 	bl	8002306 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80021b4:	4603      	mov	r3, r0
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d001      	beq.n	80021be <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
 80021bc:	e044      	b.n	8002248 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021be:	2300      	movs	r3, #0
 80021c0:	613b      	str	r3, [r7, #16]
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	695b      	ldr	r3, [r3, #20]
 80021c8:	613b      	str	r3, [r7, #16]
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	699b      	ldr	r3, [r3, #24]
 80021d0:	613b      	str	r3, [r7, #16]
 80021d2:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	681a      	ldr	r2, [r3, #0]
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80021e2:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	9300      	str	r3, [sp, #0]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2200      	movs	r2, #0
 80021ec:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80021f0:	68f8      	ldr	r0, [r7, #12]
 80021f2:	f000 f831 	bl	8002258 <I2C_WaitOnFlagUntilTimeout>
 80021f6:	4603      	mov	r3, r0
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d00d      	beq.n	8002218 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002206:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800220a:	d103      	bne.n	8002214 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002212:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8002214:	2303      	movs	r3, #3
 8002216:	e017      	b.n	8002248 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002218:	897b      	ldrh	r3, [r7, #10]
 800221a:	11db      	asrs	r3, r3, #7
 800221c:	b2db      	uxtb	r3, r3
 800221e:	f003 0306 	and.w	r3, r3, #6
 8002222:	b2db      	uxtb	r3, r3
 8002224:	f063 030e 	orn	r3, r3, #14
 8002228:	b2da      	uxtb	r2, r3
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	687a      	ldr	r2, [r7, #4]
 8002234:	4907      	ldr	r1, [pc, #28]	; (8002254 <I2C_MasterRequestRead+0x198>)
 8002236:	68f8      	ldr	r0, [r7, #12]
 8002238:	f000 f865 	bl	8002306 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800223c:	4603      	mov	r3, r0
 800223e:	2b00      	cmp	r3, #0
 8002240:	d001      	beq.n	8002246 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002242:	2301      	movs	r3, #1
 8002244:	e000      	b.n	8002248 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002246:	2300      	movs	r3, #0
}
 8002248:	4618      	mov	r0, r3
 800224a:	3718      	adds	r7, #24
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}
 8002250:	00010008 	.word	0x00010008
 8002254:	00010002 	.word	0x00010002

08002258 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b084      	sub	sp, #16
 800225c:	af00      	add	r7, sp, #0
 800225e:	60f8      	str	r0, [r7, #12]
 8002260:	60b9      	str	r1, [r7, #8]
 8002262:	603b      	str	r3, [r7, #0]
 8002264:	4613      	mov	r3, r2
 8002266:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002268:	e025      	b.n	80022b6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002270:	d021      	beq.n	80022b6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002272:	f7fe fe61 	bl	8000f38 <HAL_GetTick>
 8002276:	4602      	mov	r2, r0
 8002278:	69bb      	ldr	r3, [r7, #24]
 800227a:	1ad3      	subs	r3, r2, r3
 800227c:	683a      	ldr	r2, [r7, #0]
 800227e:	429a      	cmp	r2, r3
 8002280:	d302      	bcc.n	8002288 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d116      	bne.n	80022b6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	2200      	movs	r2, #0
 800228c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	2220      	movs	r2, #32
 8002292:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	2200      	movs	r2, #0
 800229a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a2:	f043 0220 	orr.w	r2, r3, #32
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	2200      	movs	r2, #0
 80022ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
 80022b4:	e023      	b.n	80022fe <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80022b6:	68bb      	ldr	r3, [r7, #8]
 80022b8:	0c1b      	lsrs	r3, r3, #16
 80022ba:	b2db      	uxtb	r3, r3
 80022bc:	2b01      	cmp	r3, #1
 80022be:	d10d      	bne.n	80022dc <I2C_WaitOnFlagUntilTimeout+0x84>
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	695b      	ldr	r3, [r3, #20]
 80022c6:	43da      	mvns	r2, r3
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	4013      	ands	r3, r2
 80022cc:	b29b      	uxth	r3, r3
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	bf0c      	ite	eq
 80022d2:	2301      	moveq	r3, #1
 80022d4:	2300      	movne	r3, #0
 80022d6:	b2db      	uxtb	r3, r3
 80022d8:	461a      	mov	r2, r3
 80022da:	e00c      	b.n	80022f6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	699b      	ldr	r3, [r3, #24]
 80022e2:	43da      	mvns	r2, r3
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	4013      	ands	r3, r2
 80022e8:	b29b      	uxth	r3, r3
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	bf0c      	ite	eq
 80022ee:	2301      	moveq	r3, #1
 80022f0:	2300      	movne	r3, #0
 80022f2:	b2db      	uxtb	r3, r3
 80022f4:	461a      	mov	r2, r3
 80022f6:	79fb      	ldrb	r3, [r7, #7]
 80022f8:	429a      	cmp	r2, r3
 80022fa:	d0b6      	beq.n	800226a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80022fc:	2300      	movs	r3, #0
}
 80022fe:	4618      	mov	r0, r3
 8002300:	3710      	adds	r7, #16
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}

08002306 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002306:	b580      	push	{r7, lr}
 8002308:	b084      	sub	sp, #16
 800230a:	af00      	add	r7, sp, #0
 800230c:	60f8      	str	r0, [r7, #12]
 800230e:	60b9      	str	r1, [r7, #8]
 8002310:	607a      	str	r2, [r7, #4]
 8002312:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002314:	e051      	b.n	80023ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	695b      	ldr	r3, [r3, #20]
 800231c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002320:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002324:	d123      	bne.n	800236e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	681a      	ldr	r2, [r3, #0]
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002334:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800233e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	2200      	movs	r2, #0
 8002344:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	2220      	movs	r2, #32
 800234a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	2200      	movs	r2, #0
 8002352:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800235a:	f043 0204 	orr.w	r2, r3, #4
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	2200      	movs	r2, #0
 8002366:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	e046      	b.n	80023fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002374:	d021      	beq.n	80023ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002376:	f7fe fddf 	bl	8000f38 <HAL_GetTick>
 800237a:	4602      	mov	r2, r0
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	1ad3      	subs	r3, r2, r3
 8002380:	687a      	ldr	r2, [r7, #4]
 8002382:	429a      	cmp	r2, r3
 8002384:	d302      	bcc.n	800238c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d116      	bne.n	80023ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	2200      	movs	r2, #0
 8002390:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	2220      	movs	r2, #32
 8002396:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	2200      	movs	r2, #0
 800239e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a6:	f043 0220 	orr.w	r2, r3, #32
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	2200      	movs	r2, #0
 80023b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80023b6:	2301      	movs	r3, #1
 80023b8:	e020      	b.n	80023fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80023ba:	68bb      	ldr	r3, [r7, #8]
 80023bc:	0c1b      	lsrs	r3, r3, #16
 80023be:	b2db      	uxtb	r3, r3
 80023c0:	2b01      	cmp	r3, #1
 80023c2:	d10c      	bne.n	80023de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	695b      	ldr	r3, [r3, #20]
 80023ca:	43da      	mvns	r2, r3
 80023cc:	68bb      	ldr	r3, [r7, #8]
 80023ce:	4013      	ands	r3, r2
 80023d0:	b29b      	uxth	r3, r3
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	bf14      	ite	ne
 80023d6:	2301      	movne	r3, #1
 80023d8:	2300      	moveq	r3, #0
 80023da:	b2db      	uxtb	r3, r3
 80023dc:	e00b      	b.n	80023f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	699b      	ldr	r3, [r3, #24]
 80023e4:	43da      	mvns	r2, r3
 80023e6:	68bb      	ldr	r3, [r7, #8]
 80023e8:	4013      	ands	r3, r2
 80023ea:	b29b      	uxth	r3, r3
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	bf14      	ite	ne
 80023f0:	2301      	movne	r3, #1
 80023f2:	2300      	moveq	r3, #0
 80023f4:	b2db      	uxtb	r3, r3
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d18d      	bne.n	8002316 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80023fa:	2300      	movs	r3, #0
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	3710      	adds	r7, #16
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}

08002404 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b084      	sub	sp, #16
 8002408:	af00      	add	r7, sp, #0
 800240a:	60f8      	str	r0, [r7, #12]
 800240c:	60b9      	str	r1, [r7, #8]
 800240e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002410:	e02d      	b.n	800246e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002412:	68f8      	ldr	r0, [r7, #12]
 8002414:	f000 f8ce 	bl	80025b4 <I2C_IsAcknowledgeFailed>
 8002418:	4603      	mov	r3, r0
 800241a:	2b00      	cmp	r3, #0
 800241c:	d001      	beq.n	8002422 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800241e:	2301      	movs	r3, #1
 8002420:	e02d      	b.n	800247e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002422:	68bb      	ldr	r3, [r7, #8]
 8002424:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002428:	d021      	beq.n	800246e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800242a:	f7fe fd85 	bl	8000f38 <HAL_GetTick>
 800242e:	4602      	mov	r2, r0
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	1ad3      	subs	r3, r2, r3
 8002434:	68ba      	ldr	r2, [r7, #8]
 8002436:	429a      	cmp	r2, r3
 8002438:	d302      	bcc.n	8002440 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800243a:	68bb      	ldr	r3, [r7, #8]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d116      	bne.n	800246e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	2200      	movs	r2, #0
 8002444:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	2220      	movs	r2, #32
 800244a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	2200      	movs	r2, #0
 8002452:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800245a:	f043 0220 	orr.w	r2, r3, #32
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	2200      	movs	r2, #0
 8002466:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	e007      	b.n	800247e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	695b      	ldr	r3, [r3, #20]
 8002474:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002478:	2b80      	cmp	r3, #128	; 0x80
 800247a:	d1ca      	bne.n	8002412 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800247c:	2300      	movs	r3, #0
}
 800247e:	4618      	mov	r0, r3
 8002480:	3710      	adds	r7, #16
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}

08002486 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002486:	b580      	push	{r7, lr}
 8002488:	b084      	sub	sp, #16
 800248a:	af00      	add	r7, sp, #0
 800248c:	60f8      	str	r0, [r7, #12]
 800248e:	60b9      	str	r1, [r7, #8]
 8002490:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002492:	e02d      	b.n	80024f0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002494:	68f8      	ldr	r0, [r7, #12]
 8002496:	f000 f88d 	bl	80025b4 <I2C_IsAcknowledgeFailed>
 800249a:	4603      	mov	r3, r0
 800249c:	2b00      	cmp	r3, #0
 800249e:	d001      	beq.n	80024a4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80024a0:	2301      	movs	r3, #1
 80024a2:	e02d      	b.n	8002500 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024a4:	68bb      	ldr	r3, [r7, #8]
 80024a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024aa:	d021      	beq.n	80024f0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024ac:	f7fe fd44 	bl	8000f38 <HAL_GetTick>
 80024b0:	4602      	mov	r2, r0
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	1ad3      	subs	r3, r2, r3
 80024b6:	68ba      	ldr	r2, [r7, #8]
 80024b8:	429a      	cmp	r2, r3
 80024ba:	d302      	bcc.n	80024c2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d116      	bne.n	80024f0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	2200      	movs	r2, #0
 80024c6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	2220      	movs	r2, #32
 80024cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	2200      	movs	r2, #0
 80024d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024dc:	f043 0220 	orr.w	r2, r3, #32
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	2200      	movs	r2, #0
 80024e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80024ec:	2301      	movs	r3, #1
 80024ee:	e007      	b.n	8002500 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	695b      	ldr	r3, [r3, #20]
 80024f6:	f003 0304 	and.w	r3, r3, #4
 80024fa:	2b04      	cmp	r3, #4
 80024fc:	d1ca      	bne.n	8002494 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80024fe:	2300      	movs	r3, #0
}
 8002500:	4618      	mov	r0, r3
 8002502:	3710      	adds	r7, #16
 8002504:	46bd      	mov	sp, r7
 8002506:	bd80      	pop	{r7, pc}

08002508 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b084      	sub	sp, #16
 800250c:	af00      	add	r7, sp, #0
 800250e:	60f8      	str	r0, [r7, #12]
 8002510:	60b9      	str	r1, [r7, #8]
 8002512:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002514:	e042      	b.n	800259c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	695b      	ldr	r3, [r3, #20]
 800251c:	f003 0310 	and.w	r3, r3, #16
 8002520:	2b10      	cmp	r3, #16
 8002522:	d119      	bne.n	8002558 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f06f 0210 	mvn.w	r2, #16
 800252c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	2200      	movs	r2, #0
 8002532:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	2220      	movs	r2, #32
 8002538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	2200      	movs	r2, #0
 8002540:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	2200      	movs	r2, #0
 8002550:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002554:	2301      	movs	r3, #1
 8002556:	e029      	b.n	80025ac <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002558:	f7fe fcee 	bl	8000f38 <HAL_GetTick>
 800255c:	4602      	mov	r2, r0
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	1ad3      	subs	r3, r2, r3
 8002562:	68ba      	ldr	r2, [r7, #8]
 8002564:	429a      	cmp	r2, r3
 8002566:	d302      	bcc.n	800256e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d116      	bne.n	800259c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	2200      	movs	r2, #0
 8002572:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	2220      	movs	r2, #32
 8002578:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	2200      	movs	r2, #0
 8002580:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002588:	f043 0220 	orr.w	r2, r3, #32
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	2200      	movs	r2, #0
 8002594:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002598:	2301      	movs	r3, #1
 800259a:	e007      	b.n	80025ac <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	695b      	ldr	r3, [r3, #20]
 80025a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025a6:	2b40      	cmp	r3, #64	; 0x40
 80025a8:	d1b5      	bne.n	8002516 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80025aa:	2300      	movs	r3, #0
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	3710      	adds	r7, #16
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}

080025b4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80025b4:	b480      	push	{r7}
 80025b6:	b083      	sub	sp, #12
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	695b      	ldr	r3, [r3, #20]
 80025c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025ca:	d11b      	bne.n	8002604 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80025d4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2200      	movs	r2, #0
 80025da:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2220      	movs	r2, #32
 80025e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2200      	movs	r2, #0
 80025e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f0:	f043 0204 	orr.w	r2, r3, #4
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2200      	movs	r2, #0
 80025fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002600:	2301      	movs	r3, #1
 8002602:	e000      	b.n	8002606 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002604:	2300      	movs	r3, #0
}
 8002606:	4618      	mov	r0, r3
 8002608:	370c      	adds	r7, #12
 800260a:	46bd      	mov	sp, r7
 800260c:	bc80      	pop	{r7}
 800260e:	4770      	bx	lr

08002610 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b086      	sub	sp, #24
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d101      	bne.n	8002622 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	e26c      	b.n	8002afc <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f003 0301 	and.w	r3, r3, #1
 800262a:	2b00      	cmp	r3, #0
 800262c:	f000 8087 	beq.w	800273e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002630:	4b92      	ldr	r3, [pc, #584]	; (800287c <HAL_RCC_OscConfig+0x26c>)
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	f003 030c 	and.w	r3, r3, #12
 8002638:	2b04      	cmp	r3, #4
 800263a:	d00c      	beq.n	8002656 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800263c:	4b8f      	ldr	r3, [pc, #572]	; (800287c <HAL_RCC_OscConfig+0x26c>)
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	f003 030c 	and.w	r3, r3, #12
 8002644:	2b08      	cmp	r3, #8
 8002646:	d112      	bne.n	800266e <HAL_RCC_OscConfig+0x5e>
 8002648:	4b8c      	ldr	r3, [pc, #560]	; (800287c <HAL_RCC_OscConfig+0x26c>)
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002650:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002654:	d10b      	bne.n	800266e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002656:	4b89      	ldr	r3, [pc, #548]	; (800287c <HAL_RCC_OscConfig+0x26c>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800265e:	2b00      	cmp	r3, #0
 8002660:	d06c      	beq.n	800273c <HAL_RCC_OscConfig+0x12c>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d168      	bne.n	800273c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800266a:	2301      	movs	r3, #1
 800266c:	e246      	b.n	8002afc <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002676:	d106      	bne.n	8002686 <HAL_RCC_OscConfig+0x76>
 8002678:	4b80      	ldr	r3, [pc, #512]	; (800287c <HAL_RCC_OscConfig+0x26c>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a7f      	ldr	r2, [pc, #508]	; (800287c <HAL_RCC_OscConfig+0x26c>)
 800267e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002682:	6013      	str	r3, [r2, #0]
 8002684:	e02e      	b.n	80026e4 <HAL_RCC_OscConfig+0xd4>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d10c      	bne.n	80026a8 <HAL_RCC_OscConfig+0x98>
 800268e:	4b7b      	ldr	r3, [pc, #492]	; (800287c <HAL_RCC_OscConfig+0x26c>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4a7a      	ldr	r2, [pc, #488]	; (800287c <HAL_RCC_OscConfig+0x26c>)
 8002694:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002698:	6013      	str	r3, [r2, #0]
 800269a:	4b78      	ldr	r3, [pc, #480]	; (800287c <HAL_RCC_OscConfig+0x26c>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4a77      	ldr	r2, [pc, #476]	; (800287c <HAL_RCC_OscConfig+0x26c>)
 80026a0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026a4:	6013      	str	r3, [r2, #0]
 80026a6:	e01d      	b.n	80026e4 <HAL_RCC_OscConfig+0xd4>
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80026b0:	d10c      	bne.n	80026cc <HAL_RCC_OscConfig+0xbc>
 80026b2:	4b72      	ldr	r3, [pc, #456]	; (800287c <HAL_RCC_OscConfig+0x26c>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4a71      	ldr	r2, [pc, #452]	; (800287c <HAL_RCC_OscConfig+0x26c>)
 80026b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026bc:	6013      	str	r3, [r2, #0]
 80026be:	4b6f      	ldr	r3, [pc, #444]	; (800287c <HAL_RCC_OscConfig+0x26c>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a6e      	ldr	r2, [pc, #440]	; (800287c <HAL_RCC_OscConfig+0x26c>)
 80026c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026c8:	6013      	str	r3, [r2, #0]
 80026ca:	e00b      	b.n	80026e4 <HAL_RCC_OscConfig+0xd4>
 80026cc:	4b6b      	ldr	r3, [pc, #428]	; (800287c <HAL_RCC_OscConfig+0x26c>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a6a      	ldr	r2, [pc, #424]	; (800287c <HAL_RCC_OscConfig+0x26c>)
 80026d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026d6:	6013      	str	r3, [r2, #0]
 80026d8:	4b68      	ldr	r3, [pc, #416]	; (800287c <HAL_RCC_OscConfig+0x26c>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a67      	ldr	r2, [pc, #412]	; (800287c <HAL_RCC_OscConfig+0x26c>)
 80026de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026e2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d013      	beq.n	8002714 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026ec:	f7fe fc24 	bl	8000f38 <HAL_GetTick>
 80026f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026f2:	e008      	b.n	8002706 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026f4:	f7fe fc20 	bl	8000f38 <HAL_GetTick>
 80026f8:	4602      	mov	r2, r0
 80026fa:	693b      	ldr	r3, [r7, #16]
 80026fc:	1ad3      	subs	r3, r2, r3
 80026fe:	2b64      	cmp	r3, #100	; 0x64
 8002700:	d901      	bls.n	8002706 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002702:	2303      	movs	r3, #3
 8002704:	e1fa      	b.n	8002afc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002706:	4b5d      	ldr	r3, [pc, #372]	; (800287c <HAL_RCC_OscConfig+0x26c>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800270e:	2b00      	cmp	r3, #0
 8002710:	d0f0      	beq.n	80026f4 <HAL_RCC_OscConfig+0xe4>
 8002712:	e014      	b.n	800273e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002714:	f7fe fc10 	bl	8000f38 <HAL_GetTick>
 8002718:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800271a:	e008      	b.n	800272e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800271c:	f7fe fc0c 	bl	8000f38 <HAL_GetTick>
 8002720:	4602      	mov	r2, r0
 8002722:	693b      	ldr	r3, [r7, #16]
 8002724:	1ad3      	subs	r3, r2, r3
 8002726:	2b64      	cmp	r3, #100	; 0x64
 8002728:	d901      	bls.n	800272e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800272a:	2303      	movs	r3, #3
 800272c:	e1e6      	b.n	8002afc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800272e:	4b53      	ldr	r3, [pc, #332]	; (800287c <HAL_RCC_OscConfig+0x26c>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002736:	2b00      	cmp	r3, #0
 8002738:	d1f0      	bne.n	800271c <HAL_RCC_OscConfig+0x10c>
 800273a:	e000      	b.n	800273e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800273c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f003 0302 	and.w	r3, r3, #2
 8002746:	2b00      	cmp	r3, #0
 8002748:	d063      	beq.n	8002812 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800274a:	4b4c      	ldr	r3, [pc, #304]	; (800287c <HAL_RCC_OscConfig+0x26c>)
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	f003 030c 	and.w	r3, r3, #12
 8002752:	2b00      	cmp	r3, #0
 8002754:	d00b      	beq.n	800276e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002756:	4b49      	ldr	r3, [pc, #292]	; (800287c <HAL_RCC_OscConfig+0x26c>)
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	f003 030c 	and.w	r3, r3, #12
 800275e:	2b08      	cmp	r3, #8
 8002760:	d11c      	bne.n	800279c <HAL_RCC_OscConfig+0x18c>
 8002762:	4b46      	ldr	r3, [pc, #280]	; (800287c <HAL_RCC_OscConfig+0x26c>)
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800276a:	2b00      	cmp	r3, #0
 800276c:	d116      	bne.n	800279c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800276e:	4b43      	ldr	r3, [pc, #268]	; (800287c <HAL_RCC_OscConfig+0x26c>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f003 0302 	and.w	r3, r3, #2
 8002776:	2b00      	cmp	r3, #0
 8002778:	d005      	beq.n	8002786 <HAL_RCC_OscConfig+0x176>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	691b      	ldr	r3, [r3, #16]
 800277e:	2b01      	cmp	r3, #1
 8002780:	d001      	beq.n	8002786 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002782:	2301      	movs	r3, #1
 8002784:	e1ba      	b.n	8002afc <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002786:	4b3d      	ldr	r3, [pc, #244]	; (800287c <HAL_RCC_OscConfig+0x26c>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	695b      	ldr	r3, [r3, #20]
 8002792:	00db      	lsls	r3, r3, #3
 8002794:	4939      	ldr	r1, [pc, #228]	; (800287c <HAL_RCC_OscConfig+0x26c>)
 8002796:	4313      	orrs	r3, r2
 8002798:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800279a:	e03a      	b.n	8002812 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	691b      	ldr	r3, [r3, #16]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d020      	beq.n	80027e6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027a4:	4b36      	ldr	r3, [pc, #216]	; (8002880 <HAL_RCC_OscConfig+0x270>)
 80027a6:	2201      	movs	r2, #1
 80027a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027aa:	f7fe fbc5 	bl	8000f38 <HAL_GetTick>
 80027ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027b0:	e008      	b.n	80027c4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027b2:	f7fe fbc1 	bl	8000f38 <HAL_GetTick>
 80027b6:	4602      	mov	r2, r0
 80027b8:	693b      	ldr	r3, [r7, #16]
 80027ba:	1ad3      	subs	r3, r2, r3
 80027bc:	2b02      	cmp	r3, #2
 80027be:	d901      	bls.n	80027c4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80027c0:	2303      	movs	r3, #3
 80027c2:	e19b      	b.n	8002afc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027c4:	4b2d      	ldr	r3, [pc, #180]	; (800287c <HAL_RCC_OscConfig+0x26c>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f003 0302 	and.w	r3, r3, #2
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d0f0      	beq.n	80027b2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027d0:	4b2a      	ldr	r3, [pc, #168]	; (800287c <HAL_RCC_OscConfig+0x26c>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	695b      	ldr	r3, [r3, #20]
 80027dc:	00db      	lsls	r3, r3, #3
 80027de:	4927      	ldr	r1, [pc, #156]	; (800287c <HAL_RCC_OscConfig+0x26c>)
 80027e0:	4313      	orrs	r3, r2
 80027e2:	600b      	str	r3, [r1, #0]
 80027e4:	e015      	b.n	8002812 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027e6:	4b26      	ldr	r3, [pc, #152]	; (8002880 <HAL_RCC_OscConfig+0x270>)
 80027e8:	2200      	movs	r2, #0
 80027ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027ec:	f7fe fba4 	bl	8000f38 <HAL_GetTick>
 80027f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027f2:	e008      	b.n	8002806 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027f4:	f7fe fba0 	bl	8000f38 <HAL_GetTick>
 80027f8:	4602      	mov	r2, r0
 80027fa:	693b      	ldr	r3, [r7, #16]
 80027fc:	1ad3      	subs	r3, r2, r3
 80027fe:	2b02      	cmp	r3, #2
 8002800:	d901      	bls.n	8002806 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002802:	2303      	movs	r3, #3
 8002804:	e17a      	b.n	8002afc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002806:	4b1d      	ldr	r3, [pc, #116]	; (800287c <HAL_RCC_OscConfig+0x26c>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f003 0302 	and.w	r3, r3, #2
 800280e:	2b00      	cmp	r3, #0
 8002810:	d1f0      	bne.n	80027f4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f003 0308 	and.w	r3, r3, #8
 800281a:	2b00      	cmp	r3, #0
 800281c:	d03a      	beq.n	8002894 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	699b      	ldr	r3, [r3, #24]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d019      	beq.n	800285a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002826:	4b17      	ldr	r3, [pc, #92]	; (8002884 <HAL_RCC_OscConfig+0x274>)
 8002828:	2201      	movs	r2, #1
 800282a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800282c:	f7fe fb84 	bl	8000f38 <HAL_GetTick>
 8002830:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002832:	e008      	b.n	8002846 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002834:	f7fe fb80 	bl	8000f38 <HAL_GetTick>
 8002838:	4602      	mov	r2, r0
 800283a:	693b      	ldr	r3, [r7, #16]
 800283c:	1ad3      	subs	r3, r2, r3
 800283e:	2b02      	cmp	r3, #2
 8002840:	d901      	bls.n	8002846 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002842:	2303      	movs	r3, #3
 8002844:	e15a      	b.n	8002afc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002846:	4b0d      	ldr	r3, [pc, #52]	; (800287c <HAL_RCC_OscConfig+0x26c>)
 8002848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800284a:	f003 0302 	and.w	r3, r3, #2
 800284e:	2b00      	cmp	r3, #0
 8002850:	d0f0      	beq.n	8002834 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002852:	2001      	movs	r0, #1
 8002854:	f000 fada 	bl	8002e0c <RCC_Delay>
 8002858:	e01c      	b.n	8002894 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800285a:	4b0a      	ldr	r3, [pc, #40]	; (8002884 <HAL_RCC_OscConfig+0x274>)
 800285c:	2200      	movs	r2, #0
 800285e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002860:	f7fe fb6a 	bl	8000f38 <HAL_GetTick>
 8002864:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002866:	e00f      	b.n	8002888 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002868:	f7fe fb66 	bl	8000f38 <HAL_GetTick>
 800286c:	4602      	mov	r2, r0
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	1ad3      	subs	r3, r2, r3
 8002872:	2b02      	cmp	r3, #2
 8002874:	d908      	bls.n	8002888 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002876:	2303      	movs	r3, #3
 8002878:	e140      	b.n	8002afc <HAL_RCC_OscConfig+0x4ec>
 800287a:	bf00      	nop
 800287c:	40021000 	.word	0x40021000
 8002880:	42420000 	.word	0x42420000
 8002884:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002888:	4b9e      	ldr	r3, [pc, #632]	; (8002b04 <HAL_RCC_OscConfig+0x4f4>)
 800288a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800288c:	f003 0302 	and.w	r3, r3, #2
 8002890:	2b00      	cmp	r3, #0
 8002892:	d1e9      	bne.n	8002868 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f003 0304 	and.w	r3, r3, #4
 800289c:	2b00      	cmp	r3, #0
 800289e:	f000 80a6 	beq.w	80029ee <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028a2:	2300      	movs	r3, #0
 80028a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028a6:	4b97      	ldr	r3, [pc, #604]	; (8002b04 <HAL_RCC_OscConfig+0x4f4>)
 80028a8:	69db      	ldr	r3, [r3, #28]
 80028aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d10d      	bne.n	80028ce <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028b2:	4b94      	ldr	r3, [pc, #592]	; (8002b04 <HAL_RCC_OscConfig+0x4f4>)
 80028b4:	69db      	ldr	r3, [r3, #28]
 80028b6:	4a93      	ldr	r2, [pc, #588]	; (8002b04 <HAL_RCC_OscConfig+0x4f4>)
 80028b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028bc:	61d3      	str	r3, [r2, #28]
 80028be:	4b91      	ldr	r3, [pc, #580]	; (8002b04 <HAL_RCC_OscConfig+0x4f4>)
 80028c0:	69db      	ldr	r3, [r3, #28]
 80028c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028c6:	60bb      	str	r3, [r7, #8]
 80028c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028ca:	2301      	movs	r3, #1
 80028cc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028ce:	4b8e      	ldr	r3, [pc, #568]	; (8002b08 <HAL_RCC_OscConfig+0x4f8>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d118      	bne.n	800290c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028da:	4b8b      	ldr	r3, [pc, #556]	; (8002b08 <HAL_RCC_OscConfig+0x4f8>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a8a      	ldr	r2, [pc, #552]	; (8002b08 <HAL_RCC_OscConfig+0x4f8>)
 80028e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028e6:	f7fe fb27 	bl	8000f38 <HAL_GetTick>
 80028ea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028ec:	e008      	b.n	8002900 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028ee:	f7fe fb23 	bl	8000f38 <HAL_GetTick>
 80028f2:	4602      	mov	r2, r0
 80028f4:	693b      	ldr	r3, [r7, #16]
 80028f6:	1ad3      	subs	r3, r2, r3
 80028f8:	2b64      	cmp	r3, #100	; 0x64
 80028fa:	d901      	bls.n	8002900 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80028fc:	2303      	movs	r3, #3
 80028fe:	e0fd      	b.n	8002afc <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002900:	4b81      	ldr	r3, [pc, #516]	; (8002b08 <HAL_RCC_OscConfig+0x4f8>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002908:	2b00      	cmp	r3, #0
 800290a:	d0f0      	beq.n	80028ee <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	68db      	ldr	r3, [r3, #12]
 8002910:	2b01      	cmp	r3, #1
 8002912:	d106      	bne.n	8002922 <HAL_RCC_OscConfig+0x312>
 8002914:	4b7b      	ldr	r3, [pc, #492]	; (8002b04 <HAL_RCC_OscConfig+0x4f4>)
 8002916:	6a1b      	ldr	r3, [r3, #32]
 8002918:	4a7a      	ldr	r2, [pc, #488]	; (8002b04 <HAL_RCC_OscConfig+0x4f4>)
 800291a:	f043 0301 	orr.w	r3, r3, #1
 800291e:	6213      	str	r3, [r2, #32]
 8002920:	e02d      	b.n	800297e <HAL_RCC_OscConfig+0x36e>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	68db      	ldr	r3, [r3, #12]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d10c      	bne.n	8002944 <HAL_RCC_OscConfig+0x334>
 800292a:	4b76      	ldr	r3, [pc, #472]	; (8002b04 <HAL_RCC_OscConfig+0x4f4>)
 800292c:	6a1b      	ldr	r3, [r3, #32]
 800292e:	4a75      	ldr	r2, [pc, #468]	; (8002b04 <HAL_RCC_OscConfig+0x4f4>)
 8002930:	f023 0301 	bic.w	r3, r3, #1
 8002934:	6213      	str	r3, [r2, #32]
 8002936:	4b73      	ldr	r3, [pc, #460]	; (8002b04 <HAL_RCC_OscConfig+0x4f4>)
 8002938:	6a1b      	ldr	r3, [r3, #32]
 800293a:	4a72      	ldr	r2, [pc, #456]	; (8002b04 <HAL_RCC_OscConfig+0x4f4>)
 800293c:	f023 0304 	bic.w	r3, r3, #4
 8002940:	6213      	str	r3, [r2, #32]
 8002942:	e01c      	b.n	800297e <HAL_RCC_OscConfig+0x36e>
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	68db      	ldr	r3, [r3, #12]
 8002948:	2b05      	cmp	r3, #5
 800294a:	d10c      	bne.n	8002966 <HAL_RCC_OscConfig+0x356>
 800294c:	4b6d      	ldr	r3, [pc, #436]	; (8002b04 <HAL_RCC_OscConfig+0x4f4>)
 800294e:	6a1b      	ldr	r3, [r3, #32]
 8002950:	4a6c      	ldr	r2, [pc, #432]	; (8002b04 <HAL_RCC_OscConfig+0x4f4>)
 8002952:	f043 0304 	orr.w	r3, r3, #4
 8002956:	6213      	str	r3, [r2, #32]
 8002958:	4b6a      	ldr	r3, [pc, #424]	; (8002b04 <HAL_RCC_OscConfig+0x4f4>)
 800295a:	6a1b      	ldr	r3, [r3, #32]
 800295c:	4a69      	ldr	r2, [pc, #420]	; (8002b04 <HAL_RCC_OscConfig+0x4f4>)
 800295e:	f043 0301 	orr.w	r3, r3, #1
 8002962:	6213      	str	r3, [r2, #32]
 8002964:	e00b      	b.n	800297e <HAL_RCC_OscConfig+0x36e>
 8002966:	4b67      	ldr	r3, [pc, #412]	; (8002b04 <HAL_RCC_OscConfig+0x4f4>)
 8002968:	6a1b      	ldr	r3, [r3, #32]
 800296a:	4a66      	ldr	r2, [pc, #408]	; (8002b04 <HAL_RCC_OscConfig+0x4f4>)
 800296c:	f023 0301 	bic.w	r3, r3, #1
 8002970:	6213      	str	r3, [r2, #32]
 8002972:	4b64      	ldr	r3, [pc, #400]	; (8002b04 <HAL_RCC_OscConfig+0x4f4>)
 8002974:	6a1b      	ldr	r3, [r3, #32]
 8002976:	4a63      	ldr	r2, [pc, #396]	; (8002b04 <HAL_RCC_OscConfig+0x4f4>)
 8002978:	f023 0304 	bic.w	r3, r3, #4
 800297c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	68db      	ldr	r3, [r3, #12]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d015      	beq.n	80029b2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002986:	f7fe fad7 	bl	8000f38 <HAL_GetTick>
 800298a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800298c:	e00a      	b.n	80029a4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800298e:	f7fe fad3 	bl	8000f38 <HAL_GetTick>
 8002992:	4602      	mov	r2, r0
 8002994:	693b      	ldr	r3, [r7, #16]
 8002996:	1ad3      	subs	r3, r2, r3
 8002998:	f241 3288 	movw	r2, #5000	; 0x1388
 800299c:	4293      	cmp	r3, r2
 800299e:	d901      	bls.n	80029a4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80029a0:	2303      	movs	r3, #3
 80029a2:	e0ab      	b.n	8002afc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029a4:	4b57      	ldr	r3, [pc, #348]	; (8002b04 <HAL_RCC_OscConfig+0x4f4>)
 80029a6:	6a1b      	ldr	r3, [r3, #32]
 80029a8:	f003 0302 	and.w	r3, r3, #2
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d0ee      	beq.n	800298e <HAL_RCC_OscConfig+0x37e>
 80029b0:	e014      	b.n	80029dc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029b2:	f7fe fac1 	bl	8000f38 <HAL_GetTick>
 80029b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029b8:	e00a      	b.n	80029d0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029ba:	f7fe fabd 	bl	8000f38 <HAL_GetTick>
 80029be:	4602      	mov	r2, r0
 80029c0:	693b      	ldr	r3, [r7, #16]
 80029c2:	1ad3      	subs	r3, r2, r3
 80029c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d901      	bls.n	80029d0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80029cc:	2303      	movs	r3, #3
 80029ce:	e095      	b.n	8002afc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029d0:	4b4c      	ldr	r3, [pc, #304]	; (8002b04 <HAL_RCC_OscConfig+0x4f4>)
 80029d2:	6a1b      	ldr	r3, [r3, #32]
 80029d4:	f003 0302 	and.w	r3, r3, #2
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d1ee      	bne.n	80029ba <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80029dc:	7dfb      	ldrb	r3, [r7, #23]
 80029de:	2b01      	cmp	r3, #1
 80029e0:	d105      	bne.n	80029ee <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029e2:	4b48      	ldr	r3, [pc, #288]	; (8002b04 <HAL_RCC_OscConfig+0x4f4>)
 80029e4:	69db      	ldr	r3, [r3, #28]
 80029e6:	4a47      	ldr	r2, [pc, #284]	; (8002b04 <HAL_RCC_OscConfig+0x4f4>)
 80029e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029ec:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	69db      	ldr	r3, [r3, #28]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	f000 8081 	beq.w	8002afa <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80029f8:	4b42      	ldr	r3, [pc, #264]	; (8002b04 <HAL_RCC_OscConfig+0x4f4>)
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	f003 030c 	and.w	r3, r3, #12
 8002a00:	2b08      	cmp	r3, #8
 8002a02:	d061      	beq.n	8002ac8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	69db      	ldr	r3, [r3, #28]
 8002a08:	2b02      	cmp	r3, #2
 8002a0a:	d146      	bne.n	8002a9a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a0c:	4b3f      	ldr	r3, [pc, #252]	; (8002b0c <HAL_RCC_OscConfig+0x4fc>)
 8002a0e:	2200      	movs	r2, #0
 8002a10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a12:	f7fe fa91 	bl	8000f38 <HAL_GetTick>
 8002a16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a18:	e008      	b.n	8002a2c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a1a:	f7fe fa8d 	bl	8000f38 <HAL_GetTick>
 8002a1e:	4602      	mov	r2, r0
 8002a20:	693b      	ldr	r3, [r7, #16]
 8002a22:	1ad3      	subs	r3, r2, r3
 8002a24:	2b02      	cmp	r3, #2
 8002a26:	d901      	bls.n	8002a2c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002a28:	2303      	movs	r3, #3
 8002a2a:	e067      	b.n	8002afc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a2c:	4b35      	ldr	r3, [pc, #212]	; (8002b04 <HAL_RCC_OscConfig+0x4f4>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d1f0      	bne.n	8002a1a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6a1b      	ldr	r3, [r3, #32]
 8002a3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a40:	d108      	bne.n	8002a54 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002a42:	4b30      	ldr	r3, [pc, #192]	; (8002b04 <HAL_RCC_OscConfig+0x4f4>)
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	689b      	ldr	r3, [r3, #8]
 8002a4e:	492d      	ldr	r1, [pc, #180]	; (8002b04 <HAL_RCC_OscConfig+0x4f4>)
 8002a50:	4313      	orrs	r3, r2
 8002a52:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a54:	4b2b      	ldr	r3, [pc, #172]	; (8002b04 <HAL_RCC_OscConfig+0x4f4>)
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6a19      	ldr	r1, [r3, #32]
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a64:	430b      	orrs	r3, r1
 8002a66:	4927      	ldr	r1, [pc, #156]	; (8002b04 <HAL_RCC_OscConfig+0x4f4>)
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a6c:	4b27      	ldr	r3, [pc, #156]	; (8002b0c <HAL_RCC_OscConfig+0x4fc>)
 8002a6e:	2201      	movs	r2, #1
 8002a70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a72:	f7fe fa61 	bl	8000f38 <HAL_GetTick>
 8002a76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a78:	e008      	b.n	8002a8c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a7a:	f7fe fa5d 	bl	8000f38 <HAL_GetTick>
 8002a7e:	4602      	mov	r2, r0
 8002a80:	693b      	ldr	r3, [r7, #16]
 8002a82:	1ad3      	subs	r3, r2, r3
 8002a84:	2b02      	cmp	r3, #2
 8002a86:	d901      	bls.n	8002a8c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002a88:	2303      	movs	r3, #3
 8002a8a:	e037      	b.n	8002afc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a8c:	4b1d      	ldr	r3, [pc, #116]	; (8002b04 <HAL_RCC_OscConfig+0x4f4>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d0f0      	beq.n	8002a7a <HAL_RCC_OscConfig+0x46a>
 8002a98:	e02f      	b.n	8002afa <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a9a:	4b1c      	ldr	r3, [pc, #112]	; (8002b0c <HAL_RCC_OscConfig+0x4fc>)
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aa0:	f7fe fa4a 	bl	8000f38 <HAL_GetTick>
 8002aa4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002aa6:	e008      	b.n	8002aba <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002aa8:	f7fe fa46 	bl	8000f38 <HAL_GetTick>
 8002aac:	4602      	mov	r2, r0
 8002aae:	693b      	ldr	r3, [r7, #16]
 8002ab0:	1ad3      	subs	r3, r2, r3
 8002ab2:	2b02      	cmp	r3, #2
 8002ab4:	d901      	bls.n	8002aba <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002ab6:	2303      	movs	r3, #3
 8002ab8:	e020      	b.n	8002afc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002aba:	4b12      	ldr	r3, [pc, #72]	; (8002b04 <HAL_RCC_OscConfig+0x4f4>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d1f0      	bne.n	8002aa8 <HAL_RCC_OscConfig+0x498>
 8002ac6:	e018      	b.n	8002afa <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	69db      	ldr	r3, [r3, #28]
 8002acc:	2b01      	cmp	r3, #1
 8002ace:	d101      	bne.n	8002ad4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	e013      	b.n	8002afc <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002ad4:	4b0b      	ldr	r3, [pc, #44]	; (8002b04 <HAL_RCC_OscConfig+0x4f4>)
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6a1b      	ldr	r3, [r3, #32]
 8002ae4:	429a      	cmp	r2, r3
 8002ae6:	d106      	bne.n	8002af6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002af2:	429a      	cmp	r2, r3
 8002af4:	d001      	beq.n	8002afa <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002af6:	2301      	movs	r3, #1
 8002af8:	e000      	b.n	8002afc <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002afa:	2300      	movs	r3, #0
}
 8002afc:	4618      	mov	r0, r3
 8002afe:	3718      	adds	r7, #24
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bd80      	pop	{r7, pc}
 8002b04:	40021000 	.word	0x40021000
 8002b08:	40007000 	.word	0x40007000
 8002b0c:	42420060 	.word	0x42420060

08002b10 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b084      	sub	sp, #16
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
 8002b18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d101      	bne.n	8002b24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b20:	2301      	movs	r3, #1
 8002b22:	e0d0      	b.n	8002cc6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002b24:	4b6a      	ldr	r3, [pc, #424]	; (8002cd0 <HAL_RCC_ClockConfig+0x1c0>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f003 0307 	and.w	r3, r3, #7
 8002b2c:	683a      	ldr	r2, [r7, #0]
 8002b2e:	429a      	cmp	r2, r3
 8002b30:	d910      	bls.n	8002b54 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b32:	4b67      	ldr	r3, [pc, #412]	; (8002cd0 <HAL_RCC_ClockConfig+0x1c0>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f023 0207 	bic.w	r2, r3, #7
 8002b3a:	4965      	ldr	r1, [pc, #404]	; (8002cd0 <HAL_RCC_ClockConfig+0x1c0>)
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b42:	4b63      	ldr	r3, [pc, #396]	; (8002cd0 <HAL_RCC_ClockConfig+0x1c0>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f003 0307 	and.w	r3, r3, #7
 8002b4a:	683a      	ldr	r2, [r7, #0]
 8002b4c:	429a      	cmp	r2, r3
 8002b4e:	d001      	beq.n	8002b54 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002b50:	2301      	movs	r3, #1
 8002b52:	e0b8      	b.n	8002cc6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f003 0302 	and.w	r3, r3, #2
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d020      	beq.n	8002ba2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f003 0304 	and.w	r3, r3, #4
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d005      	beq.n	8002b78 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b6c:	4b59      	ldr	r3, [pc, #356]	; (8002cd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	4a58      	ldr	r2, [pc, #352]	; (8002cd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002b72:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002b76:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f003 0308 	and.w	r3, r3, #8
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d005      	beq.n	8002b90 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b84:	4b53      	ldr	r3, [pc, #332]	; (8002cd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	4a52      	ldr	r2, [pc, #328]	; (8002cd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002b8a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002b8e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b90:	4b50      	ldr	r3, [pc, #320]	; (8002cd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	494d      	ldr	r1, [pc, #308]	; (8002cd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f003 0301 	and.w	r3, r3, #1
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d040      	beq.n	8002c30 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	2b01      	cmp	r3, #1
 8002bb4:	d107      	bne.n	8002bc6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bb6:	4b47      	ldr	r3, [pc, #284]	; (8002cd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d115      	bne.n	8002bee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e07f      	b.n	8002cc6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	2b02      	cmp	r3, #2
 8002bcc:	d107      	bne.n	8002bde <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bce:	4b41      	ldr	r3, [pc, #260]	; (8002cd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d109      	bne.n	8002bee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e073      	b.n	8002cc6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bde:	4b3d      	ldr	r3, [pc, #244]	; (8002cd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f003 0302 	and.w	r3, r3, #2
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d101      	bne.n	8002bee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	e06b      	b.n	8002cc6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002bee:	4b39      	ldr	r3, [pc, #228]	; (8002cd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	f023 0203 	bic.w	r2, r3, #3
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	4936      	ldr	r1, [pc, #216]	; (8002cd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c00:	f7fe f99a 	bl	8000f38 <HAL_GetTick>
 8002c04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c06:	e00a      	b.n	8002c1e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c08:	f7fe f996 	bl	8000f38 <HAL_GetTick>
 8002c0c:	4602      	mov	r2, r0
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	1ad3      	subs	r3, r2, r3
 8002c12:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d901      	bls.n	8002c1e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c1a:	2303      	movs	r3, #3
 8002c1c:	e053      	b.n	8002cc6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c1e:	4b2d      	ldr	r3, [pc, #180]	; (8002cd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	f003 020c 	and.w	r2, r3, #12
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	009b      	lsls	r3, r3, #2
 8002c2c:	429a      	cmp	r2, r3
 8002c2e:	d1eb      	bne.n	8002c08 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002c30:	4b27      	ldr	r3, [pc, #156]	; (8002cd0 <HAL_RCC_ClockConfig+0x1c0>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f003 0307 	and.w	r3, r3, #7
 8002c38:	683a      	ldr	r2, [r7, #0]
 8002c3a:	429a      	cmp	r2, r3
 8002c3c:	d210      	bcs.n	8002c60 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c3e:	4b24      	ldr	r3, [pc, #144]	; (8002cd0 <HAL_RCC_ClockConfig+0x1c0>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f023 0207 	bic.w	r2, r3, #7
 8002c46:	4922      	ldr	r1, [pc, #136]	; (8002cd0 <HAL_RCC_ClockConfig+0x1c0>)
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c4e:	4b20      	ldr	r3, [pc, #128]	; (8002cd0 <HAL_RCC_ClockConfig+0x1c0>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f003 0307 	and.w	r3, r3, #7
 8002c56:	683a      	ldr	r2, [r7, #0]
 8002c58:	429a      	cmp	r2, r3
 8002c5a:	d001      	beq.n	8002c60 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	e032      	b.n	8002cc6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f003 0304 	and.w	r3, r3, #4
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d008      	beq.n	8002c7e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c6c:	4b19      	ldr	r3, [pc, #100]	; (8002cd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	68db      	ldr	r3, [r3, #12]
 8002c78:	4916      	ldr	r1, [pc, #88]	; (8002cd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f003 0308 	and.w	r3, r3, #8
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d009      	beq.n	8002c9e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002c8a:	4b12      	ldr	r3, [pc, #72]	; (8002cd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	691b      	ldr	r3, [r3, #16]
 8002c96:	00db      	lsls	r3, r3, #3
 8002c98:	490e      	ldr	r1, [pc, #56]	; (8002cd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002c9e:	f000 f821 	bl	8002ce4 <HAL_RCC_GetSysClockFreq>
 8002ca2:	4601      	mov	r1, r0
 8002ca4:	4b0b      	ldr	r3, [pc, #44]	; (8002cd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	091b      	lsrs	r3, r3, #4
 8002caa:	f003 030f 	and.w	r3, r3, #15
 8002cae:	4a0a      	ldr	r2, [pc, #40]	; (8002cd8 <HAL_RCC_ClockConfig+0x1c8>)
 8002cb0:	5cd3      	ldrb	r3, [r2, r3]
 8002cb2:	fa21 f303 	lsr.w	r3, r1, r3
 8002cb6:	4a09      	ldr	r2, [pc, #36]	; (8002cdc <HAL_RCC_ClockConfig+0x1cc>)
 8002cb8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002cba:	4b09      	ldr	r3, [pc, #36]	; (8002ce0 <HAL_RCC_ClockConfig+0x1d0>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	f7fe f8f8 	bl	8000eb4 <HAL_InitTick>

  return HAL_OK;
 8002cc4:	2300      	movs	r3, #0
}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	3710      	adds	r7, #16
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}
 8002cce:	bf00      	nop
 8002cd0:	40022000 	.word	0x40022000
 8002cd4:	40021000 	.word	0x40021000
 8002cd8:	08003b30 	.word	0x08003b30
 8002cdc:	20000000 	.word	0x20000000
 8002ce0:	20000004 	.word	0x20000004

08002ce4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ce4:	b490      	push	{r4, r7}
 8002ce6:	b08a      	sub	sp, #40	; 0x28
 8002ce8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002cea:	4b2a      	ldr	r3, [pc, #168]	; (8002d94 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002cec:	1d3c      	adds	r4, r7, #4
 8002cee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002cf0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002cf4:	4b28      	ldr	r3, [pc, #160]	; (8002d98 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002cf6:	881b      	ldrh	r3, [r3, #0]
 8002cf8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	61fb      	str	r3, [r7, #28]
 8002cfe:	2300      	movs	r3, #0
 8002d00:	61bb      	str	r3, [r7, #24]
 8002d02:	2300      	movs	r3, #0
 8002d04:	627b      	str	r3, [r7, #36]	; 0x24
 8002d06:	2300      	movs	r3, #0
 8002d08:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002d0e:	4b23      	ldr	r3, [pc, #140]	; (8002d9c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002d14:	69fb      	ldr	r3, [r7, #28]
 8002d16:	f003 030c 	and.w	r3, r3, #12
 8002d1a:	2b04      	cmp	r3, #4
 8002d1c:	d002      	beq.n	8002d24 <HAL_RCC_GetSysClockFreq+0x40>
 8002d1e:	2b08      	cmp	r3, #8
 8002d20:	d003      	beq.n	8002d2a <HAL_RCC_GetSysClockFreq+0x46>
 8002d22:	e02d      	b.n	8002d80 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002d24:	4b1e      	ldr	r3, [pc, #120]	; (8002da0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002d26:	623b      	str	r3, [r7, #32]
      break;
 8002d28:	e02d      	b.n	8002d86 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002d2a:	69fb      	ldr	r3, [r7, #28]
 8002d2c:	0c9b      	lsrs	r3, r3, #18
 8002d2e:	f003 030f 	and.w	r3, r3, #15
 8002d32:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002d36:	4413      	add	r3, r2
 8002d38:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002d3c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002d3e:	69fb      	ldr	r3, [r7, #28]
 8002d40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d013      	beq.n	8002d70 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002d48:	4b14      	ldr	r3, [pc, #80]	; (8002d9c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	0c5b      	lsrs	r3, r3, #17
 8002d4e:	f003 0301 	and.w	r3, r3, #1
 8002d52:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002d56:	4413      	add	r3, r2
 8002d58:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002d5c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002d5e:	697b      	ldr	r3, [r7, #20]
 8002d60:	4a0f      	ldr	r2, [pc, #60]	; (8002da0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002d62:	fb02 f203 	mul.w	r2, r2, r3
 8002d66:	69bb      	ldr	r3, [r7, #24]
 8002d68:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d6c:	627b      	str	r3, [r7, #36]	; 0x24
 8002d6e:	e004      	b.n	8002d7a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	4a0c      	ldr	r2, [pc, #48]	; (8002da4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002d74:	fb02 f303 	mul.w	r3, r2, r3
 8002d78:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d7c:	623b      	str	r3, [r7, #32]
      break;
 8002d7e:	e002      	b.n	8002d86 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002d80:	4b07      	ldr	r3, [pc, #28]	; (8002da0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002d82:	623b      	str	r3, [r7, #32]
      break;
 8002d84:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d86:	6a3b      	ldr	r3, [r7, #32]
}
 8002d88:	4618      	mov	r0, r3
 8002d8a:	3728      	adds	r7, #40	; 0x28
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bc90      	pop	{r4, r7}
 8002d90:	4770      	bx	lr
 8002d92:	bf00      	nop
 8002d94:	08003b1c 	.word	0x08003b1c
 8002d98:	08003b2c 	.word	0x08003b2c
 8002d9c:	40021000 	.word	0x40021000
 8002da0:	007a1200 	.word	0x007a1200
 8002da4:	003d0900 	.word	0x003d0900

08002da8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002da8:	b480      	push	{r7}
 8002daa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002dac:	4b02      	ldr	r3, [pc, #8]	; (8002db8 <HAL_RCC_GetHCLKFreq+0x10>)
 8002dae:	681b      	ldr	r3, [r3, #0]
}
 8002db0:	4618      	mov	r0, r3
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bc80      	pop	{r7}
 8002db6:	4770      	bx	lr
 8002db8:	20000000 	.word	0x20000000

08002dbc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002dc0:	f7ff fff2 	bl	8002da8 <HAL_RCC_GetHCLKFreq>
 8002dc4:	4601      	mov	r1, r0
 8002dc6:	4b05      	ldr	r3, [pc, #20]	; (8002ddc <HAL_RCC_GetPCLK1Freq+0x20>)
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	0a1b      	lsrs	r3, r3, #8
 8002dcc:	f003 0307 	and.w	r3, r3, #7
 8002dd0:	4a03      	ldr	r2, [pc, #12]	; (8002de0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002dd2:	5cd3      	ldrb	r3, [r2, r3]
 8002dd4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002dd8:	4618      	mov	r0, r3
 8002dda:	bd80      	pop	{r7, pc}
 8002ddc:	40021000 	.word	0x40021000
 8002de0:	08003b40 	.word	0x08003b40

08002de4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002de8:	f7ff ffde 	bl	8002da8 <HAL_RCC_GetHCLKFreq>
 8002dec:	4601      	mov	r1, r0
 8002dee:	4b05      	ldr	r3, [pc, #20]	; (8002e04 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	0adb      	lsrs	r3, r3, #11
 8002df4:	f003 0307 	and.w	r3, r3, #7
 8002df8:	4a03      	ldr	r2, [pc, #12]	; (8002e08 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002dfa:	5cd3      	ldrb	r3, [r2, r3]
 8002dfc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002e00:	4618      	mov	r0, r3
 8002e02:	bd80      	pop	{r7, pc}
 8002e04:	40021000 	.word	0x40021000
 8002e08:	08003b40 	.word	0x08003b40

08002e0c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b085      	sub	sp, #20
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002e14:	4b0a      	ldr	r3, [pc, #40]	; (8002e40 <RCC_Delay+0x34>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a0a      	ldr	r2, [pc, #40]	; (8002e44 <RCC_Delay+0x38>)
 8002e1a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e1e:	0a5b      	lsrs	r3, r3, #9
 8002e20:	687a      	ldr	r2, [r7, #4]
 8002e22:	fb02 f303 	mul.w	r3, r2, r3
 8002e26:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002e28:	bf00      	nop
  }
  while (Delay --);
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	1e5a      	subs	r2, r3, #1
 8002e2e:	60fa      	str	r2, [r7, #12]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d1f9      	bne.n	8002e28 <RCC_Delay+0x1c>
}
 8002e34:	bf00      	nop
 8002e36:	3714      	adds	r7, #20
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bc80      	pop	{r7}
 8002e3c:	4770      	bx	lr
 8002e3e:	bf00      	nop
 8002e40:	20000000 	.word	0x20000000
 8002e44:	10624dd3 	.word	0x10624dd3

08002e48 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b082      	sub	sp, #8
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d101      	bne.n	8002e5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	e03f      	b.n	8002eda <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002e60:	b2db      	uxtb	r3, r3
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d106      	bne.n	8002e74 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e6e:	6878      	ldr	r0, [r7, #4]
 8002e70:	f7fd ff98 	bl	8000da4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2224      	movs	r2, #36	; 0x24
 8002e78:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	68da      	ldr	r2, [r3, #12]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002e8a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002e8c:	6878      	ldr	r0, [r7, #4]
 8002e8e:	f000 f905 	bl	800309c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	691a      	ldr	r2, [r3, #16]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002ea0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	695a      	ldr	r2, [r3, #20]
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002eb0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	68da      	ldr	r2, [r3, #12]
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002ec0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2220      	movs	r2, #32
 8002ecc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2220      	movs	r2, #32
 8002ed4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002ed8:	2300      	movs	r3, #0
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	3708      	adds	r7, #8
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}

08002ee2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ee2:	b580      	push	{r7, lr}
 8002ee4:	b08a      	sub	sp, #40	; 0x28
 8002ee6:	af02      	add	r7, sp, #8
 8002ee8:	60f8      	str	r0, [r7, #12]
 8002eea:	60b9      	str	r1, [r7, #8]
 8002eec:	603b      	str	r3, [r7, #0]
 8002eee:	4613      	mov	r3, r2
 8002ef0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002efc:	b2db      	uxtb	r3, r3
 8002efe:	2b20      	cmp	r3, #32
 8002f00:	d17c      	bne.n	8002ffc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f02:	68bb      	ldr	r3, [r7, #8]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d002      	beq.n	8002f0e <HAL_UART_Transmit+0x2c>
 8002f08:	88fb      	ldrh	r3, [r7, #6]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d101      	bne.n	8002f12 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e075      	b.n	8002ffe <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002f18:	2b01      	cmp	r3, #1
 8002f1a:	d101      	bne.n	8002f20 <HAL_UART_Transmit+0x3e>
 8002f1c:	2302      	movs	r3, #2
 8002f1e:	e06e      	b.n	8002ffe <HAL_UART_Transmit+0x11c>
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	2201      	movs	r2, #1
 8002f24:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	2221      	movs	r2, #33	; 0x21
 8002f32:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002f36:	f7fd ffff 	bl	8000f38 <HAL_GetTick>
 8002f3a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	88fa      	ldrh	r2, [r7, #6]
 8002f40:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	88fa      	ldrh	r2, [r7, #6]
 8002f46:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	689b      	ldr	r3, [r3, #8]
 8002f4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f50:	d108      	bne.n	8002f64 <HAL_UART_Transmit+0x82>
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	691b      	ldr	r3, [r3, #16]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d104      	bne.n	8002f64 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002f5e:	68bb      	ldr	r3, [r7, #8]
 8002f60:	61bb      	str	r3, [r7, #24]
 8002f62:	e003      	b.n	8002f6c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002f68:	2300      	movs	r3, #0
 8002f6a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8002f74:	e02a      	b.n	8002fcc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	9300      	str	r3, [sp, #0]
 8002f7a:	697b      	ldr	r3, [r7, #20]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	2180      	movs	r1, #128	; 0x80
 8002f80:	68f8      	ldr	r0, [r7, #12]
 8002f82:	f000 f840 	bl	8003006 <UART_WaitOnFlagUntilTimeout>
 8002f86:	4603      	mov	r3, r0
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d001      	beq.n	8002f90 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002f8c:	2303      	movs	r3, #3
 8002f8e:	e036      	b.n	8002ffe <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002f90:	69fb      	ldr	r3, [r7, #28]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d10b      	bne.n	8002fae <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002f96:	69bb      	ldr	r3, [r7, #24]
 8002f98:	881b      	ldrh	r3, [r3, #0]
 8002f9a:	461a      	mov	r2, r3
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002fa4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002fa6:	69bb      	ldr	r3, [r7, #24]
 8002fa8:	3302      	adds	r3, #2
 8002faa:	61bb      	str	r3, [r7, #24]
 8002fac:	e007      	b.n	8002fbe <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002fae:	69fb      	ldr	r3, [r7, #28]
 8002fb0:	781a      	ldrb	r2, [r3, #0]
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002fb8:	69fb      	ldr	r3, [r7, #28]
 8002fba:	3301      	adds	r3, #1
 8002fbc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002fc2:	b29b      	uxth	r3, r3
 8002fc4:	3b01      	subs	r3, #1
 8002fc6:	b29a      	uxth	r2, r3
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002fd0:	b29b      	uxth	r3, r3
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d1cf      	bne.n	8002f76 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	9300      	str	r3, [sp, #0]
 8002fda:	697b      	ldr	r3, [r7, #20]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	2140      	movs	r1, #64	; 0x40
 8002fe0:	68f8      	ldr	r0, [r7, #12]
 8002fe2:	f000 f810 	bl	8003006 <UART_WaitOnFlagUntilTimeout>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d001      	beq.n	8002ff0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002fec:	2303      	movs	r3, #3
 8002fee:	e006      	b.n	8002ffe <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	2220      	movs	r2, #32
 8002ff4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	e000      	b.n	8002ffe <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002ffc:	2302      	movs	r3, #2
  }
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	3720      	adds	r7, #32
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}

08003006 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003006:	b580      	push	{r7, lr}
 8003008:	b084      	sub	sp, #16
 800300a:	af00      	add	r7, sp, #0
 800300c:	60f8      	str	r0, [r7, #12]
 800300e:	60b9      	str	r1, [r7, #8]
 8003010:	603b      	str	r3, [r7, #0]
 8003012:	4613      	mov	r3, r2
 8003014:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003016:	e02c      	b.n	8003072 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003018:	69bb      	ldr	r3, [r7, #24]
 800301a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800301e:	d028      	beq.n	8003072 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003020:	69bb      	ldr	r3, [r7, #24]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d007      	beq.n	8003036 <UART_WaitOnFlagUntilTimeout+0x30>
 8003026:	f7fd ff87 	bl	8000f38 <HAL_GetTick>
 800302a:	4602      	mov	r2, r0
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	1ad3      	subs	r3, r2, r3
 8003030:	69ba      	ldr	r2, [r7, #24]
 8003032:	429a      	cmp	r2, r3
 8003034:	d21d      	bcs.n	8003072 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	68da      	ldr	r2, [r3, #12]
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003044:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	695a      	ldr	r2, [r3, #20]
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f022 0201 	bic.w	r2, r2, #1
 8003054:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	2220      	movs	r2, #32
 800305a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	2220      	movs	r2, #32
 8003062:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	2200      	movs	r2, #0
 800306a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800306e:	2303      	movs	r3, #3
 8003070:	e00f      	b.n	8003092 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	681a      	ldr	r2, [r3, #0]
 8003078:	68bb      	ldr	r3, [r7, #8]
 800307a:	4013      	ands	r3, r2
 800307c:	68ba      	ldr	r2, [r7, #8]
 800307e:	429a      	cmp	r2, r3
 8003080:	bf0c      	ite	eq
 8003082:	2301      	moveq	r3, #1
 8003084:	2300      	movne	r3, #0
 8003086:	b2db      	uxtb	r3, r3
 8003088:	461a      	mov	r2, r3
 800308a:	79fb      	ldrb	r3, [r7, #7]
 800308c:	429a      	cmp	r2, r3
 800308e:	d0c3      	beq.n	8003018 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003090:	2300      	movs	r3, #0
}
 8003092:	4618      	mov	r0, r3
 8003094:	3710      	adds	r7, #16
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}
	...

0800309c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b084      	sub	sp, #16
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	691b      	ldr	r3, [r3, #16]
 80030aa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	68da      	ldr	r2, [r3, #12]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	430a      	orrs	r2, r1
 80030b8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	689a      	ldr	r2, [r3, #8]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	691b      	ldr	r3, [r3, #16]
 80030c2:	431a      	orrs	r2, r3
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	695b      	ldr	r3, [r3, #20]
 80030c8:	4313      	orrs	r3, r2
 80030ca:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	68db      	ldr	r3, [r3, #12]
 80030d2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80030d6:	f023 030c 	bic.w	r3, r3, #12
 80030da:	687a      	ldr	r2, [r7, #4]
 80030dc:	6812      	ldr	r2, [r2, #0]
 80030de:	68b9      	ldr	r1, [r7, #8]
 80030e0:	430b      	orrs	r3, r1
 80030e2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	695b      	ldr	r3, [r3, #20]
 80030ea:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	699a      	ldr	r2, [r3, #24]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	430a      	orrs	r2, r1
 80030f8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a2c      	ldr	r2, [pc, #176]	; (80031b0 <UART_SetConfig+0x114>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d103      	bne.n	800310c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003104:	f7ff fe6e 	bl	8002de4 <HAL_RCC_GetPCLK2Freq>
 8003108:	60f8      	str	r0, [r7, #12]
 800310a:	e002      	b.n	8003112 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800310c:	f7ff fe56 	bl	8002dbc <HAL_RCC_GetPCLK1Freq>
 8003110:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003112:	68fa      	ldr	r2, [r7, #12]
 8003114:	4613      	mov	r3, r2
 8003116:	009b      	lsls	r3, r3, #2
 8003118:	4413      	add	r3, r2
 800311a:	009a      	lsls	r2, r3, #2
 800311c:	441a      	add	r2, r3
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	009b      	lsls	r3, r3, #2
 8003124:	fbb2 f3f3 	udiv	r3, r2, r3
 8003128:	4a22      	ldr	r2, [pc, #136]	; (80031b4 <UART_SetConfig+0x118>)
 800312a:	fba2 2303 	umull	r2, r3, r2, r3
 800312e:	095b      	lsrs	r3, r3, #5
 8003130:	0119      	lsls	r1, r3, #4
 8003132:	68fa      	ldr	r2, [r7, #12]
 8003134:	4613      	mov	r3, r2
 8003136:	009b      	lsls	r3, r3, #2
 8003138:	4413      	add	r3, r2
 800313a:	009a      	lsls	r2, r3, #2
 800313c:	441a      	add	r2, r3
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	009b      	lsls	r3, r3, #2
 8003144:	fbb2 f2f3 	udiv	r2, r2, r3
 8003148:	4b1a      	ldr	r3, [pc, #104]	; (80031b4 <UART_SetConfig+0x118>)
 800314a:	fba3 0302 	umull	r0, r3, r3, r2
 800314e:	095b      	lsrs	r3, r3, #5
 8003150:	2064      	movs	r0, #100	; 0x64
 8003152:	fb00 f303 	mul.w	r3, r0, r3
 8003156:	1ad3      	subs	r3, r2, r3
 8003158:	011b      	lsls	r3, r3, #4
 800315a:	3332      	adds	r3, #50	; 0x32
 800315c:	4a15      	ldr	r2, [pc, #84]	; (80031b4 <UART_SetConfig+0x118>)
 800315e:	fba2 2303 	umull	r2, r3, r2, r3
 8003162:	095b      	lsrs	r3, r3, #5
 8003164:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003168:	4419      	add	r1, r3
 800316a:	68fa      	ldr	r2, [r7, #12]
 800316c:	4613      	mov	r3, r2
 800316e:	009b      	lsls	r3, r3, #2
 8003170:	4413      	add	r3, r2
 8003172:	009a      	lsls	r2, r3, #2
 8003174:	441a      	add	r2, r3
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	009b      	lsls	r3, r3, #2
 800317c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003180:	4b0c      	ldr	r3, [pc, #48]	; (80031b4 <UART_SetConfig+0x118>)
 8003182:	fba3 0302 	umull	r0, r3, r3, r2
 8003186:	095b      	lsrs	r3, r3, #5
 8003188:	2064      	movs	r0, #100	; 0x64
 800318a:	fb00 f303 	mul.w	r3, r0, r3
 800318e:	1ad3      	subs	r3, r2, r3
 8003190:	011b      	lsls	r3, r3, #4
 8003192:	3332      	adds	r3, #50	; 0x32
 8003194:	4a07      	ldr	r2, [pc, #28]	; (80031b4 <UART_SetConfig+0x118>)
 8003196:	fba2 2303 	umull	r2, r3, r2, r3
 800319a:	095b      	lsrs	r3, r3, #5
 800319c:	f003 020f 	and.w	r2, r3, #15
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	440a      	add	r2, r1
 80031a6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80031a8:	bf00      	nop
 80031aa:	3710      	adds	r7, #16
 80031ac:	46bd      	mov	sp, r7
 80031ae:	bd80      	pop	{r7, pc}
 80031b0:	40013800 	.word	0x40013800
 80031b4:	51eb851f 	.word	0x51eb851f

080031b8 <__errno>:
 80031b8:	4b01      	ldr	r3, [pc, #4]	; (80031c0 <__errno+0x8>)
 80031ba:	6818      	ldr	r0, [r3, #0]
 80031bc:	4770      	bx	lr
 80031be:	bf00      	nop
 80031c0:	2000000c 	.word	0x2000000c

080031c4 <__libc_init_array>:
 80031c4:	b570      	push	{r4, r5, r6, lr}
 80031c6:	2500      	movs	r5, #0
 80031c8:	4e0c      	ldr	r6, [pc, #48]	; (80031fc <__libc_init_array+0x38>)
 80031ca:	4c0d      	ldr	r4, [pc, #52]	; (8003200 <__libc_init_array+0x3c>)
 80031cc:	1ba4      	subs	r4, r4, r6
 80031ce:	10a4      	asrs	r4, r4, #2
 80031d0:	42a5      	cmp	r5, r4
 80031d2:	d109      	bne.n	80031e8 <__libc_init_array+0x24>
 80031d4:	f000 fc36 	bl	8003a44 <_init>
 80031d8:	2500      	movs	r5, #0
 80031da:	4e0a      	ldr	r6, [pc, #40]	; (8003204 <__libc_init_array+0x40>)
 80031dc:	4c0a      	ldr	r4, [pc, #40]	; (8003208 <__libc_init_array+0x44>)
 80031de:	1ba4      	subs	r4, r4, r6
 80031e0:	10a4      	asrs	r4, r4, #2
 80031e2:	42a5      	cmp	r5, r4
 80031e4:	d105      	bne.n	80031f2 <__libc_init_array+0x2e>
 80031e6:	bd70      	pop	{r4, r5, r6, pc}
 80031e8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80031ec:	4798      	blx	r3
 80031ee:	3501      	adds	r5, #1
 80031f0:	e7ee      	b.n	80031d0 <__libc_init_array+0xc>
 80031f2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80031f6:	4798      	blx	r3
 80031f8:	3501      	adds	r5, #1
 80031fa:	e7f2      	b.n	80031e2 <__libc_init_array+0x1e>
 80031fc:	08003b7c 	.word	0x08003b7c
 8003200:	08003b7c 	.word	0x08003b7c
 8003204:	08003b7c 	.word	0x08003b7c
 8003208:	08003b80 	.word	0x08003b80

0800320c <memcpy>:
 800320c:	b510      	push	{r4, lr}
 800320e:	1e43      	subs	r3, r0, #1
 8003210:	440a      	add	r2, r1
 8003212:	4291      	cmp	r1, r2
 8003214:	d100      	bne.n	8003218 <memcpy+0xc>
 8003216:	bd10      	pop	{r4, pc}
 8003218:	f811 4b01 	ldrb.w	r4, [r1], #1
 800321c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003220:	e7f7      	b.n	8003212 <memcpy+0x6>

08003222 <memset>:
 8003222:	4603      	mov	r3, r0
 8003224:	4402      	add	r2, r0
 8003226:	4293      	cmp	r3, r2
 8003228:	d100      	bne.n	800322c <memset+0xa>
 800322a:	4770      	bx	lr
 800322c:	f803 1b01 	strb.w	r1, [r3], #1
 8003230:	e7f9      	b.n	8003226 <memset+0x4>
	...

08003234 <_vsiprintf_r>:
 8003234:	b500      	push	{lr}
 8003236:	b09b      	sub	sp, #108	; 0x6c
 8003238:	9100      	str	r1, [sp, #0]
 800323a:	9104      	str	r1, [sp, #16]
 800323c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003240:	9105      	str	r1, [sp, #20]
 8003242:	9102      	str	r1, [sp, #8]
 8003244:	4905      	ldr	r1, [pc, #20]	; (800325c <_vsiprintf_r+0x28>)
 8003246:	9103      	str	r1, [sp, #12]
 8003248:	4669      	mov	r1, sp
 800324a:	f000 f86d 	bl	8003328 <_svfiprintf_r>
 800324e:	2200      	movs	r2, #0
 8003250:	9b00      	ldr	r3, [sp, #0]
 8003252:	701a      	strb	r2, [r3, #0]
 8003254:	b01b      	add	sp, #108	; 0x6c
 8003256:	f85d fb04 	ldr.w	pc, [sp], #4
 800325a:	bf00      	nop
 800325c:	ffff0208 	.word	0xffff0208

08003260 <vsiprintf>:
 8003260:	4613      	mov	r3, r2
 8003262:	460a      	mov	r2, r1
 8003264:	4601      	mov	r1, r0
 8003266:	4802      	ldr	r0, [pc, #8]	; (8003270 <vsiprintf+0x10>)
 8003268:	6800      	ldr	r0, [r0, #0]
 800326a:	f7ff bfe3 	b.w	8003234 <_vsiprintf_r>
 800326e:	bf00      	nop
 8003270:	2000000c 	.word	0x2000000c

08003274 <__ssputs_r>:
 8003274:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003278:	688e      	ldr	r6, [r1, #8]
 800327a:	4682      	mov	sl, r0
 800327c:	429e      	cmp	r6, r3
 800327e:	460c      	mov	r4, r1
 8003280:	4690      	mov	r8, r2
 8003282:	4699      	mov	r9, r3
 8003284:	d837      	bhi.n	80032f6 <__ssputs_r+0x82>
 8003286:	898a      	ldrh	r2, [r1, #12]
 8003288:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800328c:	d031      	beq.n	80032f2 <__ssputs_r+0x7e>
 800328e:	2302      	movs	r3, #2
 8003290:	6825      	ldr	r5, [r4, #0]
 8003292:	6909      	ldr	r1, [r1, #16]
 8003294:	1a6f      	subs	r7, r5, r1
 8003296:	6965      	ldr	r5, [r4, #20]
 8003298:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800329c:	fb95 f5f3 	sdiv	r5, r5, r3
 80032a0:	f109 0301 	add.w	r3, r9, #1
 80032a4:	443b      	add	r3, r7
 80032a6:	429d      	cmp	r5, r3
 80032a8:	bf38      	it	cc
 80032aa:	461d      	movcc	r5, r3
 80032ac:	0553      	lsls	r3, r2, #21
 80032ae:	d530      	bpl.n	8003312 <__ssputs_r+0x9e>
 80032b0:	4629      	mov	r1, r5
 80032b2:	f000 fb2d 	bl	8003910 <_malloc_r>
 80032b6:	4606      	mov	r6, r0
 80032b8:	b950      	cbnz	r0, 80032d0 <__ssputs_r+0x5c>
 80032ba:	230c      	movs	r3, #12
 80032bc:	f04f 30ff 	mov.w	r0, #4294967295
 80032c0:	f8ca 3000 	str.w	r3, [sl]
 80032c4:	89a3      	ldrh	r3, [r4, #12]
 80032c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80032ca:	81a3      	strh	r3, [r4, #12]
 80032cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80032d0:	463a      	mov	r2, r7
 80032d2:	6921      	ldr	r1, [r4, #16]
 80032d4:	f7ff ff9a 	bl	800320c <memcpy>
 80032d8:	89a3      	ldrh	r3, [r4, #12]
 80032da:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80032de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032e2:	81a3      	strh	r3, [r4, #12]
 80032e4:	6126      	str	r6, [r4, #16]
 80032e6:	443e      	add	r6, r7
 80032e8:	6026      	str	r6, [r4, #0]
 80032ea:	464e      	mov	r6, r9
 80032ec:	6165      	str	r5, [r4, #20]
 80032ee:	1bed      	subs	r5, r5, r7
 80032f0:	60a5      	str	r5, [r4, #8]
 80032f2:	454e      	cmp	r6, r9
 80032f4:	d900      	bls.n	80032f8 <__ssputs_r+0x84>
 80032f6:	464e      	mov	r6, r9
 80032f8:	4632      	mov	r2, r6
 80032fa:	4641      	mov	r1, r8
 80032fc:	6820      	ldr	r0, [r4, #0]
 80032fe:	f000 faa1 	bl	8003844 <memmove>
 8003302:	68a3      	ldr	r3, [r4, #8]
 8003304:	2000      	movs	r0, #0
 8003306:	1b9b      	subs	r3, r3, r6
 8003308:	60a3      	str	r3, [r4, #8]
 800330a:	6823      	ldr	r3, [r4, #0]
 800330c:	441e      	add	r6, r3
 800330e:	6026      	str	r6, [r4, #0]
 8003310:	e7dc      	b.n	80032cc <__ssputs_r+0x58>
 8003312:	462a      	mov	r2, r5
 8003314:	f000 fb56 	bl	80039c4 <_realloc_r>
 8003318:	4606      	mov	r6, r0
 800331a:	2800      	cmp	r0, #0
 800331c:	d1e2      	bne.n	80032e4 <__ssputs_r+0x70>
 800331e:	6921      	ldr	r1, [r4, #16]
 8003320:	4650      	mov	r0, sl
 8003322:	f000 faa9 	bl	8003878 <_free_r>
 8003326:	e7c8      	b.n	80032ba <__ssputs_r+0x46>

08003328 <_svfiprintf_r>:
 8003328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800332c:	461d      	mov	r5, r3
 800332e:	898b      	ldrh	r3, [r1, #12]
 8003330:	b09d      	sub	sp, #116	; 0x74
 8003332:	061f      	lsls	r7, r3, #24
 8003334:	4680      	mov	r8, r0
 8003336:	460c      	mov	r4, r1
 8003338:	4616      	mov	r6, r2
 800333a:	d50f      	bpl.n	800335c <_svfiprintf_r+0x34>
 800333c:	690b      	ldr	r3, [r1, #16]
 800333e:	b96b      	cbnz	r3, 800335c <_svfiprintf_r+0x34>
 8003340:	2140      	movs	r1, #64	; 0x40
 8003342:	f000 fae5 	bl	8003910 <_malloc_r>
 8003346:	6020      	str	r0, [r4, #0]
 8003348:	6120      	str	r0, [r4, #16]
 800334a:	b928      	cbnz	r0, 8003358 <_svfiprintf_r+0x30>
 800334c:	230c      	movs	r3, #12
 800334e:	f8c8 3000 	str.w	r3, [r8]
 8003352:	f04f 30ff 	mov.w	r0, #4294967295
 8003356:	e0c8      	b.n	80034ea <_svfiprintf_r+0x1c2>
 8003358:	2340      	movs	r3, #64	; 0x40
 800335a:	6163      	str	r3, [r4, #20]
 800335c:	2300      	movs	r3, #0
 800335e:	9309      	str	r3, [sp, #36]	; 0x24
 8003360:	2320      	movs	r3, #32
 8003362:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003366:	2330      	movs	r3, #48	; 0x30
 8003368:	f04f 0b01 	mov.w	fp, #1
 800336c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003370:	9503      	str	r5, [sp, #12]
 8003372:	4637      	mov	r7, r6
 8003374:	463d      	mov	r5, r7
 8003376:	f815 3b01 	ldrb.w	r3, [r5], #1
 800337a:	b10b      	cbz	r3, 8003380 <_svfiprintf_r+0x58>
 800337c:	2b25      	cmp	r3, #37	; 0x25
 800337e:	d13e      	bne.n	80033fe <_svfiprintf_r+0xd6>
 8003380:	ebb7 0a06 	subs.w	sl, r7, r6
 8003384:	d00b      	beq.n	800339e <_svfiprintf_r+0x76>
 8003386:	4653      	mov	r3, sl
 8003388:	4632      	mov	r2, r6
 800338a:	4621      	mov	r1, r4
 800338c:	4640      	mov	r0, r8
 800338e:	f7ff ff71 	bl	8003274 <__ssputs_r>
 8003392:	3001      	adds	r0, #1
 8003394:	f000 80a4 	beq.w	80034e0 <_svfiprintf_r+0x1b8>
 8003398:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800339a:	4453      	add	r3, sl
 800339c:	9309      	str	r3, [sp, #36]	; 0x24
 800339e:	783b      	ldrb	r3, [r7, #0]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	f000 809d 	beq.w	80034e0 <_svfiprintf_r+0x1b8>
 80033a6:	2300      	movs	r3, #0
 80033a8:	f04f 32ff 	mov.w	r2, #4294967295
 80033ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80033b0:	9304      	str	r3, [sp, #16]
 80033b2:	9307      	str	r3, [sp, #28]
 80033b4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80033b8:	931a      	str	r3, [sp, #104]	; 0x68
 80033ba:	462f      	mov	r7, r5
 80033bc:	2205      	movs	r2, #5
 80033be:	f817 1b01 	ldrb.w	r1, [r7], #1
 80033c2:	4850      	ldr	r0, [pc, #320]	; (8003504 <_svfiprintf_r+0x1dc>)
 80033c4:	f000 fa30 	bl	8003828 <memchr>
 80033c8:	9b04      	ldr	r3, [sp, #16]
 80033ca:	b9d0      	cbnz	r0, 8003402 <_svfiprintf_r+0xda>
 80033cc:	06d9      	lsls	r1, r3, #27
 80033ce:	bf44      	itt	mi
 80033d0:	2220      	movmi	r2, #32
 80033d2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80033d6:	071a      	lsls	r2, r3, #28
 80033d8:	bf44      	itt	mi
 80033da:	222b      	movmi	r2, #43	; 0x2b
 80033dc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80033e0:	782a      	ldrb	r2, [r5, #0]
 80033e2:	2a2a      	cmp	r2, #42	; 0x2a
 80033e4:	d015      	beq.n	8003412 <_svfiprintf_r+0xea>
 80033e6:	462f      	mov	r7, r5
 80033e8:	2000      	movs	r0, #0
 80033ea:	250a      	movs	r5, #10
 80033ec:	9a07      	ldr	r2, [sp, #28]
 80033ee:	4639      	mov	r1, r7
 80033f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80033f4:	3b30      	subs	r3, #48	; 0x30
 80033f6:	2b09      	cmp	r3, #9
 80033f8:	d94d      	bls.n	8003496 <_svfiprintf_r+0x16e>
 80033fa:	b1b8      	cbz	r0, 800342c <_svfiprintf_r+0x104>
 80033fc:	e00f      	b.n	800341e <_svfiprintf_r+0xf6>
 80033fe:	462f      	mov	r7, r5
 8003400:	e7b8      	b.n	8003374 <_svfiprintf_r+0x4c>
 8003402:	4a40      	ldr	r2, [pc, #256]	; (8003504 <_svfiprintf_r+0x1dc>)
 8003404:	463d      	mov	r5, r7
 8003406:	1a80      	subs	r0, r0, r2
 8003408:	fa0b f000 	lsl.w	r0, fp, r0
 800340c:	4318      	orrs	r0, r3
 800340e:	9004      	str	r0, [sp, #16]
 8003410:	e7d3      	b.n	80033ba <_svfiprintf_r+0x92>
 8003412:	9a03      	ldr	r2, [sp, #12]
 8003414:	1d11      	adds	r1, r2, #4
 8003416:	6812      	ldr	r2, [r2, #0]
 8003418:	9103      	str	r1, [sp, #12]
 800341a:	2a00      	cmp	r2, #0
 800341c:	db01      	blt.n	8003422 <_svfiprintf_r+0xfa>
 800341e:	9207      	str	r2, [sp, #28]
 8003420:	e004      	b.n	800342c <_svfiprintf_r+0x104>
 8003422:	4252      	negs	r2, r2
 8003424:	f043 0302 	orr.w	r3, r3, #2
 8003428:	9207      	str	r2, [sp, #28]
 800342a:	9304      	str	r3, [sp, #16]
 800342c:	783b      	ldrb	r3, [r7, #0]
 800342e:	2b2e      	cmp	r3, #46	; 0x2e
 8003430:	d10c      	bne.n	800344c <_svfiprintf_r+0x124>
 8003432:	787b      	ldrb	r3, [r7, #1]
 8003434:	2b2a      	cmp	r3, #42	; 0x2a
 8003436:	d133      	bne.n	80034a0 <_svfiprintf_r+0x178>
 8003438:	9b03      	ldr	r3, [sp, #12]
 800343a:	3702      	adds	r7, #2
 800343c:	1d1a      	adds	r2, r3, #4
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	9203      	str	r2, [sp, #12]
 8003442:	2b00      	cmp	r3, #0
 8003444:	bfb8      	it	lt
 8003446:	f04f 33ff 	movlt.w	r3, #4294967295
 800344a:	9305      	str	r3, [sp, #20]
 800344c:	4d2e      	ldr	r5, [pc, #184]	; (8003508 <_svfiprintf_r+0x1e0>)
 800344e:	2203      	movs	r2, #3
 8003450:	7839      	ldrb	r1, [r7, #0]
 8003452:	4628      	mov	r0, r5
 8003454:	f000 f9e8 	bl	8003828 <memchr>
 8003458:	b138      	cbz	r0, 800346a <_svfiprintf_r+0x142>
 800345a:	2340      	movs	r3, #64	; 0x40
 800345c:	1b40      	subs	r0, r0, r5
 800345e:	fa03 f000 	lsl.w	r0, r3, r0
 8003462:	9b04      	ldr	r3, [sp, #16]
 8003464:	3701      	adds	r7, #1
 8003466:	4303      	orrs	r3, r0
 8003468:	9304      	str	r3, [sp, #16]
 800346a:	7839      	ldrb	r1, [r7, #0]
 800346c:	2206      	movs	r2, #6
 800346e:	4827      	ldr	r0, [pc, #156]	; (800350c <_svfiprintf_r+0x1e4>)
 8003470:	1c7e      	adds	r6, r7, #1
 8003472:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003476:	f000 f9d7 	bl	8003828 <memchr>
 800347a:	2800      	cmp	r0, #0
 800347c:	d038      	beq.n	80034f0 <_svfiprintf_r+0x1c8>
 800347e:	4b24      	ldr	r3, [pc, #144]	; (8003510 <_svfiprintf_r+0x1e8>)
 8003480:	bb13      	cbnz	r3, 80034c8 <_svfiprintf_r+0x1a0>
 8003482:	9b03      	ldr	r3, [sp, #12]
 8003484:	3307      	adds	r3, #7
 8003486:	f023 0307 	bic.w	r3, r3, #7
 800348a:	3308      	adds	r3, #8
 800348c:	9303      	str	r3, [sp, #12]
 800348e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003490:	444b      	add	r3, r9
 8003492:	9309      	str	r3, [sp, #36]	; 0x24
 8003494:	e76d      	b.n	8003372 <_svfiprintf_r+0x4a>
 8003496:	fb05 3202 	mla	r2, r5, r2, r3
 800349a:	2001      	movs	r0, #1
 800349c:	460f      	mov	r7, r1
 800349e:	e7a6      	b.n	80033ee <_svfiprintf_r+0xc6>
 80034a0:	2300      	movs	r3, #0
 80034a2:	250a      	movs	r5, #10
 80034a4:	4619      	mov	r1, r3
 80034a6:	3701      	adds	r7, #1
 80034a8:	9305      	str	r3, [sp, #20]
 80034aa:	4638      	mov	r0, r7
 80034ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 80034b0:	3a30      	subs	r2, #48	; 0x30
 80034b2:	2a09      	cmp	r2, #9
 80034b4:	d903      	bls.n	80034be <_svfiprintf_r+0x196>
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d0c8      	beq.n	800344c <_svfiprintf_r+0x124>
 80034ba:	9105      	str	r1, [sp, #20]
 80034bc:	e7c6      	b.n	800344c <_svfiprintf_r+0x124>
 80034be:	fb05 2101 	mla	r1, r5, r1, r2
 80034c2:	2301      	movs	r3, #1
 80034c4:	4607      	mov	r7, r0
 80034c6:	e7f0      	b.n	80034aa <_svfiprintf_r+0x182>
 80034c8:	ab03      	add	r3, sp, #12
 80034ca:	9300      	str	r3, [sp, #0]
 80034cc:	4622      	mov	r2, r4
 80034ce:	4b11      	ldr	r3, [pc, #68]	; (8003514 <_svfiprintf_r+0x1ec>)
 80034d0:	a904      	add	r1, sp, #16
 80034d2:	4640      	mov	r0, r8
 80034d4:	f3af 8000 	nop.w
 80034d8:	f1b0 3fff 	cmp.w	r0, #4294967295
 80034dc:	4681      	mov	r9, r0
 80034de:	d1d6      	bne.n	800348e <_svfiprintf_r+0x166>
 80034e0:	89a3      	ldrh	r3, [r4, #12]
 80034e2:	065b      	lsls	r3, r3, #25
 80034e4:	f53f af35 	bmi.w	8003352 <_svfiprintf_r+0x2a>
 80034e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80034ea:	b01d      	add	sp, #116	; 0x74
 80034ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80034f0:	ab03      	add	r3, sp, #12
 80034f2:	9300      	str	r3, [sp, #0]
 80034f4:	4622      	mov	r2, r4
 80034f6:	4b07      	ldr	r3, [pc, #28]	; (8003514 <_svfiprintf_r+0x1ec>)
 80034f8:	a904      	add	r1, sp, #16
 80034fa:	4640      	mov	r0, r8
 80034fc:	f000 f882 	bl	8003604 <_printf_i>
 8003500:	e7ea      	b.n	80034d8 <_svfiprintf_r+0x1b0>
 8003502:	bf00      	nop
 8003504:	08003b48 	.word	0x08003b48
 8003508:	08003b4e 	.word	0x08003b4e
 800350c:	08003b52 	.word	0x08003b52
 8003510:	00000000 	.word	0x00000000
 8003514:	08003275 	.word	0x08003275

08003518 <_printf_common>:
 8003518:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800351c:	4691      	mov	r9, r2
 800351e:	461f      	mov	r7, r3
 8003520:	688a      	ldr	r2, [r1, #8]
 8003522:	690b      	ldr	r3, [r1, #16]
 8003524:	4606      	mov	r6, r0
 8003526:	4293      	cmp	r3, r2
 8003528:	bfb8      	it	lt
 800352a:	4613      	movlt	r3, r2
 800352c:	f8c9 3000 	str.w	r3, [r9]
 8003530:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003534:	460c      	mov	r4, r1
 8003536:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800353a:	b112      	cbz	r2, 8003542 <_printf_common+0x2a>
 800353c:	3301      	adds	r3, #1
 800353e:	f8c9 3000 	str.w	r3, [r9]
 8003542:	6823      	ldr	r3, [r4, #0]
 8003544:	0699      	lsls	r1, r3, #26
 8003546:	bf42      	ittt	mi
 8003548:	f8d9 3000 	ldrmi.w	r3, [r9]
 800354c:	3302      	addmi	r3, #2
 800354e:	f8c9 3000 	strmi.w	r3, [r9]
 8003552:	6825      	ldr	r5, [r4, #0]
 8003554:	f015 0506 	ands.w	r5, r5, #6
 8003558:	d107      	bne.n	800356a <_printf_common+0x52>
 800355a:	f104 0a19 	add.w	sl, r4, #25
 800355e:	68e3      	ldr	r3, [r4, #12]
 8003560:	f8d9 2000 	ldr.w	r2, [r9]
 8003564:	1a9b      	subs	r3, r3, r2
 8003566:	42ab      	cmp	r3, r5
 8003568:	dc29      	bgt.n	80035be <_printf_common+0xa6>
 800356a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800356e:	6822      	ldr	r2, [r4, #0]
 8003570:	3300      	adds	r3, #0
 8003572:	bf18      	it	ne
 8003574:	2301      	movne	r3, #1
 8003576:	0692      	lsls	r2, r2, #26
 8003578:	d42e      	bmi.n	80035d8 <_printf_common+0xc0>
 800357a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800357e:	4639      	mov	r1, r7
 8003580:	4630      	mov	r0, r6
 8003582:	47c0      	blx	r8
 8003584:	3001      	adds	r0, #1
 8003586:	d021      	beq.n	80035cc <_printf_common+0xb4>
 8003588:	6823      	ldr	r3, [r4, #0]
 800358a:	68e5      	ldr	r5, [r4, #12]
 800358c:	f003 0306 	and.w	r3, r3, #6
 8003590:	2b04      	cmp	r3, #4
 8003592:	bf18      	it	ne
 8003594:	2500      	movne	r5, #0
 8003596:	f8d9 2000 	ldr.w	r2, [r9]
 800359a:	f04f 0900 	mov.w	r9, #0
 800359e:	bf08      	it	eq
 80035a0:	1aad      	subeq	r5, r5, r2
 80035a2:	68a3      	ldr	r3, [r4, #8]
 80035a4:	6922      	ldr	r2, [r4, #16]
 80035a6:	bf08      	it	eq
 80035a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80035ac:	4293      	cmp	r3, r2
 80035ae:	bfc4      	itt	gt
 80035b0:	1a9b      	subgt	r3, r3, r2
 80035b2:	18ed      	addgt	r5, r5, r3
 80035b4:	341a      	adds	r4, #26
 80035b6:	454d      	cmp	r5, r9
 80035b8:	d11a      	bne.n	80035f0 <_printf_common+0xd8>
 80035ba:	2000      	movs	r0, #0
 80035bc:	e008      	b.n	80035d0 <_printf_common+0xb8>
 80035be:	2301      	movs	r3, #1
 80035c0:	4652      	mov	r2, sl
 80035c2:	4639      	mov	r1, r7
 80035c4:	4630      	mov	r0, r6
 80035c6:	47c0      	blx	r8
 80035c8:	3001      	adds	r0, #1
 80035ca:	d103      	bne.n	80035d4 <_printf_common+0xbc>
 80035cc:	f04f 30ff 	mov.w	r0, #4294967295
 80035d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80035d4:	3501      	adds	r5, #1
 80035d6:	e7c2      	b.n	800355e <_printf_common+0x46>
 80035d8:	2030      	movs	r0, #48	; 0x30
 80035da:	18e1      	adds	r1, r4, r3
 80035dc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80035e0:	1c5a      	adds	r2, r3, #1
 80035e2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80035e6:	4422      	add	r2, r4
 80035e8:	3302      	adds	r3, #2
 80035ea:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80035ee:	e7c4      	b.n	800357a <_printf_common+0x62>
 80035f0:	2301      	movs	r3, #1
 80035f2:	4622      	mov	r2, r4
 80035f4:	4639      	mov	r1, r7
 80035f6:	4630      	mov	r0, r6
 80035f8:	47c0      	blx	r8
 80035fa:	3001      	adds	r0, #1
 80035fc:	d0e6      	beq.n	80035cc <_printf_common+0xb4>
 80035fe:	f109 0901 	add.w	r9, r9, #1
 8003602:	e7d8      	b.n	80035b6 <_printf_common+0x9e>

08003604 <_printf_i>:
 8003604:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003608:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800360c:	460c      	mov	r4, r1
 800360e:	7e09      	ldrb	r1, [r1, #24]
 8003610:	b085      	sub	sp, #20
 8003612:	296e      	cmp	r1, #110	; 0x6e
 8003614:	4617      	mov	r7, r2
 8003616:	4606      	mov	r6, r0
 8003618:	4698      	mov	r8, r3
 800361a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800361c:	f000 80b3 	beq.w	8003786 <_printf_i+0x182>
 8003620:	d822      	bhi.n	8003668 <_printf_i+0x64>
 8003622:	2963      	cmp	r1, #99	; 0x63
 8003624:	d036      	beq.n	8003694 <_printf_i+0x90>
 8003626:	d80a      	bhi.n	800363e <_printf_i+0x3a>
 8003628:	2900      	cmp	r1, #0
 800362a:	f000 80b9 	beq.w	80037a0 <_printf_i+0x19c>
 800362e:	2958      	cmp	r1, #88	; 0x58
 8003630:	f000 8083 	beq.w	800373a <_printf_i+0x136>
 8003634:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003638:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800363c:	e032      	b.n	80036a4 <_printf_i+0xa0>
 800363e:	2964      	cmp	r1, #100	; 0x64
 8003640:	d001      	beq.n	8003646 <_printf_i+0x42>
 8003642:	2969      	cmp	r1, #105	; 0x69
 8003644:	d1f6      	bne.n	8003634 <_printf_i+0x30>
 8003646:	6820      	ldr	r0, [r4, #0]
 8003648:	6813      	ldr	r3, [r2, #0]
 800364a:	0605      	lsls	r5, r0, #24
 800364c:	f103 0104 	add.w	r1, r3, #4
 8003650:	d52a      	bpl.n	80036a8 <_printf_i+0xa4>
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	6011      	str	r1, [r2, #0]
 8003656:	2b00      	cmp	r3, #0
 8003658:	da03      	bge.n	8003662 <_printf_i+0x5e>
 800365a:	222d      	movs	r2, #45	; 0x2d
 800365c:	425b      	negs	r3, r3
 800365e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003662:	486f      	ldr	r0, [pc, #444]	; (8003820 <_printf_i+0x21c>)
 8003664:	220a      	movs	r2, #10
 8003666:	e039      	b.n	80036dc <_printf_i+0xd8>
 8003668:	2973      	cmp	r1, #115	; 0x73
 800366a:	f000 809d 	beq.w	80037a8 <_printf_i+0x1a4>
 800366e:	d808      	bhi.n	8003682 <_printf_i+0x7e>
 8003670:	296f      	cmp	r1, #111	; 0x6f
 8003672:	d020      	beq.n	80036b6 <_printf_i+0xb2>
 8003674:	2970      	cmp	r1, #112	; 0x70
 8003676:	d1dd      	bne.n	8003634 <_printf_i+0x30>
 8003678:	6823      	ldr	r3, [r4, #0]
 800367a:	f043 0320 	orr.w	r3, r3, #32
 800367e:	6023      	str	r3, [r4, #0]
 8003680:	e003      	b.n	800368a <_printf_i+0x86>
 8003682:	2975      	cmp	r1, #117	; 0x75
 8003684:	d017      	beq.n	80036b6 <_printf_i+0xb2>
 8003686:	2978      	cmp	r1, #120	; 0x78
 8003688:	d1d4      	bne.n	8003634 <_printf_i+0x30>
 800368a:	2378      	movs	r3, #120	; 0x78
 800368c:	4865      	ldr	r0, [pc, #404]	; (8003824 <_printf_i+0x220>)
 800368e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003692:	e055      	b.n	8003740 <_printf_i+0x13c>
 8003694:	6813      	ldr	r3, [r2, #0]
 8003696:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800369a:	1d19      	adds	r1, r3, #4
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	6011      	str	r1, [r2, #0]
 80036a0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80036a4:	2301      	movs	r3, #1
 80036a6:	e08c      	b.n	80037c2 <_printf_i+0x1be>
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f010 0f40 	tst.w	r0, #64	; 0x40
 80036ae:	6011      	str	r1, [r2, #0]
 80036b0:	bf18      	it	ne
 80036b2:	b21b      	sxthne	r3, r3
 80036b4:	e7cf      	b.n	8003656 <_printf_i+0x52>
 80036b6:	6813      	ldr	r3, [r2, #0]
 80036b8:	6825      	ldr	r5, [r4, #0]
 80036ba:	1d18      	adds	r0, r3, #4
 80036bc:	6010      	str	r0, [r2, #0]
 80036be:	0628      	lsls	r0, r5, #24
 80036c0:	d501      	bpl.n	80036c6 <_printf_i+0xc2>
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	e002      	b.n	80036cc <_printf_i+0xc8>
 80036c6:	0668      	lsls	r0, r5, #25
 80036c8:	d5fb      	bpl.n	80036c2 <_printf_i+0xbe>
 80036ca:	881b      	ldrh	r3, [r3, #0]
 80036cc:	296f      	cmp	r1, #111	; 0x6f
 80036ce:	bf14      	ite	ne
 80036d0:	220a      	movne	r2, #10
 80036d2:	2208      	moveq	r2, #8
 80036d4:	4852      	ldr	r0, [pc, #328]	; (8003820 <_printf_i+0x21c>)
 80036d6:	2100      	movs	r1, #0
 80036d8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80036dc:	6865      	ldr	r5, [r4, #4]
 80036de:	2d00      	cmp	r5, #0
 80036e0:	60a5      	str	r5, [r4, #8]
 80036e2:	f2c0 8095 	blt.w	8003810 <_printf_i+0x20c>
 80036e6:	6821      	ldr	r1, [r4, #0]
 80036e8:	f021 0104 	bic.w	r1, r1, #4
 80036ec:	6021      	str	r1, [r4, #0]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d13d      	bne.n	800376e <_printf_i+0x16a>
 80036f2:	2d00      	cmp	r5, #0
 80036f4:	f040 808e 	bne.w	8003814 <_printf_i+0x210>
 80036f8:	4665      	mov	r5, ip
 80036fa:	2a08      	cmp	r2, #8
 80036fc:	d10b      	bne.n	8003716 <_printf_i+0x112>
 80036fe:	6823      	ldr	r3, [r4, #0]
 8003700:	07db      	lsls	r3, r3, #31
 8003702:	d508      	bpl.n	8003716 <_printf_i+0x112>
 8003704:	6923      	ldr	r3, [r4, #16]
 8003706:	6862      	ldr	r2, [r4, #4]
 8003708:	429a      	cmp	r2, r3
 800370a:	bfde      	ittt	le
 800370c:	2330      	movle	r3, #48	; 0x30
 800370e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003712:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003716:	ebac 0305 	sub.w	r3, ip, r5
 800371a:	6123      	str	r3, [r4, #16]
 800371c:	f8cd 8000 	str.w	r8, [sp]
 8003720:	463b      	mov	r3, r7
 8003722:	aa03      	add	r2, sp, #12
 8003724:	4621      	mov	r1, r4
 8003726:	4630      	mov	r0, r6
 8003728:	f7ff fef6 	bl	8003518 <_printf_common>
 800372c:	3001      	adds	r0, #1
 800372e:	d14d      	bne.n	80037cc <_printf_i+0x1c8>
 8003730:	f04f 30ff 	mov.w	r0, #4294967295
 8003734:	b005      	add	sp, #20
 8003736:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800373a:	4839      	ldr	r0, [pc, #228]	; (8003820 <_printf_i+0x21c>)
 800373c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003740:	6813      	ldr	r3, [r2, #0]
 8003742:	6821      	ldr	r1, [r4, #0]
 8003744:	1d1d      	adds	r5, r3, #4
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	6015      	str	r5, [r2, #0]
 800374a:	060a      	lsls	r2, r1, #24
 800374c:	d50b      	bpl.n	8003766 <_printf_i+0x162>
 800374e:	07ca      	lsls	r2, r1, #31
 8003750:	bf44      	itt	mi
 8003752:	f041 0120 	orrmi.w	r1, r1, #32
 8003756:	6021      	strmi	r1, [r4, #0]
 8003758:	b91b      	cbnz	r3, 8003762 <_printf_i+0x15e>
 800375a:	6822      	ldr	r2, [r4, #0]
 800375c:	f022 0220 	bic.w	r2, r2, #32
 8003760:	6022      	str	r2, [r4, #0]
 8003762:	2210      	movs	r2, #16
 8003764:	e7b7      	b.n	80036d6 <_printf_i+0xd2>
 8003766:	064d      	lsls	r5, r1, #25
 8003768:	bf48      	it	mi
 800376a:	b29b      	uxthmi	r3, r3
 800376c:	e7ef      	b.n	800374e <_printf_i+0x14a>
 800376e:	4665      	mov	r5, ip
 8003770:	fbb3 f1f2 	udiv	r1, r3, r2
 8003774:	fb02 3311 	mls	r3, r2, r1, r3
 8003778:	5cc3      	ldrb	r3, [r0, r3]
 800377a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800377e:	460b      	mov	r3, r1
 8003780:	2900      	cmp	r1, #0
 8003782:	d1f5      	bne.n	8003770 <_printf_i+0x16c>
 8003784:	e7b9      	b.n	80036fa <_printf_i+0xf6>
 8003786:	6813      	ldr	r3, [r2, #0]
 8003788:	6825      	ldr	r5, [r4, #0]
 800378a:	1d18      	adds	r0, r3, #4
 800378c:	6961      	ldr	r1, [r4, #20]
 800378e:	6010      	str	r0, [r2, #0]
 8003790:	0628      	lsls	r0, r5, #24
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	d501      	bpl.n	800379a <_printf_i+0x196>
 8003796:	6019      	str	r1, [r3, #0]
 8003798:	e002      	b.n	80037a0 <_printf_i+0x19c>
 800379a:	066a      	lsls	r2, r5, #25
 800379c:	d5fb      	bpl.n	8003796 <_printf_i+0x192>
 800379e:	8019      	strh	r1, [r3, #0]
 80037a0:	2300      	movs	r3, #0
 80037a2:	4665      	mov	r5, ip
 80037a4:	6123      	str	r3, [r4, #16]
 80037a6:	e7b9      	b.n	800371c <_printf_i+0x118>
 80037a8:	6813      	ldr	r3, [r2, #0]
 80037aa:	1d19      	adds	r1, r3, #4
 80037ac:	6011      	str	r1, [r2, #0]
 80037ae:	681d      	ldr	r5, [r3, #0]
 80037b0:	6862      	ldr	r2, [r4, #4]
 80037b2:	2100      	movs	r1, #0
 80037b4:	4628      	mov	r0, r5
 80037b6:	f000 f837 	bl	8003828 <memchr>
 80037ba:	b108      	cbz	r0, 80037c0 <_printf_i+0x1bc>
 80037bc:	1b40      	subs	r0, r0, r5
 80037be:	6060      	str	r0, [r4, #4]
 80037c0:	6863      	ldr	r3, [r4, #4]
 80037c2:	6123      	str	r3, [r4, #16]
 80037c4:	2300      	movs	r3, #0
 80037c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80037ca:	e7a7      	b.n	800371c <_printf_i+0x118>
 80037cc:	6923      	ldr	r3, [r4, #16]
 80037ce:	462a      	mov	r2, r5
 80037d0:	4639      	mov	r1, r7
 80037d2:	4630      	mov	r0, r6
 80037d4:	47c0      	blx	r8
 80037d6:	3001      	adds	r0, #1
 80037d8:	d0aa      	beq.n	8003730 <_printf_i+0x12c>
 80037da:	6823      	ldr	r3, [r4, #0]
 80037dc:	079b      	lsls	r3, r3, #30
 80037de:	d413      	bmi.n	8003808 <_printf_i+0x204>
 80037e0:	68e0      	ldr	r0, [r4, #12]
 80037e2:	9b03      	ldr	r3, [sp, #12]
 80037e4:	4298      	cmp	r0, r3
 80037e6:	bfb8      	it	lt
 80037e8:	4618      	movlt	r0, r3
 80037ea:	e7a3      	b.n	8003734 <_printf_i+0x130>
 80037ec:	2301      	movs	r3, #1
 80037ee:	464a      	mov	r2, r9
 80037f0:	4639      	mov	r1, r7
 80037f2:	4630      	mov	r0, r6
 80037f4:	47c0      	blx	r8
 80037f6:	3001      	adds	r0, #1
 80037f8:	d09a      	beq.n	8003730 <_printf_i+0x12c>
 80037fa:	3501      	adds	r5, #1
 80037fc:	68e3      	ldr	r3, [r4, #12]
 80037fe:	9a03      	ldr	r2, [sp, #12]
 8003800:	1a9b      	subs	r3, r3, r2
 8003802:	42ab      	cmp	r3, r5
 8003804:	dcf2      	bgt.n	80037ec <_printf_i+0x1e8>
 8003806:	e7eb      	b.n	80037e0 <_printf_i+0x1dc>
 8003808:	2500      	movs	r5, #0
 800380a:	f104 0919 	add.w	r9, r4, #25
 800380e:	e7f5      	b.n	80037fc <_printf_i+0x1f8>
 8003810:	2b00      	cmp	r3, #0
 8003812:	d1ac      	bne.n	800376e <_printf_i+0x16a>
 8003814:	7803      	ldrb	r3, [r0, #0]
 8003816:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800381a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800381e:	e76c      	b.n	80036fa <_printf_i+0xf6>
 8003820:	08003b59 	.word	0x08003b59
 8003824:	08003b6a 	.word	0x08003b6a

08003828 <memchr>:
 8003828:	b510      	push	{r4, lr}
 800382a:	b2c9      	uxtb	r1, r1
 800382c:	4402      	add	r2, r0
 800382e:	4290      	cmp	r0, r2
 8003830:	4603      	mov	r3, r0
 8003832:	d101      	bne.n	8003838 <memchr+0x10>
 8003834:	2300      	movs	r3, #0
 8003836:	e003      	b.n	8003840 <memchr+0x18>
 8003838:	781c      	ldrb	r4, [r3, #0]
 800383a:	3001      	adds	r0, #1
 800383c:	428c      	cmp	r4, r1
 800383e:	d1f6      	bne.n	800382e <memchr+0x6>
 8003840:	4618      	mov	r0, r3
 8003842:	bd10      	pop	{r4, pc}

08003844 <memmove>:
 8003844:	4288      	cmp	r0, r1
 8003846:	b510      	push	{r4, lr}
 8003848:	eb01 0302 	add.w	r3, r1, r2
 800384c:	d807      	bhi.n	800385e <memmove+0x1a>
 800384e:	1e42      	subs	r2, r0, #1
 8003850:	4299      	cmp	r1, r3
 8003852:	d00a      	beq.n	800386a <memmove+0x26>
 8003854:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003858:	f802 4f01 	strb.w	r4, [r2, #1]!
 800385c:	e7f8      	b.n	8003850 <memmove+0xc>
 800385e:	4283      	cmp	r3, r0
 8003860:	d9f5      	bls.n	800384e <memmove+0xa>
 8003862:	1881      	adds	r1, r0, r2
 8003864:	1ad2      	subs	r2, r2, r3
 8003866:	42d3      	cmn	r3, r2
 8003868:	d100      	bne.n	800386c <memmove+0x28>
 800386a:	bd10      	pop	{r4, pc}
 800386c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003870:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8003874:	e7f7      	b.n	8003866 <memmove+0x22>
	...

08003878 <_free_r>:
 8003878:	b538      	push	{r3, r4, r5, lr}
 800387a:	4605      	mov	r5, r0
 800387c:	2900      	cmp	r1, #0
 800387e:	d043      	beq.n	8003908 <_free_r+0x90>
 8003880:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003884:	1f0c      	subs	r4, r1, #4
 8003886:	2b00      	cmp	r3, #0
 8003888:	bfb8      	it	lt
 800388a:	18e4      	addlt	r4, r4, r3
 800388c:	f000 f8d0 	bl	8003a30 <__malloc_lock>
 8003890:	4a1e      	ldr	r2, [pc, #120]	; (800390c <_free_r+0x94>)
 8003892:	6813      	ldr	r3, [r2, #0]
 8003894:	4610      	mov	r0, r2
 8003896:	b933      	cbnz	r3, 80038a6 <_free_r+0x2e>
 8003898:	6063      	str	r3, [r4, #4]
 800389a:	6014      	str	r4, [r2, #0]
 800389c:	4628      	mov	r0, r5
 800389e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80038a2:	f000 b8c6 	b.w	8003a32 <__malloc_unlock>
 80038a6:	42a3      	cmp	r3, r4
 80038a8:	d90b      	bls.n	80038c2 <_free_r+0x4a>
 80038aa:	6821      	ldr	r1, [r4, #0]
 80038ac:	1862      	adds	r2, r4, r1
 80038ae:	4293      	cmp	r3, r2
 80038b0:	bf01      	itttt	eq
 80038b2:	681a      	ldreq	r2, [r3, #0]
 80038b4:	685b      	ldreq	r3, [r3, #4]
 80038b6:	1852      	addeq	r2, r2, r1
 80038b8:	6022      	streq	r2, [r4, #0]
 80038ba:	6063      	str	r3, [r4, #4]
 80038bc:	6004      	str	r4, [r0, #0]
 80038be:	e7ed      	b.n	800389c <_free_r+0x24>
 80038c0:	4613      	mov	r3, r2
 80038c2:	685a      	ldr	r2, [r3, #4]
 80038c4:	b10a      	cbz	r2, 80038ca <_free_r+0x52>
 80038c6:	42a2      	cmp	r2, r4
 80038c8:	d9fa      	bls.n	80038c0 <_free_r+0x48>
 80038ca:	6819      	ldr	r1, [r3, #0]
 80038cc:	1858      	adds	r0, r3, r1
 80038ce:	42a0      	cmp	r0, r4
 80038d0:	d10b      	bne.n	80038ea <_free_r+0x72>
 80038d2:	6820      	ldr	r0, [r4, #0]
 80038d4:	4401      	add	r1, r0
 80038d6:	1858      	adds	r0, r3, r1
 80038d8:	4282      	cmp	r2, r0
 80038da:	6019      	str	r1, [r3, #0]
 80038dc:	d1de      	bne.n	800389c <_free_r+0x24>
 80038de:	6810      	ldr	r0, [r2, #0]
 80038e0:	6852      	ldr	r2, [r2, #4]
 80038e2:	4401      	add	r1, r0
 80038e4:	6019      	str	r1, [r3, #0]
 80038e6:	605a      	str	r2, [r3, #4]
 80038e8:	e7d8      	b.n	800389c <_free_r+0x24>
 80038ea:	d902      	bls.n	80038f2 <_free_r+0x7a>
 80038ec:	230c      	movs	r3, #12
 80038ee:	602b      	str	r3, [r5, #0]
 80038f0:	e7d4      	b.n	800389c <_free_r+0x24>
 80038f2:	6820      	ldr	r0, [r4, #0]
 80038f4:	1821      	adds	r1, r4, r0
 80038f6:	428a      	cmp	r2, r1
 80038f8:	bf01      	itttt	eq
 80038fa:	6811      	ldreq	r1, [r2, #0]
 80038fc:	6852      	ldreq	r2, [r2, #4]
 80038fe:	1809      	addeq	r1, r1, r0
 8003900:	6021      	streq	r1, [r4, #0]
 8003902:	6062      	str	r2, [r4, #4]
 8003904:	605c      	str	r4, [r3, #4]
 8003906:	e7c9      	b.n	800389c <_free_r+0x24>
 8003908:	bd38      	pop	{r3, r4, r5, pc}
 800390a:	bf00      	nop
 800390c:	20000090 	.word	0x20000090

08003910 <_malloc_r>:
 8003910:	b570      	push	{r4, r5, r6, lr}
 8003912:	1ccd      	adds	r5, r1, #3
 8003914:	f025 0503 	bic.w	r5, r5, #3
 8003918:	3508      	adds	r5, #8
 800391a:	2d0c      	cmp	r5, #12
 800391c:	bf38      	it	cc
 800391e:	250c      	movcc	r5, #12
 8003920:	2d00      	cmp	r5, #0
 8003922:	4606      	mov	r6, r0
 8003924:	db01      	blt.n	800392a <_malloc_r+0x1a>
 8003926:	42a9      	cmp	r1, r5
 8003928:	d903      	bls.n	8003932 <_malloc_r+0x22>
 800392a:	230c      	movs	r3, #12
 800392c:	6033      	str	r3, [r6, #0]
 800392e:	2000      	movs	r0, #0
 8003930:	bd70      	pop	{r4, r5, r6, pc}
 8003932:	f000 f87d 	bl	8003a30 <__malloc_lock>
 8003936:	4a21      	ldr	r2, [pc, #132]	; (80039bc <_malloc_r+0xac>)
 8003938:	6814      	ldr	r4, [r2, #0]
 800393a:	4621      	mov	r1, r4
 800393c:	b991      	cbnz	r1, 8003964 <_malloc_r+0x54>
 800393e:	4c20      	ldr	r4, [pc, #128]	; (80039c0 <_malloc_r+0xb0>)
 8003940:	6823      	ldr	r3, [r4, #0]
 8003942:	b91b      	cbnz	r3, 800394c <_malloc_r+0x3c>
 8003944:	4630      	mov	r0, r6
 8003946:	f000 f863 	bl	8003a10 <_sbrk_r>
 800394a:	6020      	str	r0, [r4, #0]
 800394c:	4629      	mov	r1, r5
 800394e:	4630      	mov	r0, r6
 8003950:	f000 f85e 	bl	8003a10 <_sbrk_r>
 8003954:	1c43      	adds	r3, r0, #1
 8003956:	d124      	bne.n	80039a2 <_malloc_r+0x92>
 8003958:	230c      	movs	r3, #12
 800395a:	4630      	mov	r0, r6
 800395c:	6033      	str	r3, [r6, #0]
 800395e:	f000 f868 	bl	8003a32 <__malloc_unlock>
 8003962:	e7e4      	b.n	800392e <_malloc_r+0x1e>
 8003964:	680b      	ldr	r3, [r1, #0]
 8003966:	1b5b      	subs	r3, r3, r5
 8003968:	d418      	bmi.n	800399c <_malloc_r+0x8c>
 800396a:	2b0b      	cmp	r3, #11
 800396c:	d90f      	bls.n	800398e <_malloc_r+0x7e>
 800396e:	600b      	str	r3, [r1, #0]
 8003970:	18cc      	adds	r4, r1, r3
 8003972:	50cd      	str	r5, [r1, r3]
 8003974:	4630      	mov	r0, r6
 8003976:	f000 f85c 	bl	8003a32 <__malloc_unlock>
 800397a:	f104 000b 	add.w	r0, r4, #11
 800397e:	1d23      	adds	r3, r4, #4
 8003980:	f020 0007 	bic.w	r0, r0, #7
 8003984:	1ac3      	subs	r3, r0, r3
 8003986:	d0d3      	beq.n	8003930 <_malloc_r+0x20>
 8003988:	425a      	negs	r2, r3
 800398a:	50e2      	str	r2, [r4, r3]
 800398c:	e7d0      	b.n	8003930 <_malloc_r+0x20>
 800398e:	684b      	ldr	r3, [r1, #4]
 8003990:	428c      	cmp	r4, r1
 8003992:	bf16      	itet	ne
 8003994:	6063      	strne	r3, [r4, #4]
 8003996:	6013      	streq	r3, [r2, #0]
 8003998:	460c      	movne	r4, r1
 800399a:	e7eb      	b.n	8003974 <_malloc_r+0x64>
 800399c:	460c      	mov	r4, r1
 800399e:	6849      	ldr	r1, [r1, #4]
 80039a0:	e7cc      	b.n	800393c <_malloc_r+0x2c>
 80039a2:	1cc4      	adds	r4, r0, #3
 80039a4:	f024 0403 	bic.w	r4, r4, #3
 80039a8:	42a0      	cmp	r0, r4
 80039aa:	d005      	beq.n	80039b8 <_malloc_r+0xa8>
 80039ac:	1a21      	subs	r1, r4, r0
 80039ae:	4630      	mov	r0, r6
 80039b0:	f000 f82e 	bl	8003a10 <_sbrk_r>
 80039b4:	3001      	adds	r0, #1
 80039b6:	d0cf      	beq.n	8003958 <_malloc_r+0x48>
 80039b8:	6025      	str	r5, [r4, #0]
 80039ba:	e7db      	b.n	8003974 <_malloc_r+0x64>
 80039bc:	20000090 	.word	0x20000090
 80039c0:	20000094 	.word	0x20000094

080039c4 <_realloc_r>:
 80039c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039c6:	4607      	mov	r7, r0
 80039c8:	4614      	mov	r4, r2
 80039ca:	460e      	mov	r6, r1
 80039cc:	b921      	cbnz	r1, 80039d8 <_realloc_r+0x14>
 80039ce:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80039d2:	4611      	mov	r1, r2
 80039d4:	f7ff bf9c 	b.w	8003910 <_malloc_r>
 80039d8:	b922      	cbnz	r2, 80039e4 <_realloc_r+0x20>
 80039da:	f7ff ff4d 	bl	8003878 <_free_r>
 80039de:	4625      	mov	r5, r4
 80039e0:	4628      	mov	r0, r5
 80039e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80039e4:	f000 f826 	bl	8003a34 <_malloc_usable_size_r>
 80039e8:	42a0      	cmp	r0, r4
 80039ea:	d20f      	bcs.n	8003a0c <_realloc_r+0x48>
 80039ec:	4621      	mov	r1, r4
 80039ee:	4638      	mov	r0, r7
 80039f0:	f7ff ff8e 	bl	8003910 <_malloc_r>
 80039f4:	4605      	mov	r5, r0
 80039f6:	2800      	cmp	r0, #0
 80039f8:	d0f2      	beq.n	80039e0 <_realloc_r+0x1c>
 80039fa:	4631      	mov	r1, r6
 80039fc:	4622      	mov	r2, r4
 80039fe:	f7ff fc05 	bl	800320c <memcpy>
 8003a02:	4631      	mov	r1, r6
 8003a04:	4638      	mov	r0, r7
 8003a06:	f7ff ff37 	bl	8003878 <_free_r>
 8003a0a:	e7e9      	b.n	80039e0 <_realloc_r+0x1c>
 8003a0c:	4635      	mov	r5, r6
 8003a0e:	e7e7      	b.n	80039e0 <_realloc_r+0x1c>

08003a10 <_sbrk_r>:
 8003a10:	b538      	push	{r3, r4, r5, lr}
 8003a12:	2300      	movs	r3, #0
 8003a14:	4c05      	ldr	r4, [pc, #20]	; (8003a2c <_sbrk_r+0x1c>)
 8003a16:	4605      	mov	r5, r0
 8003a18:	4608      	mov	r0, r1
 8003a1a:	6023      	str	r3, [r4, #0]
 8003a1c:	f7fd f8f8 	bl	8000c10 <_sbrk>
 8003a20:	1c43      	adds	r3, r0, #1
 8003a22:	d102      	bne.n	8003a2a <_sbrk_r+0x1a>
 8003a24:	6823      	ldr	r3, [r4, #0]
 8003a26:	b103      	cbz	r3, 8003a2a <_sbrk_r+0x1a>
 8003a28:	602b      	str	r3, [r5, #0]
 8003a2a:	bd38      	pop	{r3, r4, r5, pc}
 8003a2c:	20000248 	.word	0x20000248

08003a30 <__malloc_lock>:
 8003a30:	4770      	bx	lr

08003a32 <__malloc_unlock>:
 8003a32:	4770      	bx	lr

08003a34 <_malloc_usable_size_r>:
 8003a34:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003a38:	1f18      	subs	r0, r3, #4
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	bfbc      	itt	lt
 8003a3e:	580b      	ldrlt	r3, [r1, r0]
 8003a40:	18c0      	addlt	r0, r0, r3
 8003a42:	4770      	bx	lr

08003a44 <_init>:
 8003a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a46:	bf00      	nop
 8003a48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a4a:	bc08      	pop	{r3}
 8003a4c:	469e      	mov	lr, r3
 8003a4e:	4770      	bx	lr

08003a50 <_fini>:
 8003a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a52:	bf00      	nop
 8003a54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a56:	bc08      	pop	{r3}
 8003a58:	469e      	mov	lr, r3
 8003a5a:	4770      	bx	lr
